package rpc.iface;

/**
 * Autogenerated by Thrift Compiler (0.21.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.21.0)", date = "2024-11-13")
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class BitmapRPC {

  public interface Iface {

    public java.util.Map<java.lang.String,java.lang.Integer> initial(java.lang.String tableName, java.util.Map<java.lang.String,java.util.List<java.lang.String>> ipMap) throws org.apache.thrift.TException;

    public java.nio.ByteBuffer getReplayIntervals(java.lang.String varName, long window, int headTailMarker) throws org.apache.thrift.TException;

    public java.nio.ByteBuffer windowFilter(java.lang.String variableName, long window, int headTailMarker, java.nio.ByteBuffer intervalBitmap) throws org.apache.thrift.TException;

    public java.nio.ByteBuffer getAllFilteredEvents(long window, java.nio.ByteBuffer intervalBitmap) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void initial(java.lang.String tableName, java.util.Map<java.lang.String,java.util.List<java.lang.String>> ipMap, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.lang.Integer>> resultHandler) throws org.apache.thrift.TException;

    public void getReplayIntervals(java.lang.String varName, long window, int headTailMarker, org.apache.thrift.async.AsyncMethodCallback<java.nio.ByteBuffer> resultHandler) throws org.apache.thrift.TException;

    public void windowFilter(java.lang.String variableName, long window, int headTailMarker, java.nio.ByteBuffer intervalBitmap, org.apache.thrift.async.AsyncMethodCallback<java.nio.ByteBuffer> resultHandler) throws org.apache.thrift.TException;

    public void getAllFilteredEvents(long window, java.nio.ByteBuffer intervalBitmap, org.apache.thrift.async.AsyncMethodCallback<java.nio.ByteBuffer> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      @Override
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      @Override
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    @Override
    public java.util.Map<java.lang.String,java.lang.Integer> initial(java.lang.String tableName, java.util.Map<java.lang.String,java.util.List<java.lang.String>> ipMap) throws org.apache.thrift.TException
    {
      send_initial(tableName, ipMap);
      return recv_initial();
    }

    public void send_initial(java.lang.String tableName, java.util.Map<java.lang.String,java.util.List<java.lang.String>> ipMap) throws org.apache.thrift.TException
    {
      initial_args args = new initial_args();
      args.setTableName(tableName);
      args.setIpMap(ipMap);
      sendBase("initial", args);
    }

    public java.util.Map<java.lang.String,java.lang.Integer> recv_initial() throws org.apache.thrift.TException
    {
      initial_result result = new initial_result();
      receiveBase(result, "initial");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "initial failed: unknown result");
    }

    @Override
    public java.nio.ByteBuffer getReplayIntervals(java.lang.String varName, long window, int headTailMarker) throws org.apache.thrift.TException
    {
      send_getReplayIntervals(varName, window, headTailMarker);
      return recv_getReplayIntervals();
    }

    public void send_getReplayIntervals(java.lang.String varName, long window, int headTailMarker) throws org.apache.thrift.TException
    {
      getReplayIntervals_args args = new getReplayIntervals_args();
      args.setVarName(varName);
      args.setWindow(window);
      args.setHeadTailMarker(headTailMarker);
      sendBase("getReplayIntervals", args);
    }

    public java.nio.ByteBuffer recv_getReplayIntervals() throws org.apache.thrift.TException
    {
      getReplayIntervals_result result = new getReplayIntervals_result();
      receiveBase(result, "getReplayIntervals");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getReplayIntervals failed: unknown result");
    }

    @Override
    public java.nio.ByteBuffer windowFilter(java.lang.String variableName, long window, int headTailMarker, java.nio.ByteBuffer intervalBitmap) throws org.apache.thrift.TException
    {
      send_windowFilter(variableName, window, headTailMarker, intervalBitmap);
      return recv_windowFilter();
    }

    public void send_windowFilter(java.lang.String variableName, long window, int headTailMarker, java.nio.ByteBuffer intervalBitmap) throws org.apache.thrift.TException
    {
      windowFilter_args args = new windowFilter_args();
      args.setVariableName(variableName);
      args.setWindow(window);
      args.setHeadTailMarker(headTailMarker);
      args.setIntervalBitmap(intervalBitmap);
      sendBase("windowFilter", args);
    }

    public java.nio.ByteBuffer recv_windowFilter() throws org.apache.thrift.TException
    {
      windowFilter_result result = new windowFilter_result();
      receiveBase(result, "windowFilter");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "windowFilter failed: unknown result");
    }

    @Override
    public java.nio.ByteBuffer getAllFilteredEvents(long window, java.nio.ByteBuffer intervalBitmap) throws org.apache.thrift.TException
    {
      send_getAllFilteredEvents(window, intervalBitmap);
      return recv_getAllFilteredEvents();
    }

    public void send_getAllFilteredEvents(long window, java.nio.ByteBuffer intervalBitmap) throws org.apache.thrift.TException
    {
      getAllFilteredEvents_args args = new getAllFilteredEvents_args();
      args.setWindow(window);
      args.setIntervalBitmap(intervalBitmap);
      sendBase("getAllFilteredEvents", args);
    }

    public java.nio.ByteBuffer recv_getAllFilteredEvents() throws org.apache.thrift.TException
    {
      getAllFilteredEvents_result result = new getAllFilteredEvents_result();
      receiveBase(result, "getAllFilteredEvents");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAllFilteredEvents failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
    @Override
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    @Override
    public void initial(java.lang.String tableName, java.util.Map<java.lang.String,java.util.List<java.lang.String>> ipMap, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.lang.Integer>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      initial_call method_call = new initial_call(tableName, ipMap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class initial_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.Map<java.lang.String,java.lang.Integer>> {
      private java.lang.String tableName;
      private java.util.Map<java.lang.String,java.util.List<java.lang.String>> ipMap;
      public initial_call(java.lang.String tableName, java.util.Map<java.lang.String,java.util.List<java.lang.String>> ipMap, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.lang.Integer>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tableName = tableName;
        this.ipMap = ipMap;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("initial", org.apache.thrift.protocol.TMessageType.CALL, 0));
        initial_args args = new initial_args();
        args.setTableName(tableName);
        args.setIpMap(ipMap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public java.util.Map<java.lang.String,java.lang.Integer> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_initial();
      }
    }

    @Override
    public void getReplayIntervals(java.lang.String varName, long window, int headTailMarker, org.apache.thrift.async.AsyncMethodCallback<java.nio.ByteBuffer> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getReplayIntervals_call method_call = new getReplayIntervals_call(varName, window, headTailMarker, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getReplayIntervals_call extends org.apache.thrift.async.TAsyncMethodCall<java.nio.ByteBuffer> {
      private java.lang.String varName;
      private long window;
      private int headTailMarker;
      public getReplayIntervals_call(java.lang.String varName, long window, int headTailMarker, org.apache.thrift.async.AsyncMethodCallback<java.nio.ByteBuffer> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.varName = varName;
        this.window = window;
        this.headTailMarker = headTailMarker;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getReplayIntervals", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getReplayIntervals_args args = new getReplayIntervals_args();
        args.setVarName(varName);
        args.setWindow(window);
        args.setHeadTailMarker(headTailMarker);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public java.nio.ByteBuffer getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getReplayIntervals();
      }
    }

    @Override
    public void windowFilter(java.lang.String variableName, long window, int headTailMarker, java.nio.ByteBuffer intervalBitmap, org.apache.thrift.async.AsyncMethodCallback<java.nio.ByteBuffer> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      windowFilter_call method_call = new windowFilter_call(variableName, window, headTailMarker, intervalBitmap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class windowFilter_call extends org.apache.thrift.async.TAsyncMethodCall<java.nio.ByteBuffer> {
      private java.lang.String variableName;
      private long window;
      private int headTailMarker;
      private java.nio.ByteBuffer intervalBitmap;
      public windowFilter_call(java.lang.String variableName, long window, int headTailMarker, java.nio.ByteBuffer intervalBitmap, org.apache.thrift.async.AsyncMethodCallback<java.nio.ByteBuffer> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.variableName = variableName;
        this.window = window;
        this.headTailMarker = headTailMarker;
        this.intervalBitmap = intervalBitmap;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("windowFilter", org.apache.thrift.protocol.TMessageType.CALL, 0));
        windowFilter_args args = new windowFilter_args();
        args.setVariableName(variableName);
        args.setWindow(window);
        args.setHeadTailMarker(headTailMarker);
        args.setIntervalBitmap(intervalBitmap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public java.nio.ByteBuffer getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_windowFilter();
      }
    }

    @Override
    public void getAllFilteredEvents(long window, java.nio.ByteBuffer intervalBitmap, org.apache.thrift.async.AsyncMethodCallback<java.nio.ByteBuffer> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAllFilteredEvents_call method_call = new getAllFilteredEvents_call(window, intervalBitmap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAllFilteredEvents_call extends org.apache.thrift.async.TAsyncMethodCall<java.nio.ByteBuffer> {
      private long window;
      private java.nio.ByteBuffer intervalBitmap;
      public getAllFilteredEvents_call(long window, java.nio.ByteBuffer intervalBitmap, org.apache.thrift.async.AsyncMethodCallback<java.nio.ByteBuffer> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.window = window;
        this.intervalBitmap = intervalBitmap;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAllFilteredEvents", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAllFilteredEvents_args args = new getAllFilteredEvents_args();
        args.setWindow(window);
        args.setIntervalBitmap(intervalBitmap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public java.nio.ByteBuffer getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAllFilteredEvents();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase, ? extends org.apache.thrift.TBase>> processMap) {
      processMap.put("initial", new initial());
      processMap.put("getReplayIntervals", new getReplayIntervals());
      processMap.put("windowFilter", new windowFilter());
      processMap.put("getAllFilteredEvents", new getAllFilteredEvents());
      return processMap;
    }

    public static class initial<I extends Iface> extends org.apache.thrift.ProcessFunction<I, initial_args, initial_result> {
      public initial() {
        super("initial");
      }

      @Override
      public initial_args getEmptyArgsInstance() {
        return new initial_args();
      }

      @Override
      public boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public initial_result getEmptyResultInstance() {
        return new initial_result();
      }

      @Override
      public initial_result getResult(I iface, initial_args args) throws org.apache.thrift.TException {
        initial_result result = getEmptyResultInstance();
        result.success = iface.initial(args.tableName, args.ipMap);
        return result;
      }
    }

    public static class getReplayIntervals<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getReplayIntervals_args, getReplayIntervals_result> {
      public getReplayIntervals() {
        super("getReplayIntervals");
      }

      @Override
      public getReplayIntervals_args getEmptyArgsInstance() {
        return new getReplayIntervals_args();
      }

      @Override
      public boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public getReplayIntervals_result getEmptyResultInstance() {
        return new getReplayIntervals_result();
      }

      @Override
      public getReplayIntervals_result getResult(I iface, getReplayIntervals_args args) throws org.apache.thrift.TException {
        getReplayIntervals_result result = getEmptyResultInstance();
        result.success = iface.getReplayIntervals(args.varName, args.window, args.headTailMarker);
        return result;
      }
    }

    public static class windowFilter<I extends Iface> extends org.apache.thrift.ProcessFunction<I, windowFilter_args, windowFilter_result> {
      public windowFilter() {
        super("windowFilter");
      }

      @Override
      public windowFilter_args getEmptyArgsInstance() {
        return new windowFilter_args();
      }

      @Override
      public boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public windowFilter_result getEmptyResultInstance() {
        return new windowFilter_result();
      }

      @Override
      public windowFilter_result getResult(I iface, windowFilter_args args) throws org.apache.thrift.TException {
        windowFilter_result result = getEmptyResultInstance();
        result.success = iface.windowFilter(args.variableName, args.window, args.headTailMarker, args.intervalBitmap);
        return result;
      }
    }

    public static class getAllFilteredEvents<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAllFilteredEvents_args, getAllFilteredEvents_result> {
      public getAllFilteredEvents() {
        super("getAllFilteredEvents");
      }

      @Override
      public getAllFilteredEvents_args getEmptyArgsInstance() {
        return new getAllFilteredEvents_args();
      }

      @Override
      public boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public getAllFilteredEvents_result getEmptyResultInstance() {
        return new getAllFilteredEvents_result();
      }

      @Override
      public getAllFilteredEvents_result getResult(I iface, getAllFilteredEvents_args args) throws org.apache.thrift.TException {
        getAllFilteredEvents_result result = getEmptyResultInstance();
        result.success = iface.getAllFilteredEvents(args.window, args.intervalBitmap);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?, ? extends org.apache.thrift.TBase>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?, ? extends org.apache.thrift.TBase>> processMap) {
      processMap.put("initial", new initial());
      processMap.put("getReplayIntervals", new getReplayIntervals());
      processMap.put("windowFilter", new windowFilter());
      processMap.put("getAllFilteredEvents", new getAllFilteredEvents());
      return processMap;
    }

    public static class initial<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, initial_args, java.util.Map<java.lang.String,java.lang.Integer>, initial_result> {
      public initial() {
        super("initial");
      }

      @Override
      public initial_result getEmptyResultInstance() {
        return new initial_result();
      }

      @Override
      public initial_args getEmptyArgsInstance() {
        return new initial_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.lang.Integer>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.lang.Integer>>() { 
          @Override
          public void onComplete(java.util.Map<java.lang.String,java.lang.Integer> o) {
            initial_result result = new initial_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            initial_result result = new initial_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      public boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, initial_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.lang.Integer>> resultHandler) throws org.apache.thrift.TException {
        iface.initial(args.tableName, args.ipMap,resultHandler);
      }
    }

    public static class getReplayIntervals<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getReplayIntervals_args, java.nio.ByteBuffer, getReplayIntervals_result> {
      public getReplayIntervals() {
        super("getReplayIntervals");
      }

      @Override
      public getReplayIntervals_result getEmptyResultInstance() {
        return new getReplayIntervals_result();
      }

      @Override
      public getReplayIntervals_args getEmptyArgsInstance() {
        return new getReplayIntervals_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<java.nio.ByteBuffer> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.nio.ByteBuffer>() { 
          @Override
          public void onComplete(java.nio.ByteBuffer o) {
            getReplayIntervals_result result = new getReplayIntervals_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getReplayIntervals_result result = new getReplayIntervals_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      public boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, getReplayIntervals_args args, org.apache.thrift.async.AsyncMethodCallback<java.nio.ByteBuffer> resultHandler) throws org.apache.thrift.TException {
        iface.getReplayIntervals(args.varName, args.window, args.headTailMarker,resultHandler);
      }
    }

    public static class windowFilter<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, windowFilter_args, java.nio.ByteBuffer, windowFilter_result> {
      public windowFilter() {
        super("windowFilter");
      }

      @Override
      public windowFilter_result getEmptyResultInstance() {
        return new windowFilter_result();
      }

      @Override
      public windowFilter_args getEmptyArgsInstance() {
        return new windowFilter_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<java.nio.ByteBuffer> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.nio.ByteBuffer>() { 
          @Override
          public void onComplete(java.nio.ByteBuffer o) {
            windowFilter_result result = new windowFilter_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            windowFilter_result result = new windowFilter_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      public boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, windowFilter_args args, org.apache.thrift.async.AsyncMethodCallback<java.nio.ByteBuffer> resultHandler) throws org.apache.thrift.TException {
        iface.windowFilter(args.variableName, args.window, args.headTailMarker, args.intervalBitmap,resultHandler);
      }
    }

    public static class getAllFilteredEvents<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAllFilteredEvents_args, java.nio.ByteBuffer, getAllFilteredEvents_result> {
      public getAllFilteredEvents() {
        super("getAllFilteredEvents");
      }

      @Override
      public getAllFilteredEvents_result getEmptyResultInstance() {
        return new getAllFilteredEvents_result();
      }

      @Override
      public getAllFilteredEvents_args getEmptyArgsInstance() {
        return new getAllFilteredEvents_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<java.nio.ByteBuffer> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.nio.ByteBuffer>() { 
          @Override
          public void onComplete(java.nio.ByteBuffer o) {
            getAllFilteredEvents_result result = new getAllFilteredEvents_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getAllFilteredEvents_result result = new getAllFilteredEvents_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      public boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, getAllFilteredEvents_args args, org.apache.thrift.async.AsyncMethodCallback<java.nio.ByteBuffer> resultHandler) throws org.apache.thrift.TException {
        iface.getAllFilteredEvents(args.window, args.intervalBitmap,resultHandler);
      }
    }

  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class initial_args implements org.apache.thrift.TBase<initial_args, initial_args._Fields>, java.io.Serializable, Cloneable, Comparable<initial_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("initial_args");

    private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tableName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField IP_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("ipMap", org.apache.thrift.protocol.TType.MAP, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new initial_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new initial_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String tableName; // required
    public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.util.List<java.lang.String>> ipMap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TABLE_NAME((short)1, "tableName"),
      IP_MAP((short)2, "ipMap");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TABLE_NAME
            return TABLE_NAME;
          case 2: // IP_MAP
            return IP_MAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("tableName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.IP_MAP, new org.apache.thrift.meta_data.FieldMetaData("ipMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(initial_args.class, metaDataMap);
    }

    public initial_args() {
    }

    public initial_args(
      java.lang.String tableName,
      java.util.Map<java.lang.String,java.util.List<java.lang.String>> ipMap)
    {
      this();
      this.tableName = tableName;
      this.ipMap = ipMap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public initial_args(initial_args other) {
      if (other.isSetTableName()) {
        this.tableName = other.tableName;
      }
      if (other.isSetIpMap()) {
        java.util.Map<java.lang.String,java.util.List<java.lang.String>> __this__ipMap = new java.util.HashMap<java.lang.String,java.util.List<java.lang.String>>(other.ipMap.size());
        for (java.util.Map.Entry<java.lang.String, java.util.List<java.lang.String>> other_element : other.ipMap.entrySet()) {

          java.lang.String other_element_key = other_element.getKey();
          java.util.List<java.lang.String> other_element_value = other_element.getValue();

          java.lang.String __this__ipMap_copy_key = other_element_key;

          java.util.List<java.lang.String> __this__ipMap_copy_value = new java.util.ArrayList<java.lang.String>(other_element_value);

          __this__ipMap.put(__this__ipMap_copy_key, __this__ipMap_copy_value);
        }
        this.ipMap = __this__ipMap;
      }
    }

    @Override
    public initial_args deepCopy() {
      return new initial_args(this);
    }

    @Override
    public void clear() {
      this.tableName = null;
      this.ipMap = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getTableName() {
      return this.tableName;
    }

    public initial_args setTableName(@org.apache.thrift.annotation.Nullable java.lang.String tableName) {
      this.tableName = tableName;
      return this;
    }

    public void unsetTableName() {
      this.tableName = null;
    }

    /** Returns true if field tableName is set (has been assigned a value) and false otherwise */
    public boolean isSetTableName() {
      return this.tableName != null;
    }

    public void setTableNameIsSet(boolean value) {
      if (!value) {
        this.tableName = null;
      }
    }

    public int getIpMapSize() {
      return (this.ipMap == null) ? 0 : this.ipMap.size();
    }

    public void putToIpMap(java.lang.String key, java.util.List<java.lang.String> val) {
      if (this.ipMap == null) {
        this.ipMap = new java.util.HashMap<java.lang.String,java.util.List<java.lang.String>>();
      }
      this.ipMap.put(key, val);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Map<java.lang.String,java.util.List<java.lang.String>> getIpMap() {
      return this.ipMap;
    }

    public initial_args setIpMap(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.util.List<java.lang.String>> ipMap) {
      this.ipMap = ipMap;
      return this;
    }

    public void unsetIpMap() {
      this.ipMap = null;
    }

    /** Returns true if field ipMap is set (has been assigned a value) and false otherwise */
    public boolean isSetIpMap() {
      return this.ipMap != null;
    }

    public void setIpMapIsSet(boolean value) {
      if (!value) {
        this.ipMap = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case TABLE_NAME:
        if (value == null) {
          unsetTableName();
        } else {
          setTableName((java.lang.String)value);
        }
        break;

      case IP_MAP:
        if (value == null) {
          unsetIpMap();
        } else {
          setIpMap((java.util.Map<java.lang.String,java.util.List<java.lang.String>>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case TABLE_NAME:
        return getTableName();

      case IP_MAP:
        return getIpMap();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case TABLE_NAME:
        return isSetTableName();
      case IP_MAP:
        return isSetIpMap();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof initial_args)
        return this.equals((initial_args)that);
      return false;
    }

    public boolean equals(initial_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_tableName = true && this.isSetTableName();
      boolean that_present_tableName = true && that.isSetTableName();
      if (this_present_tableName || that_present_tableName) {
        if (!(this_present_tableName && that_present_tableName))
          return false;
        if (!this.tableName.equals(that.tableName))
          return false;
      }

      boolean this_present_ipMap = true && this.isSetIpMap();
      boolean that_present_ipMap = true && that.isSetIpMap();
      if (this_present_ipMap || that_present_ipMap) {
        if (!(this_present_ipMap && that_present_ipMap))
          return false;
        if (!this.ipMap.equals(that.ipMap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetTableName()) ? 131071 : 524287);
      if (isSetTableName())
        hashCode = hashCode * 8191 + tableName.hashCode();

      hashCode = hashCode * 8191 + ((isSetIpMap()) ? 131071 : 524287);
      if (isSetIpMap())
        hashCode = hashCode * 8191 + ipMap.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(initial_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetTableName(), other.isSetTableName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTableName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableName, other.tableName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetIpMap(), other.isSetIpMap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIpMap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ipMap, other.ipMap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("initial_args(");
      boolean first = true;

      sb.append("tableName:");
      if (this.tableName == null) {
        sb.append("null");
      } else {
        sb.append(this.tableName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ipMap:");
      if (this.ipMap == null) {
        sb.append("null");
      } else {
        sb.append(this.ipMap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class initial_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public initial_argsStandardScheme getScheme() {
        return new initial_argsStandardScheme();
      }
    }

    private static class initial_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<initial_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, initial_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TABLE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.tableName = iprot.readString();
                struct.setTableNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // IP_MAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                  struct.ipMap = new java.util.HashMap<java.lang.String,java.util.List<java.lang.String>>(2*_map0.size);
                  @org.apache.thrift.annotation.Nullable java.lang.String _key1;
                  @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> _val2;
                  for (int _i3 = 0; _i3 < _map0.size; ++_i3)
                  {
                    _key1 = iprot.readString();
                    {
                      org.apache.thrift.protocol.TList _list4 = iprot.readListBegin();
                      _val2 = new java.util.ArrayList<java.lang.String>(_list4.size);
                      @org.apache.thrift.annotation.Nullable java.lang.String _elem5;
                      for (int _i6 = 0; _i6 < _list4.size; ++_i6)
                      {
                        _elem5 = iprot.readString();
                        _val2.add(_elem5);
                      }
                      iprot.readListEnd();
                    }
                    struct.ipMap.put(_key1, _val2);
                  }
                  iprot.readMapEnd();
                }
                struct.setIpMapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, initial_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.tableName != null) {
          oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
          oprot.writeString(struct.tableName);
          oprot.writeFieldEnd();
        }
        if (struct.ipMap != null) {
          oprot.writeFieldBegin(IP_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, struct.ipMap.size()));
            for (java.util.Map.Entry<java.lang.String, java.util.List<java.lang.String>> _iter7 : struct.ipMap.entrySet())
            {
              oprot.writeString(_iter7.getKey());
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, _iter7.getValue().size()));
                for (java.lang.String _iter8 : _iter7.getValue())
                {
                  oprot.writeString(_iter8);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class initial_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public initial_argsTupleScheme getScheme() {
        return new initial_argsTupleScheme();
      }
    }

    private static class initial_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<initial_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, initial_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetTableName()) {
          optionals.set(0);
        }
        if (struct.isSetIpMap()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetTableName()) {
          oprot.writeString(struct.tableName);
        }
        if (struct.isSetIpMap()) {
          {
            oprot.writeI32(struct.ipMap.size());
            for (java.util.Map.Entry<java.lang.String, java.util.List<java.lang.String>> _iter9 : struct.ipMap.entrySet())
            {
              oprot.writeString(_iter9.getKey());
              {
                oprot.writeI32(_iter9.getValue().size());
                for (java.lang.String _iter10 : _iter9.getValue())
                {
                  oprot.writeString(_iter10);
                }
              }
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, initial_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.tableName = iprot.readString();
          struct.setTableNameIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TMap _map11 = iprot.readMapBegin(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST); 
            struct.ipMap = new java.util.HashMap<java.lang.String,java.util.List<java.lang.String>>(2*_map11.size);
            @org.apache.thrift.annotation.Nullable java.lang.String _key12;
            @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> _val13;
            for (int _i14 = 0; _i14 < _map11.size; ++_i14)
            {
              _key12 = iprot.readString();
              {
                org.apache.thrift.protocol.TList _list15 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
                _val13 = new java.util.ArrayList<java.lang.String>(_list15.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem16;
                for (int _i17 = 0; _i17 < _list15.size; ++_i17)
                {
                  _elem16 = iprot.readString();
                  _val13.add(_elem16);
                }
              }
              struct.ipMap.put(_key12, _val13);
            }
          }
          struct.setIpMapIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class initial_result implements org.apache.thrift.TBase<initial_result, initial_result._Fields>, java.io.Serializable, Cloneable, Comparable<initial_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("initial_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new initial_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new initial_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.Integer> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(initial_result.class, metaDataMap);
    }

    public initial_result() {
    }

    public initial_result(
      java.util.Map<java.lang.String,java.lang.Integer> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public initial_result(initial_result other) {
      if (other.isSetSuccess()) {
        java.util.Map<java.lang.String,java.lang.Integer> __this__success = new java.util.HashMap<java.lang.String,java.lang.Integer>(other.success);
        this.success = __this__success;
      }
    }

    @Override
    public initial_result deepCopy() {
      return new initial_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(java.lang.String key, int val) {
      if (this.success == null) {
        this.success = new java.util.HashMap<java.lang.String,java.lang.Integer>();
      }
      this.success.put(key, val);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Map<java.lang.String,java.lang.Integer> getSuccess() {
      return this.success;
    }

    public initial_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.Integer> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.Map<java.lang.String,java.lang.Integer>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof initial_result)
        return this.equals((initial_result)that);
      return false;
    }

    public boolean equals(initial_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(initial_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("initial_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class initial_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public initial_resultStandardScheme getScheme() {
        return new initial_resultStandardScheme();
      }
    }

    private static class initial_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<initial_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, initial_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map18 = iprot.readMapBegin();
                  struct.success = new java.util.HashMap<java.lang.String,java.lang.Integer>(2*_map18.size);
                  @org.apache.thrift.annotation.Nullable java.lang.String _key19;
                  int _val20;
                  for (int _i21 = 0; _i21 < _map18.size; ++_i21)
                  {
                    _key19 = iprot.readString();
                    _val20 = iprot.readI32();
                    struct.success.put(_key19, _val20);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, initial_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I32, struct.success.size()));
            for (java.util.Map.Entry<java.lang.String, java.lang.Integer> _iter22 : struct.success.entrySet())
            {
              oprot.writeString(_iter22.getKey());
              oprot.writeI32(_iter22.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class initial_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public initial_resultTupleScheme getScheme() {
        return new initial_resultTupleScheme();
      }
    }

    private static class initial_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<initial_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, initial_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (java.util.Map.Entry<java.lang.String, java.lang.Integer> _iter23 : struct.success.entrySet())
            {
              oprot.writeString(_iter23.getKey());
              oprot.writeI32(_iter23.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, initial_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map24 = iprot.readMapBegin(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I32); 
            struct.success = new java.util.HashMap<java.lang.String,java.lang.Integer>(2*_map24.size);
            @org.apache.thrift.annotation.Nullable java.lang.String _key25;
            int _val26;
            for (int _i27 = 0; _i27 < _map24.size; ++_i27)
            {
              _key25 = iprot.readString();
              _val26 = iprot.readI32();
              struct.success.put(_key25, _val26);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class getReplayIntervals_args implements org.apache.thrift.TBase<getReplayIntervals_args, getReplayIntervals_args._Fields>, java.io.Serializable, Cloneable, Comparable<getReplayIntervals_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getReplayIntervals_args");

    private static final org.apache.thrift.protocol.TField VAR_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("varName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField WINDOW_FIELD_DESC = new org.apache.thrift.protocol.TField("window", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField HEAD_TAIL_MARKER_FIELD_DESC = new org.apache.thrift.protocol.TField("headTailMarker", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getReplayIntervals_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getReplayIntervals_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String varName; // required
    public long window; // required
    public int headTailMarker; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VAR_NAME((short)1, "varName"),
      WINDOW((short)2, "window"),
      HEAD_TAIL_MARKER((short)3, "headTailMarker");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VAR_NAME
            return VAR_NAME;
          case 2: // WINDOW
            return WINDOW;
          case 3: // HEAD_TAIL_MARKER
            return HEAD_TAIL_MARKER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __WINDOW_ISSET_ID = 0;
    private static final int __HEADTAILMARKER_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VAR_NAME, new org.apache.thrift.meta_data.FieldMetaData("varName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.WINDOW, new org.apache.thrift.meta_data.FieldMetaData("window", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.HEAD_TAIL_MARKER, new org.apache.thrift.meta_data.FieldMetaData("headTailMarker", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getReplayIntervals_args.class, metaDataMap);
    }

    public getReplayIntervals_args() {
    }

    public getReplayIntervals_args(
      java.lang.String varName,
      long window,
      int headTailMarker)
    {
      this();
      this.varName = varName;
      this.window = window;
      setWindowIsSet(true);
      this.headTailMarker = headTailMarker;
      setHeadTailMarkerIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getReplayIntervals_args(getReplayIntervals_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetVarName()) {
        this.varName = other.varName;
      }
      this.window = other.window;
      this.headTailMarker = other.headTailMarker;
    }

    @Override
    public getReplayIntervals_args deepCopy() {
      return new getReplayIntervals_args(this);
    }

    @Override
    public void clear() {
      this.varName = null;
      setWindowIsSet(false);
      this.window = 0;
      setHeadTailMarkerIsSet(false);
      this.headTailMarker = 0;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getVarName() {
      return this.varName;
    }

    public getReplayIntervals_args setVarName(@org.apache.thrift.annotation.Nullable java.lang.String varName) {
      this.varName = varName;
      return this;
    }

    public void unsetVarName() {
      this.varName = null;
    }

    /** Returns true if field varName is set (has been assigned a value) and false otherwise */
    public boolean isSetVarName() {
      return this.varName != null;
    }

    public void setVarNameIsSet(boolean value) {
      if (!value) {
        this.varName = null;
      }
    }

    public long getWindow() {
      return this.window;
    }

    public getReplayIntervals_args setWindow(long window) {
      this.window = window;
      setWindowIsSet(true);
      return this;
    }

    public void unsetWindow() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __WINDOW_ISSET_ID);
    }

    /** Returns true if field window is set (has been assigned a value) and false otherwise */
    public boolean isSetWindow() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __WINDOW_ISSET_ID);
    }

    public void setWindowIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __WINDOW_ISSET_ID, value);
    }

    public int getHeadTailMarker() {
      return this.headTailMarker;
    }

    public getReplayIntervals_args setHeadTailMarker(int headTailMarker) {
      this.headTailMarker = headTailMarker;
      setHeadTailMarkerIsSet(true);
      return this;
    }

    public void unsetHeadTailMarker() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HEADTAILMARKER_ISSET_ID);
    }

    /** Returns true if field headTailMarker is set (has been assigned a value) and false otherwise */
    public boolean isSetHeadTailMarker() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HEADTAILMARKER_ISSET_ID);
    }

    public void setHeadTailMarkerIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HEADTAILMARKER_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case VAR_NAME:
        if (value == null) {
          unsetVarName();
        } else {
          setVarName((java.lang.String)value);
        }
        break;

      case WINDOW:
        if (value == null) {
          unsetWindow();
        } else {
          setWindow((java.lang.Long)value);
        }
        break;

      case HEAD_TAIL_MARKER:
        if (value == null) {
          unsetHeadTailMarker();
        } else {
          setHeadTailMarker((java.lang.Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case VAR_NAME:
        return getVarName();

      case WINDOW:
        return getWindow();

      case HEAD_TAIL_MARKER:
        return getHeadTailMarker();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case VAR_NAME:
        return isSetVarName();
      case WINDOW:
        return isSetWindow();
      case HEAD_TAIL_MARKER:
        return isSetHeadTailMarker();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof getReplayIntervals_args)
        return this.equals((getReplayIntervals_args)that);
      return false;
    }

    public boolean equals(getReplayIntervals_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_varName = true && this.isSetVarName();
      boolean that_present_varName = true && that.isSetVarName();
      if (this_present_varName || that_present_varName) {
        if (!(this_present_varName && that_present_varName))
          return false;
        if (!this.varName.equals(that.varName))
          return false;
      }

      boolean this_present_window = true;
      boolean that_present_window = true;
      if (this_present_window || that_present_window) {
        if (!(this_present_window && that_present_window))
          return false;
        if (this.window != that.window)
          return false;
      }

      boolean this_present_headTailMarker = true;
      boolean that_present_headTailMarker = true;
      if (this_present_headTailMarker || that_present_headTailMarker) {
        if (!(this_present_headTailMarker && that_present_headTailMarker))
          return false;
        if (this.headTailMarker != that.headTailMarker)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetVarName()) ? 131071 : 524287);
      if (isSetVarName())
        hashCode = hashCode * 8191 + varName.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(window);

      hashCode = hashCode * 8191 + headTailMarker;

      return hashCode;
    }

    @Override
    public int compareTo(getReplayIntervals_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetVarName(), other.isSetVarName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVarName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.varName, other.varName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetWindow(), other.isSetWindow());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWindow()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.window, other.window);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetHeadTailMarker(), other.isSetHeadTailMarker());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHeadTailMarker()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.headTailMarker, other.headTailMarker);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getReplayIntervals_args(");
      boolean first = true;

      sb.append("varName:");
      if (this.varName == null) {
        sb.append("null");
      } else {
        sb.append(this.varName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("window:");
      sb.append(this.window);
      first = false;
      if (!first) sb.append(", ");
      sb.append("headTailMarker:");
      sb.append(this.headTailMarker);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getReplayIntervals_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getReplayIntervals_argsStandardScheme getScheme() {
        return new getReplayIntervals_argsStandardScheme();
      }
    }

    private static class getReplayIntervals_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getReplayIntervals_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, getReplayIntervals_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VAR_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.varName = iprot.readString();
                struct.setVarNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // WINDOW
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.window = iprot.readI64();
                struct.setWindowIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // HEAD_TAIL_MARKER
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.headTailMarker = iprot.readI32();
                struct.setHeadTailMarkerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, getReplayIntervals_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.varName != null) {
          oprot.writeFieldBegin(VAR_NAME_FIELD_DESC);
          oprot.writeString(struct.varName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(WINDOW_FIELD_DESC);
        oprot.writeI64(struct.window);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(HEAD_TAIL_MARKER_FIELD_DESC);
        oprot.writeI32(struct.headTailMarker);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getReplayIntervals_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getReplayIntervals_argsTupleScheme getScheme() {
        return new getReplayIntervals_argsTupleScheme();
      }
    }

    private static class getReplayIntervals_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getReplayIntervals_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getReplayIntervals_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetVarName()) {
          optionals.set(0);
        }
        if (struct.isSetWindow()) {
          optionals.set(1);
        }
        if (struct.isSetHeadTailMarker()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetVarName()) {
          oprot.writeString(struct.varName);
        }
        if (struct.isSetWindow()) {
          oprot.writeI64(struct.window);
        }
        if (struct.isSetHeadTailMarker()) {
          oprot.writeI32(struct.headTailMarker);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getReplayIntervals_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.varName = iprot.readString();
          struct.setVarNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.window = iprot.readI64();
          struct.setWindowIsSet(true);
        }
        if (incoming.get(2)) {
          struct.headTailMarker = iprot.readI32();
          struct.setHeadTailMarkerIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class getReplayIntervals_result implements org.apache.thrift.TBase<getReplayIntervals_result, getReplayIntervals_result._Fields>, java.io.Serializable, Cloneable, Comparable<getReplayIntervals_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getReplayIntervals_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getReplayIntervals_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getReplayIntervals_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getReplayIntervals_result.class, metaDataMap);
    }

    public getReplayIntervals_result() {
    }

    public getReplayIntervals_result(
      java.nio.ByteBuffer success)
    {
      this();
      this.success = org.apache.thrift.TBaseHelper.copyBinary(success);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getReplayIntervals_result(getReplayIntervals_result other) {
      if (other.isSetSuccess()) {
        this.success = org.apache.thrift.TBaseHelper.copyBinary(other.success);
      }
    }

    @Override
    public getReplayIntervals_result deepCopy() {
      return new getReplayIntervals_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public byte[] getSuccess() {
      setSuccess(org.apache.thrift.TBaseHelper.rightSize(success));
      return success == null ? null : success.array();
    }

    public java.nio.ByteBuffer bufferForSuccess() {
      return org.apache.thrift.TBaseHelper.copyBinary(success);
    }

    public getReplayIntervals_result setSuccess(byte[] success) {
      this.success = success == null ? (java.nio.ByteBuffer)null     : java.nio.ByteBuffer.wrap(success.clone());
      return this;
    }

    public getReplayIntervals_result setSuccess(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer success) {
      this.success = org.apache.thrift.TBaseHelper.copyBinary(success);
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          if (value instanceof byte[]) {
            setSuccess((byte[])value);
          } else {
            setSuccess((java.nio.ByteBuffer)value);
          }
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof getReplayIntervals_result)
        return this.equals((getReplayIntervals_result)that);
      return false;
    }

    public boolean equals(getReplayIntervals_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getReplayIntervals_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getReplayIntervals_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.success, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getReplayIntervals_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getReplayIntervals_resultStandardScheme getScheme() {
        return new getReplayIntervals_resultStandardScheme();
      }
    }

    private static class getReplayIntervals_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getReplayIntervals_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, getReplayIntervals_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readBinary();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, getReplayIntervals_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBinary(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getReplayIntervals_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getReplayIntervals_resultTupleScheme getScheme() {
        return new getReplayIntervals_resultTupleScheme();
      }
    }

    private static class getReplayIntervals_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getReplayIntervals_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getReplayIntervals_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBinary(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getReplayIntervals_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBinary();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class windowFilter_args implements org.apache.thrift.TBase<windowFilter_args, windowFilter_args._Fields>, java.io.Serializable, Cloneable, Comparable<windowFilter_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("windowFilter_args");

    private static final org.apache.thrift.protocol.TField VARIABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("variableName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField WINDOW_FIELD_DESC = new org.apache.thrift.protocol.TField("window", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField HEAD_TAIL_MARKER_FIELD_DESC = new org.apache.thrift.protocol.TField("headTailMarker", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField INTERVAL_BITMAP_FIELD_DESC = new org.apache.thrift.protocol.TField("intervalBitmap", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new windowFilter_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new windowFilter_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String variableName; // required
    public long window; // required
    public int headTailMarker; // required
    public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer intervalBitmap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VARIABLE_NAME((short)1, "variableName"),
      WINDOW((short)2, "window"),
      HEAD_TAIL_MARKER((short)3, "headTailMarker"),
      INTERVAL_BITMAP((short)4, "intervalBitmap");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VARIABLE_NAME
            return VARIABLE_NAME;
          case 2: // WINDOW
            return WINDOW;
          case 3: // HEAD_TAIL_MARKER
            return HEAD_TAIL_MARKER;
          case 4: // INTERVAL_BITMAP
            return INTERVAL_BITMAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __WINDOW_ISSET_ID = 0;
    private static final int __HEADTAILMARKER_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VARIABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("variableName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.WINDOW, new org.apache.thrift.meta_data.FieldMetaData("window", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.HEAD_TAIL_MARKER, new org.apache.thrift.meta_data.FieldMetaData("headTailMarker", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.INTERVAL_BITMAP, new org.apache.thrift.meta_data.FieldMetaData("intervalBitmap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(windowFilter_args.class, metaDataMap);
    }

    public windowFilter_args() {
    }

    public windowFilter_args(
      java.lang.String variableName,
      long window,
      int headTailMarker,
      java.nio.ByteBuffer intervalBitmap)
    {
      this();
      this.variableName = variableName;
      this.window = window;
      setWindowIsSet(true);
      this.headTailMarker = headTailMarker;
      setHeadTailMarkerIsSet(true);
      this.intervalBitmap = org.apache.thrift.TBaseHelper.copyBinary(intervalBitmap);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public windowFilter_args(windowFilter_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetVariableName()) {
        this.variableName = other.variableName;
      }
      this.window = other.window;
      this.headTailMarker = other.headTailMarker;
      if (other.isSetIntervalBitmap()) {
        this.intervalBitmap = org.apache.thrift.TBaseHelper.copyBinary(other.intervalBitmap);
      }
    }

    @Override
    public windowFilter_args deepCopy() {
      return new windowFilter_args(this);
    }

    @Override
    public void clear() {
      this.variableName = null;
      setWindowIsSet(false);
      this.window = 0;
      setHeadTailMarkerIsSet(false);
      this.headTailMarker = 0;
      this.intervalBitmap = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getVariableName() {
      return this.variableName;
    }

    public windowFilter_args setVariableName(@org.apache.thrift.annotation.Nullable java.lang.String variableName) {
      this.variableName = variableName;
      return this;
    }

    public void unsetVariableName() {
      this.variableName = null;
    }

    /** Returns true if field variableName is set (has been assigned a value) and false otherwise */
    public boolean isSetVariableName() {
      return this.variableName != null;
    }

    public void setVariableNameIsSet(boolean value) {
      if (!value) {
        this.variableName = null;
      }
    }

    public long getWindow() {
      return this.window;
    }

    public windowFilter_args setWindow(long window) {
      this.window = window;
      setWindowIsSet(true);
      return this;
    }

    public void unsetWindow() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __WINDOW_ISSET_ID);
    }

    /** Returns true if field window is set (has been assigned a value) and false otherwise */
    public boolean isSetWindow() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __WINDOW_ISSET_ID);
    }

    public void setWindowIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __WINDOW_ISSET_ID, value);
    }

    public int getHeadTailMarker() {
      return this.headTailMarker;
    }

    public windowFilter_args setHeadTailMarker(int headTailMarker) {
      this.headTailMarker = headTailMarker;
      setHeadTailMarkerIsSet(true);
      return this;
    }

    public void unsetHeadTailMarker() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HEADTAILMARKER_ISSET_ID);
    }

    /** Returns true if field headTailMarker is set (has been assigned a value) and false otherwise */
    public boolean isSetHeadTailMarker() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HEADTAILMARKER_ISSET_ID);
    }

    public void setHeadTailMarkerIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HEADTAILMARKER_ISSET_ID, value);
    }

    public byte[] getIntervalBitmap() {
      setIntervalBitmap(org.apache.thrift.TBaseHelper.rightSize(intervalBitmap));
      return intervalBitmap == null ? null : intervalBitmap.array();
    }

    public java.nio.ByteBuffer bufferForIntervalBitmap() {
      return org.apache.thrift.TBaseHelper.copyBinary(intervalBitmap);
    }

    public windowFilter_args setIntervalBitmap(byte[] intervalBitmap) {
      this.intervalBitmap = intervalBitmap == null ? (java.nio.ByteBuffer)null     : java.nio.ByteBuffer.wrap(intervalBitmap.clone());
      return this;
    }

    public windowFilter_args setIntervalBitmap(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer intervalBitmap) {
      this.intervalBitmap = org.apache.thrift.TBaseHelper.copyBinary(intervalBitmap);
      return this;
    }

    public void unsetIntervalBitmap() {
      this.intervalBitmap = null;
    }

    /** Returns true if field intervalBitmap is set (has been assigned a value) and false otherwise */
    public boolean isSetIntervalBitmap() {
      return this.intervalBitmap != null;
    }

    public void setIntervalBitmapIsSet(boolean value) {
      if (!value) {
        this.intervalBitmap = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case VARIABLE_NAME:
        if (value == null) {
          unsetVariableName();
        } else {
          setVariableName((java.lang.String)value);
        }
        break;

      case WINDOW:
        if (value == null) {
          unsetWindow();
        } else {
          setWindow((java.lang.Long)value);
        }
        break;

      case HEAD_TAIL_MARKER:
        if (value == null) {
          unsetHeadTailMarker();
        } else {
          setHeadTailMarker((java.lang.Integer)value);
        }
        break;

      case INTERVAL_BITMAP:
        if (value == null) {
          unsetIntervalBitmap();
        } else {
          if (value instanceof byte[]) {
            setIntervalBitmap((byte[])value);
          } else {
            setIntervalBitmap((java.nio.ByteBuffer)value);
          }
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case VARIABLE_NAME:
        return getVariableName();

      case WINDOW:
        return getWindow();

      case HEAD_TAIL_MARKER:
        return getHeadTailMarker();

      case INTERVAL_BITMAP:
        return getIntervalBitmap();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case VARIABLE_NAME:
        return isSetVariableName();
      case WINDOW:
        return isSetWindow();
      case HEAD_TAIL_MARKER:
        return isSetHeadTailMarker();
      case INTERVAL_BITMAP:
        return isSetIntervalBitmap();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof windowFilter_args)
        return this.equals((windowFilter_args)that);
      return false;
    }

    public boolean equals(windowFilter_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_variableName = true && this.isSetVariableName();
      boolean that_present_variableName = true && that.isSetVariableName();
      if (this_present_variableName || that_present_variableName) {
        if (!(this_present_variableName && that_present_variableName))
          return false;
        if (!this.variableName.equals(that.variableName))
          return false;
      }

      boolean this_present_window = true;
      boolean that_present_window = true;
      if (this_present_window || that_present_window) {
        if (!(this_present_window && that_present_window))
          return false;
        if (this.window != that.window)
          return false;
      }

      boolean this_present_headTailMarker = true;
      boolean that_present_headTailMarker = true;
      if (this_present_headTailMarker || that_present_headTailMarker) {
        if (!(this_present_headTailMarker && that_present_headTailMarker))
          return false;
        if (this.headTailMarker != that.headTailMarker)
          return false;
      }

      boolean this_present_intervalBitmap = true && this.isSetIntervalBitmap();
      boolean that_present_intervalBitmap = true && that.isSetIntervalBitmap();
      if (this_present_intervalBitmap || that_present_intervalBitmap) {
        if (!(this_present_intervalBitmap && that_present_intervalBitmap))
          return false;
        if (!this.intervalBitmap.equals(that.intervalBitmap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetVariableName()) ? 131071 : 524287);
      if (isSetVariableName())
        hashCode = hashCode * 8191 + variableName.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(window);

      hashCode = hashCode * 8191 + headTailMarker;

      hashCode = hashCode * 8191 + ((isSetIntervalBitmap()) ? 131071 : 524287);
      if (isSetIntervalBitmap())
        hashCode = hashCode * 8191 + intervalBitmap.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(windowFilter_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetVariableName(), other.isSetVariableName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVariableName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.variableName, other.variableName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetWindow(), other.isSetWindow());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWindow()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.window, other.window);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetHeadTailMarker(), other.isSetHeadTailMarker());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHeadTailMarker()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.headTailMarker, other.headTailMarker);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetIntervalBitmap(), other.isSetIntervalBitmap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIntervalBitmap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.intervalBitmap, other.intervalBitmap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("windowFilter_args(");
      boolean first = true;

      sb.append("variableName:");
      if (this.variableName == null) {
        sb.append("null");
      } else {
        sb.append(this.variableName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("window:");
      sb.append(this.window);
      first = false;
      if (!first) sb.append(", ");
      sb.append("headTailMarker:");
      sb.append(this.headTailMarker);
      first = false;
      if (!first) sb.append(", ");
      sb.append("intervalBitmap:");
      if (this.intervalBitmap == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.intervalBitmap, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class windowFilter_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public windowFilter_argsStandardScheme getScheme() {
        return new windowFilter_argsStandardScheme();
      }
    }

    private static class windowFilter_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<windowFilter_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, windowFilter_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VARIABLE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.variableName = iprot.readString();
                struct.setVariableNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // WINDOW
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.window = iprot.readI64();
                struct.setWindowIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // HEAD_TAIL_MARKER
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.headTailMarker = iprot.readI32();
                struct.setHeadTailMarkerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // INTERVAL_BITMAP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.intervalBitmap = iprot.readBinary();
                struct.setIntervalBitmapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, windowFilter_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.variableName != null) {
          oprot.writeFieldBegin(VARIABLE_NAME_FIELD_DESC);
          oprot.writeString(struct.variableName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(WINDOW_FIELD_DESC);
        oprot.writeI64(struct.window);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(HEAD_TAIL_MARKER_FIELD_DESC);
        oprot.writeI32(struct.headTailMarker);
        oprot.writeFieldEnd();
        if (struct.intervalBitmap != null) {
          oprot.writeFieldBegin(INTERVAL_BITMAP_FIELD_DESC);
          oprot.writeBinary(struct.intervalBitmap);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class windowFilter_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public windowFilter_argsTupleScheme getScheme() {
        return new windowFilter_argsTupleScheme();
      }
    }

    private static class windowFilter_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<windowFilter_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, windowFilter_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetVariableName()) {
          optionals.set(0);
        }
        if (struct.isSetWindow()) {
          optionals.set(1);
        }
        if (struct.isSetHeadTailMarker()) {
          optionals.set(2);
        }
        if (struct.isSetIntervalBitmap()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetVariableName()) {
          oprot.writeString(struct.variableName);
        }
        if (struct.isSetWindow()) {
          oprot.writeI64(struct.window);
        }
        if (struct.isSetHeadTailMarker()) {
          oprot.writeI32(struct.headTailMarker);
        }
        if (struct.isSetIntervalBitmap()) {
          oprot.writeBinary(struct.intervalBitmap);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, windowFilter_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.variableName = iprot.readString();
          struct.setVariableNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.window = iprot.readI64();
          struct.setWindowIsSet(true);
        }
        if (incoming.get(2)) {
          struct.headTailMarker = iprot.readI32();
          struct.setHeadTailMarkerIsSet(true);
        }
        if (incoming.get(3)) {
          struct.intervalBitmap = iprot.readBinary();
          struct.setIntervalBitmapIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class windowFilter_result implements org.apache.thrift.TBase<windowFilter_result, windowFilter_result._Fields>, java.io.Serializable, Cloneable, Comparable<windowFilter_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("windowFilter_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new windowFilter_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new windowFilter_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(windowFilter_result.class, metaDataMap);
    }

    public windowFilter_result() {
    }

    public windowFilter_result(
      java.nio.ByteBuffer success)
    {
      this();
      this.success = org.apache.thrift.TBaseHelper.copyBinary(success);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public windowFilter_result(windowFilter_result other) {
      if (other.isSetSuccess()) {
        this.success = org.apache.thrift.TBaseHelper.copyBinary(other.success);
      }
    }

    @Override
    public windowFilter_result deepCopy() {
      return new windowFilter_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public byte[] getSuccess() {
      setSuccess(org.apache.thrift.TBaseHelper.rightSize(success));
      return success == null ? null : success.array();
    }

    public java.nio.ByteBuffer bufferForSuccess() {
      return org.apache.thrift.TBaseHelper.copyBinary(success);
    }

    public windowFilter_result setSuccess(byte[] success) {
      this.success = success == null ? (java.nio.ByteBuffer)null     : java.nio.ByteBuffer.wrap(success.clone());
      return this;
    }

    public windowFilter_result setSuccess(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer success) {
      this.success = org.apache.thrift.TBaseHelper.copyBinary(success);
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          if (value instanceof byte[]) {
            setSuccess((byte[])value);
          } else {
            setSuccess((java.nio.ByteBuffer)value);
          }
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof windowFilter_result)
        return this.equals((windowFilter_result)that);
      return false;
    }

    public boolean equals(windowFilter_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(windowFilter_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("windowFilter_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.success, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class windowFilter_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public windowFilter_resultStandardScheme getScheme() {
        return new windowFilter_resultStandardScheme();
      }
    }

    private static class windowFilter_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<windowFilter_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, windowFilter_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readBinary();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, windowFilter_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBinary(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class windowFilter_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public windowFilter_resultTupleScheme getScheme() {
        return new windowFilter_resultTupleScheme();
      }
    }

    private static class windowFilter_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<windowFilter_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, windowFilter_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBinary(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, windowFilter_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBinary();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class getAllFilteredEvents_args implements org.apache.thrift.TBase<getAllFilteredEvents_args, getAllFilteredEvents_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAllFilteredEvents_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllFilteredEvents_args");

    private static final org.apache.thrift.protocol.TField WINDOW_FIELD_DESC = new org.apache.thrift.protocol.TField("window", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField INTERVAL_BITMAP_FIELD_DESC = new org.apache.thrift.protocol.TField("intervalBitmap", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getAllFilteredEvents_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getAllFilteredEvents_argsTupleSchemeFactory();

    public long window; // required
    public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer intervalBitmap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      WINDOW((short)1, "window"),
      INTERVAL_BITMAP((short)2, "intervalBitmap");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // WINDOW
            return WINDOW;
          case 2: // INTERVAL_BITMAP
            return INTERVAL_BITMAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __WINDOW_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.WINDOW, new org.apache.thrift.meta_data.FieldMetaData("window", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.INTERVAL_BITMAP, new org.apache.thrift.meta_data.FieldMetaData("intervalBitmap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllFilteredEvents_args.class, metaDataMap);
    }

    public getAllFilteredEvents_args() {
    }

    public getAllFilteredEvents_args(
      long window,
      java.nio.ByteBuffer intervalBitmap)
    {
      this();
      this.window = window;
      setWindowIsSet(true);
      this.intervalBitmap = org.apache.thrift.TBaseHelper.copyBinary(intervalBitmap);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllFilteredEvents_args(getAllFilteredEvents_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.window = other.window;
      if (other.isSetIntervalBitmap()) {
        this.intervalBitmap = org.apache.thrift.TBaseHelper.copyBinary(other.intervalBitmap);
      }
    }

    @Override
    public getAllFilteredEvents_args deepCopy() {
      return new getAllFilteredEvents_args(this);
    }

    @Override
    public void clear() {
      setWindowIsSet(false);
      this.window = 0;
      this.intervalBitmap = null;
    }

    public long getWindow() {
      return this.window;
    }

    public getAllFilteredEvents_args setWindow(long window) {
      this.window = window;
      setWindowIsSet(true);
      return this;
    }

    public void unsetWindow() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __WINDOW_ISSET_ID);
    }

    /** Returns true if field window is set (has been assigned a value) and false otherwise */
    public boolean isSetWindow() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __WINDOW_ISSET_ID);
    }

    public void setWindowIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __WINDOW_ISSET_ID, value);
    }

    public byte[] getIntervalBitmap() {
      setIntervalBitmap(org.apache.thrift.TBaseHelper.rightSize(intervalBitmap));
      return intervalBitmap == null ? null : intervalBitmap.array();
    }

    public java.nio.ByteBuffer bufferForIntervalBitmap() {
      return org.apache.thrift.TBaseHelper.copyBinary(intervalBitmap);
    }

    public getAllFilteredEvents_args setIntervalBitmap(byte[] intervalBitmap) {
      this.intervalBitmap = intervalBitmap == null ? (java.nio.ByteBuffer)null     : java.nio.ByteBuffer.wrap(intervalBitmap.clone());
      return this;
    }

    public getAllFilteredEvents_args setIntervalBitmap(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer intervalBitmap) {
      this.intervalBitmap = org.apache.thrift.TBaseHelper.copyBinary(intervalBitmap);
      return this;
    }

    public void unsetIntervalBitmap() {
      this.intervalBitmap = null;
    }

    /** Returns true if field intervalBitmap is set (has been assigned a value) and false otherwise */
    public boolean isSetIntervalBitmap() {
      return this.intervalBitmap != null;
    }

    public void setIntervalBitmapIsSet(boolean value) {
      if (!value) {
        this.intervalBitmap = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case WINDOW:
        if (value == null) {
          unsetWindow();
        } else {
          setWindow((java.lang.Long)value);
        }
        break;

      case INTERVAL_BITMAP:
        if (value == null) {
          unsetIntervalBitmap();
        } else {
          if (value instanceof byte[]) {
            setIntervalBitmap((byte[])value);
          } else {
            setIntervalBitmap((java.nio.ByteBuffer)value);
          }
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case WINDOW:
        return getWindow();

      case INTERVAL_BITMAP:
        return getIntervalBitmap();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case WINDOW:
        return isSetWindow();
      case INTERVAL_BITMAP:
        return isSetIntervalBitmap();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof getAllFilteredEvents_args)
        return this.equals((getAllFilteredEvents_args)that);
      return false;
    }

    public boolean equals(getAllFilteredEvents_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_window = true;
      boolean that_present_window = true;
      if (this_present_window || that_present_window) {
        if (!(this_present_window && that_present_window))
          return false;
        if (this.window != that.window)
          return false;
      }

      boolean this_present_intervalBitmap = true && this.isSetIntervalBitmap();
      boolean that_present_intervalBitmap = true && that.isSetIntervalBitmap();
      if (this_present_intervalBitmap || that_present_intervalBitmap) {
        if (!(this_present_intervalBitmap && that_present_intervalBitmap))
          return false;
        if (!this.intervalBitmap.equals(that.intervalBitmap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(window);

      hashCode = hashCode * 8191 + ((isSetIntervalBitmap()) ? 131071 : 524287);
      if (isSetIntervalBitmap())
        hashCode = hashCode * 8191 + intervalBitmap.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getAllFilteredEvents_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetWindow(), other.isSetWindow());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWindow()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.window, other.window);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetIntervalBitmap(), other.isSetIntervalBitmap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIntervalBitmap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.intervalBitmap, other.intervalBitmap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getAllFilteredEvents_args(");
      boolean first = true;

      sb.append("window:");
      sb.append(this.window);
      first = false;
      if (!first) sb.append(", ");
      sb.append("intervalBitmap:");
      if (this.intervalBitmap == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.intervalBitmap, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllFilteredEvents_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getAllFilteredEvents_argsStandardScheme getScheme() {
        return new getAllFilteredEvents_argsStandardScheme();
      }
    }

    private static class getAllFilteredEvents_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getAllFilteredEvents_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllFilteredEvents_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // WINDOW
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.window = iprot.readI64();
                struct.setWindowIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // INTERVAL_BITMAP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.intervalBitmap = iprot.readBinary();
                struct.setIntervalBitmapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllFilteredEvents_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(WINDOW_FIELD_DESC);
        oprot.writeI64(struct.window);
        oprot.writeFieldEnd();
        if (struct.intervalBitmap != null) {
          oprot.writeFieldBegin(INTERVAL_BITMAP_FIELD_DESC);
          oprot.writeBinary(struct.intervalBitmap);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllFilteredEvents_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getAllFilteredEvents_argsTupleScheme getScheme() {
        return new getAllFilteredEvents_argsTupleScheme();
      }
    }

    private static class getAllFilteredEvents_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getAllFilteredEvents_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllFilteredEvents_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetWindow()) {
          optionals.set(0);
        }
        if (struct.isSetIntervalBitmap()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetWindow()) {
          oprot.writeI64(struct.window);
        }
        if (struct.isSetIntervalBitmap()) {
          oprot.writeBinary(struct.intervalBitmap);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllFilteredEvents_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.window = iprot.readI64();
          struct.setWindowIsSet(true);
        }
        if (incoming.get(1)) {
          struct.intervalBitmap = iprot.readBinary();
          struct.setIntervalBitmapIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class getAllFilteredEvents_result implements org.apache.thrift.TBase<getAllFilteredEvents_result, getAllFilteredEvents_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAllFilteredEvents_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllFilteredEvents_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getAllFilteredEvents_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getAllFilteredEvents_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllFilteredEvents_result.class, metaDataMap);
    }

    public getAllFilteredEvents_result() {
    }

    public getAllFilteredEvents_result(
      java.nio.ByteBuffer success)
    {
      this();
      this.success = org.apache.thrift.TBaseHelper.copyBinary(success);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllFilteredEvents_result(getAllFilteredEvents_result other) {
      if (other.isSetSuccess()) {
        this.success = org.apache.thrift.TBaseHelper.copyBinary(other.success);
      }
    }

    @Override
    public getAllFilteredEvents_result deepCopy() {
      return new getAllFilteredEvents_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public byte[] getSuccess() {
      setSuccess(org.apache.thrift.TBaseHelper.rightSize(success));
      return success == null ? null : success.array();
    }

    public java.nio.ByteBuffer bufferForSuccess() {
      return org.apache.thrift.TBaseHelper.copyBinary(success);
    }

    public getAllFilteredEvents_result setSuccess(byte[] success) {
      this.success = success == null ? (java.nio.ByteBuffer)null     : java.nio.ByteBuffer.wrap(success.clone());
      return this;
    }

    public getAllFilteredEvents_result setSuccess(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer success) {
      this.success = org.apache.thrift.TBaseHelper.copyBinary(success);
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          if (value instanceof byte[]) {
            setSuccess((byte[])value);
          } else {
            setSuccess((java.nio.ByteBuffer)value);
          }
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof getAllFilteredEvents_result)
        return this.equals((getAllFilteredEvents_result)that);
      return false;
    }

    public boolean equals(getAllFilteredEvents_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getAllFilteredEvents_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getAllFilteredEvents_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.success, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllFilteredEvents_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getAllFilteredEvents_resultStandardScheme getScheme() {
        return new getAllFilteredEvents_resultStandardScheme();
      }
    }

    private static class getAllFilteredEvents_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getAllFilteredEvents_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllFilteredEvents_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readBinary();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllFilteredEvents_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBinary(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllFilteredEvents_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getAllFilteredEvents_resultTupleScheme getScheme() {
        return new getAllFilteredEvents_resultTupleScheme();
      }
    }

    private static class getAllFilteredEvents_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getAllFilteredEvents_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllFilteredEvents_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBinary(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllFilteredEvents_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBinary();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
