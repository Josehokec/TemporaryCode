package rpc.iface;

import rpc.MinMaxPair;

/**
 * Autogenerated by Thrift Compiler (0.21.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.21.0)", date = "2024-11-12")
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class FilterRPC {

  public interface Iface {

    public java.util.Map<java.lang.String,java.lang.Integer> initial(java.lang.String tableName, java.util.Map<java.lang.String,java.util.List<java.lang.String>> ipStrMap) throws org.apache.thrift.TException;

    public java.nio.ByteBuffer getReplayIntervals(java.lang.String varName, long window, int headTailMarker) throws org.apache.thrift.TException;

    public java.util.Map<java.lang.String,java.nio.ByteBuffer> getBF4EQJoin(java.lang.String varName, long window, java.util.Map<java.lang.String,java.util.List<java.lang.String>> dpStrMap, java.util.Map<java.lang.String,java.lang.Integer> keyNumMap, java.nio.ByteBuffer sfBuffer) throws org.apache.thrift.TException;

    public java.util.Map<java.lang.String, MinMaxPair> getHashTable4NEQJoin(java.lang.String varName, long window, java.util.List<java.lang.String> neqDPStr, java.nio.ByteBuffer sfBuffer) throws org.apache.thrift.TException;

    public java.nio.ByteBuffer windowFilter(java.lang.String varName, long window, int headTailMarker, java.nio.ByteBuffer sfBuffer) throws org.apache.thrift.TException;

    public java.nio.ByteBuffer eqJoinFilter(java.lang.String varName, long window, int headTailMarker, java.util.Map<java.lang.String,java.lang.Boolean> previousOrNext, java.util.Map<java.lang.String,java.util.List<java.lang.String>> dpStrMap, java.util.Map<java.lang.String,java.nio.ByteBuffer> bfBufferMap) throws org.apache.thrift.TException;

    public java.nio.ByteBuffer neqJoinFilter(java.lang.String varName, long window, int headTailMarker, java.util.Map<java.lang.String,java.lang.Boolean> previousOrNext, java.util.Map<java.lang.String,java.util.List<java.lang.String>> dpStrMap, java.util.Map<java.lang.String,MinMaxPair> valueRange) throws org.apache.thrift.TException;

    public java.nio.ByteBuffer getAllFilteredEvents(long window, java.nio.ByteBuffer sfBuffer) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void initial(java.lang.String tableName, java.util.Map<java.lang.String,java.util.List<java.lang.String>> ipStrMap, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.lang.Integer>> resultHandler) throws org.apache.thrift.TException;

    public void getReplayIntervals(java.lang.String varName, long window, int headTailMarker, org.apache.thrift.async.AsyncMethodCallback<java.nio.ByteBuffer> resultHandler) throws org.apache.thrift.TException;

    public void getBF4EQJoin(java.lang.String varName, long window, java.util.Map<java.lang.String,java.util.List<java.lang.String>> dpStrMap, java.util.Map<java.lang.String,java.lang.Integer> keyNumMap, java.nio.ByteBuffer sfBuffer, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.nio.ByteBuffer>> resultHandler) throws org.apache.thrift.TException;

    public void getHashTable4NEQJoin(java.lang.String varName, long window, java.util.List<java.lang.String> neqDPStr, java.nio.ByteBuffer sfBuffer, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,MinMaxPair>> resultHandler) throws org.apache.thrift.TException;

    public void windowFilter(java.lang.String varName, long window, int headTailMarker, java.nio.ByteBuffer sfBuffer, org.apache.thrift.async.AsyncMethodCallback<java.nio.ByteBuffer> resultHandler) throws org.apache.thrift.TException;

    public void eqJoinFilter(java.lang.String varName, long window, int headTailMarker, java.util.Map<java.lang.String,java.lang.Boolean> previousOrNext, java.util.Map<java.lang.String,java.util.List<java.lang.String>> dpStrMap, java.util.Map<java.lang.String,java.nio.ByteBuffer> bfBufferMap, org.apache.thrift.async.AsyncMethodCallback<java.nio.ByteBuffer> resultHandler) throws org.apache.thrift.TException;

    public void neqJoinFilter(java.lang.String varName, long window, int headTailMarker, java.util.Map<java.lang.String,java.lang.Boolean> previousOrNext, java.util.Map<java.lang.String,java.util.List<java.lang.String>> dpStrMap, java.util.Map<java.lang.String,MinMaxPair> valueRange, org.apache.thrift.async.AsyncMethodCallback<java.nio.ByteBuffer> resultHandler) throws org.apache.thrift.TException;

    public void getAllFilteredEvents(long window, java.nio.ByteBuffer sfBuffer, org.apache.thrift.async.AsyncMethodCallback<java.nio.ByteBuffer> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      @Override
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      @Override
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    @Override
    public java.util.Map<java.lang.String,java.lang.Integer> initial(java.lang.String tableName, java.util.Map<java.lang.String,java.util.List<java.lang.String>> ipStrMap) throws org.apache.thrift.TException
    {
      send_initial(tableName, ipStrMap);
      return recv_initial();
    }

    public void send_initial(java.lang.String tableName, java.util.Map<java.lang.String,java.util.List<java.lang.String>> ipStrMap) throws org.apache.thrift.TException
    {
      initial_args args = new initial_args();
      args.setTableName(tableName);
      args.setIpStrMap(ipStrMap);
      sendBase("initial", args);
    }

    public java.util.Map<java.lang.String,java.lang.Integer> recv_initial() throws org.apache.thrift.TException
    {
      initial_result result = new initial_result();
      receiveBase(result, "initial");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "initial failed: unknown result");
    }

    @Override
    public java.nio.ByteBuffer getReplayIntervals(java.lang.String varName, long window, int headTailMarker) throws org.apache.thrift.TException
    {
      send_getReplayIntervals(varName, window, headTailMarker);
      return recv_getReplayIntervals();
    }

    public void send_getReplayIntervals(java.lang.String varName, long window, int headTailMarker) throws org.apache.thrift.TException
    {
      getReplayIntervals_args args = new getReplayIntervals_args();
      args.setVarName(varName);
      args.setWindow(window);
      args.setHeadTailMarker(headTailMarker);
      sendBase("getReplayIntervals", args);
    }

    public java.nio.ByteBuffer recv_getReplayIntervals() throws org.apache.thrift.TException
    {
      getReplayIntervals_result result = new getReplayIntervals_result();
      receiveBase(result, "getReplayIntervals");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getReplayIntervals failed: unknown result");
    }

    @Override
    public java.util.Map<java.lang.String,java.nio.ByteBuffer> getBF4EQJoin(java.lang.String varName, long window, java.util.Map<java.lang.String,java.util.List<java.lang.String>> dpStrMap, java.util.Map<java.lang.String,java.lang.Integer> keyNumMap, java.nio.ByteBuffer sfBuffer) throws org.apache.thrift.TException
    {
      send_getBF4EQJoin(varName, window, dpStrMap, keyNumMap, sfBuffer);
      return recv_getBF4EQJoin();
    }

    public void send_getBF4EQJoin(java.lang.String varName, long window, java.util.Map<java.lang.String,java.util.List<java.lang.String>> dpStrMap, java.util.Map<java.lang.String,java.lang.Integer> keyNumMap, java.nio.ByteBuffer sfBuffer) throws org.apache.thrift.TException
    {
      getBF4EQJoin_args args = new getBF4EQJoin_args();
      args.setVarName(varName);
      args.setWindow(window);
      args.setDpStrMap(dpStrMap);
      args.setKeyNumMap(keyNumMap);
      args.setSfBuffer(sfBuffer);
      sendBase("getBF4EQJoin", args);
    }

    public java.util.Map<java.lang.String,java.nio.ByteBuffer> recv_getBF4EQJoin() throws org.apache.thrift.TException
    {
      getBF4EQJoin_result result = new getBF4EQJoin_result();
      receiveBase(result, "getBF4EQJoin");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getBF4EQJoin failed: unknown result");
    }

    @Override
    public java.util.Map<java.lang.String,MinMaxPair> getHashTable4NEQJoin(java.lang.String varName, long window, java.util.List<java.lang.String> neqDPStr, java.nio.ByteBuffer sfBuffer) throws org.apache.thrift.TException
    {
      send_getHashTable4NEQJoin(varName, window, neqDPStr, sfBuffer);
      return recv_getHashTable4NEQJoin();
    }

    public void send_getHashTable4NEQJoin(java.lang.String varName, long window, java.util.List<java.lang.String> neqDPStr, java.nio.ByteBuffer sfBuffer) throws org.apache.thrift.TException
    {
      getHashTable4NEQJoin_args args = new getHashTable4NEQJoin_args();
      args.setVarName(varName);
      args.setWindow(window);
      args.setNeqDPStr(neqDPStr);
      args.setSfBuffer(sfBuffer);
      sendBase("getHashTable4NEQJoin", args);
    }

    public java.util.Map<java.lang.String,MinMaxPair> recv_getHashTable4NEQJoin() throws org.apache.thrift.TException
    {
      getHashTable4NEQJoin_result result = new getHashTable4NEQJoin_result();
      receiveBase(result, "getHashTable4NEQJoin");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getHashTable4NEQJoin failed: unknown result");
    }

    @Override
    public java.nio.ByteBuffer windowFilter(java.lang.String varName, long window, int headTailMarker, java.nio.ByteBuffer sfBuffer) throws org.apache.thrift.TException
    {
      send_windowFilter(varName, window, headTailMarker, sfBuffer);
      return recv_windowFilter();
    }

    public void send_windowFilter(java.lang.String varName, long window, int headTailMarker, java.nio.ByteBuffer sfBuffer) throws org.apache.thrift.TException
    {
      windowFilter_args args = new windowFilter_args();
      args.setVarName(varName);
      args.setWindow(window);
      args.setHeadTailMarker(headTailMarker);
      args.setSfBuffer(sfBuffer);
      sendBase("windowFilter", args);
    }

    public java.nio.ByteBuffer recv_windowFilter() throws org.apache.thrift.TException
    {
      windowFilter_result result = new windowFilter_result();
      receiveBase(result, "windowFilter");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "windowFilter failed: unknown result");
    }

    @Override
    public java.nio.ByteBuffer eqJoinFilter(java.lang.String varName, long window, int headTailMarker, java.util.Map<java.lang.String,java.lang.Boolean> previousOrNext, java.util.Map<java.lang.String,java.util.List<java.lang.String>> dpStrMap, java.util.Map<java.lang.String,java.nio.ByteBuffer> bfBufferMap) throws org.apache.thrift.TException
    {
      send_eqJoinFilter(varName, window, headTailMarker, previousOrNext, dpStrMap, bfBufferMap);
      return recv_eqJoinFilter();
    }

    public void send_eqJoinFilter(java.lang.String varName, long window, int headTailMarker, java.util.Map<java.lang.String,java.lang.Boolean> previousOrNext, java.util.Map<java.lang.String,java.util.List<java.lang.String>> dpStrMap, java.util.Map<java.lang.String,java.nio.ByteBuffer> bfBufferMap) throws org.apache.thrift.TException
    {
      eqJoinFilter_args args = new eqJoinFilter_args();
      args.setVarName(varName);
      args.setWindow(window);
      args.setHeadTailMarker(headTailMarker);
      args.setPreviousOrNext(previousOrNext);
      args.setDpStrMap(dpStrMap);
      args.setBfBufferMap(bfBufferMap);
      sendBase("eqJoinFilter", args);
    }

    public java.nio.ByteBuffer recv_eqJoinFilter() throws org.apache.thrift.TException
    {
      eqJoinFilter_result result = new eqJoinFilter_result();
      receiveBase(result, "eqJoinFilter");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "eqJoinFilter failed: unknown result");
    }

    @Override
    public java.nio.ByteBuffer neqJoinFilter(java.lang.String varName, long window, int headTailMarker, java.util.Map<java.lang.String,java.lang.Boolean> previousOrNext, java.util.Map<java.lang.String,java.util.List<java.lang.String>> dpStrMap, java.util.Map<java.lang.String,MinMaxPair> valueRange) throws org.apache.thrift.TException
    {
      send_neqJoinFilter(varName, window, headTailMarker, previousOrNext, dpStrMap, valueRange);
      return recv_neqJoinFilter();
    }

    public void send_neqJoinFilter(java.lang.String varName, long window, int headTailMarker, java.util.Map<java.lang.String,java.lang.Boolean> previousOrNext, java.util.Map<java.lang.String,java.util.List<java.lang.String>> dpStrMap, java.util.Map<java.lang.String,MinMaxPair> valueRange) throws org.apache.thrift.TException
    {
      neqJoinFilter_args args = new neqJoinFilter_args();
      args.setVarName(varName);
      args.setWindow(window);
      args.setHeadTailMarker(headTailMarker);
      args.setPreviousOrNext(previousOrNext);
      args.setDpStrMap(dpStrMap);
      args.setValueRange(valueRange);
      sendBase("neqJoinFilter", args);
    }

    public java.nio.ByteBuffer recv_neqJoinFilter() throws org.apache.thrift.TException
    {
      neqJoinFilter_result result = new neqJoinFilter_result();
      receiveBase(result, "neqJoinFilter");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "neqJoinFilter failed: unknown result");
    }

    @Override
    public java.nio.ByteBuffer getAllFilteredEvents(long window, java.nio.ByteBuffer sfBuffer) throws org.apache.thrift.TException
    {
      send_getAllFilteredEvents(window, sfBuffer);
      return recv_getAllFilteredEvents();
    }

    public void send_getAllFilteredEvents(long window, java.nio.ByteBuffer sfBuffer) throws org.apache.thrift.TException
    {
      getAllFilteredEvents_args args = new getAllFilteredEvents_args();
      args.setWindow(window);
      args.setSfBuffer(sfBuffer);
      sendBase("getAllFilteredEvents", args);
    }

    public java.nio.ByteBuffer recv_getAllFilteredEvents() throws org.apache.thrift.TException
    {
      getAllFilteredEvents_result result = new getAllFilteredEvents_result();
      receiveBase(result, "getAllFilteredEvents");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAllFilteredEvents failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
    @Override
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    @Override
    public void initial(java.lang.String tableName, java.util.Map<java.lang.String,java.util.List<java.lang.String>> ipStrMap, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.lang.Integer>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      initial_call method_call = new initial_call(tableName, ipStrMap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class initial_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.Map<java.lang.String,java.lang.Integer>> {
      private java.lang.String tableName;
      private java.util.Map<java.lang.String,java.util.List<java.lang.String>> ipStrMap;
      public initial_call(java.lang.String tableName, java.util.Map<java.lang.String,java.util.List<java.lang.String>> ipStrMap, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.lang.Integer>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tableName = tableName;
        this.ipStrMap = ipStrMap;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("initial", org.apache.thrift.protocol.TMessageType.CALL, 0));
        initial_args args = new initial_args();
        args.setTableName(tableName);
        args.setIpStrMap(ipStrMap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public java.util.Map<java.lang.String,java.lang.Integer> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_initial();
      }
    }

    @Override
    public void getReplayIntervals(java.lang.String varName, long window, int headTailMarker, org.apache.thrift.async.AsyncMethodCallback<java.nio.ByteBuffer> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getReplayIntervals_call method_call = new getReplayIntervals_call(varName, window, headTailMarker, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getReplayIntervals_call extends org.apache.thrift.async.TAsyncMethodCall<java.nio.ByteBuffer> {
      private java.lang.String varName;
      private long window;
      private int headTailMarker;
      public getReplayIntervals_call(java.lang.String varName, long window, int headTailMarker, org.apache.thrift.async.AsyncMethodCallback<java.nio.ByteBuffer> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.varName = varName;
        this.window = window;
        this.headTailMarker = headTailMarker;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getReplayIntervals", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getReplayIntervals_args args = new getReplayIntervals_args();
        args.setVarName(varName);
        args.setWindow(window);
        args.setHeadTailMarker(headTailMarker);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public java.nio.ByteBuffer getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getReplayIntervals();
      }
    }

    @Override
    public void getBF4EQJoin(java.lang.String varName, long window, java.util.Map<java.lang.String,java.util.List<java.lang.String>> dpStrMap, java.util.Map<java.lang.String,java.lang.Integer> keyNumMap, java.nio.ByteBuffer sfBuffer, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.nio.ByteBuffer>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getBF4EQJoin_call method_call = new getBF4EQJoin_call(varName, window, dpStrMap, keyNumMap, sfBuffer, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getBF4EQJoin_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.Map<java.lang.String,java.nio.ByteBuffer>> {
      private java.lang.String varName;
      private long window;
      private java.util.Map<java.lang.String,java.util.List<java.lang.String>> dpStrMap;
      private java.util.Map<java.lang.String,java.lang.Integer> keyNumMap;
      private java.nio.ByteBuffer sfBuffer;
      public getBF4EQJoin_call(java.lang.String varName, long window, java.util.Map<java.lang.String,java.util.List<java.lang.String>> dpStrMap, java.util.Map<java.lang.String,java.lang.Integer> keyNumMap, java.nio.ByteBuffer sfBuffer, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.nio.ByteBuffer>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.varName = varName;
        this.window = window;
        this.dpStrMap = dpStrMap;
        this.keyNumMap = keyNumMap;
        this.sfBuffer = sfBuffer;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getBF4EQJoin", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getBF4EQJoin_args args = new getBF4EQJoin_args();
        args.setVarName(varName);
        args.setWindow(window);
        args.setDpStrMap(dpStrMap);
        args.setKeyNumMap(keyNumMap);
        args.setSfBuffer(sfBuffer);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public java.util.Map<java.lang.String,java.nio.ByteBuffer> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getBF4EQJoin();
      }
    }

    @Override
    public void getHashTable4NEQJoin(java.lang.String varName, long window, java.util.List<java.lang.String> neqDPStr, java.nio.ByteBuffer sfBuffer, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,MinMaxPair>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getHashTable4NEQJoin_call method_call = new getHashTable4NEQJoin_call(varName, window, neqDPStr, sfBuffer, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getHashTable4NEQJoin_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.Map<java.lang.String,MinMaxPair>> {
      private java.lang.String varName;
      private long window;
      private java.util.List<java.lang.String> neqDPStr;
      private java.nio.ByteBuffer sfBuffer;
      public getHashTable4NEQJoin_call(java.lang.String varName, long window, java.util.List<java.lang.String> neqDPStr, java.nio.ByteBuffer sfBuffer, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,MinMaxPair>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.varName = varName;
        this.window = window;
        this.neqDPStr = neqDPStr;
        this.sfBuffer = sfBuffer;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getHashTable4NEQJoin", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getHashTable4NEQJoin_args args = new getHashTable4NEQJoin_args();
        args.setVarName(varName);
        args.setWindow(window);
        args.setNeqDPStr(neqDPStr);
        args.setSfBuffer(sfBuffer);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public java.util.Map<java.lang.String,MinMaxPair> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getHashTable4NEQJoin();
      }
    }

    @Override
    public void windowFilter(java.lang.String varName, long window, int headTailMarker, java.nio.ByteBuffer sfBuffer, org.apache.thrift.async.AsyncMethodCallback<java.nio.ByteBuffer> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      windowFilter_call method_call = new windowFilter_call(varName, window, headTailMarker, sfBuffer, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class windowFilter_call extends org.apache.thrift.async.TAsyncMethodCall<java.nio.ByteBuffer> {
      private java.lang.String varName;
      private long window;
      private int headTailMarker;
      private java.nio.ByteBuffer sfBuffer;
      public windowFilter_call(java.lang.String varName, long window, int headTailMarker, java.nio.ByteBuffer sfBuffer, org.apache.thrift.async.AsyncMethodCallback<java.nio.ByteBuffer> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.varName = varName;
        this.window = window;
        this.headTailMarker = headTailMarker;
        this.sfBuffer = sfBuffer;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("windowFilter", org.apache.thrift.protocol.TMessageType.CALL, 0));
        windowFilter_args args = new windowFilter_args();
        args.setVarName(varName);
        args.setWindow(window);
        args.setHeadTailMarker(headTailMarker);
        args.setSfBuffer(sfBuffer);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public java.nio.ByteBuffer getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_windowFilter();
      }
    }

    @Override
    public void eqJoinFilter(java.lang.String varName, long window, int headTailMarker, java.util.Map<java.lang.String,java.lang.Boolean> previousOrNext, java.util.Map<java.lang.String,java.util.List<java.lang.String>> dpStrMap, java.util.Map<java.lang.String,java.nio.ByteBuffer> bfBufferMap, org.apache.thrift.async.AsyncMethodCallback<java.nio.ByteBuffer> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      eqJoinFilter_call method_call = new eqJoinFilter_call(varName, window, headTailMarker, previousOrNext, dpStrMap, bfBufferMap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class eqJoinFilter_call extends org.apache.thrift.async.TAsyncMethodCall<java.nio.ByteBuffer> {
      private java.lang.String varName;
      private long window;
      private int headTailMarker;
      private java.util.Map<java.lang.String,java.lang.Boolean> previousOrNext;
      private java.util.Map<java.lang.String,java.util.List<java.lang.String>> dpStrMap;
      private java.util.Map<java.lang.String,java.nio.ByteBuffer> bfBufferMap;
      public eqJoinFilter_call(java.lang.String varName, long window, int headTailMarker, java.util.Map<java.lang.String,java.lang.Boolean> previousOrNext, java.util.Map<java.lang.String,java.util.List<java.lang.String>> dpStrMap, java.util.Map<java.lang.String,java.nio.ByteBuffer> bfBufferMap, org.apache.thrift.async.AsyncMethodCallback<java.nio.ByteBuffer> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.varName = varName;
        this.window = window;
        this.headTailMarker = headTailMarker;
        this.previousOrNext = previousOrNext;
        this.dpStrMap = dpStrMap;
        this.bfBufferMap = bfBufferMap;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("eqJoinFilter", org.apache.thrift.protocol.TMessageType.CALL, 0));
        eqJoinFilter_args args = new eqJoinFilter_args();
        args.setVarName(varName);
        args.setWindow(window);
        args.setHeadTailMarker(headTailMarker);
        args.setPreviousOrNext(previousOrNext);
        args.setDpStrMap(dpStrMap);
        args.setBfBufferMap(bfBufferMap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public java.nio.ByteBuffer getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_eqJoinFilter();
      }
    }

    @Override
    public void neqJoinFilter(java.lang.String varName, long window, int headTailMarker, java.util.Map<java.lang.String,java.lang.Boolean> previousOrNext, java.util.Map<java.lang.String,java.util.List<java.lang.String>> dpStrMap, java.util.Map<java.lang.String,MinMaxPair> valueRange, org.apache.thrift.async.AsyncMethodCallback<java.nio.ByteBuffer> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      neqJoinFilter_call method_call = new neqJoinFilter_call(varName, window, headTailMarker, previousOrNext, dpStrMap, valueRange, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class neqJoinFilter_call extends org.apache.thrift.async.TAsyncMethodCall<java.nio.ByteBuffer> {
      private java.lang.String varName;
      private long window;
      private int headTailMarker;
      private java.util.Map<java.lang.String,java.lang.Boolean> previousOrNext;
      private java.util.Map<java.lang.String,java.util.List<java.lang.String>> dpStrMap;
      private java.util.Map<java.lang.String,MinMaxPair> valueRange;
      public neqJoinFilter_call(java.lang.String varName, long window, int headTailMarker, java.util.Map<java.lang.String,java.lang.Boolean> previousOrNext, java.util.Map<java.lang.String,java.util.List<java.lang.String>> dpStrMap, java.util.Map<java.lang.String,MinMaxPair> valueRange, org.apache.thrift.async.AsyncMethodCallback<java.nio.ByteBuffer> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.varName = varName;
        this.window = window;
        this.headTailMarker = headTailMarker;
        this.previousOrNext = previousOrNext;
        this.dpStrMap = dpStrMap;
        this.valueRange = valueRange;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("neqJoinFilter", org.apache.thrift.protocol.TMessageType.CALL, 0));
        neqJoinFilter_args args = new neqJoinFilter_args();
        args.setVarName(varName);
        args.setWindow(window);
        args.setHeadTailMarker(headTailMarker);
        args.setPreviousOrNext(previousOrNext);
        args.setDpStrMap(dpStrMap);
        args.setValueRange(valueRange);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public java.nio.ByteBuffer getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_neqJoinFilter();
      }
    }

    @Override
    public void getAllFilteredEvents(long window, java.nio.ByteBuffer sfBuffer, org.apache.thrift.async.AsyncMethodCallback<java.nio.ByteBuffer> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAllFilteredEvents_call method_call = new getAllFilteredEvents_call(window, sfBuffer, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAllFilteredEvents_call extends org.apache.thrift.async.TAsyncMethodCall<java.nio.ByteBuffer> {
      private long window;
      private java.nio.ByteBuffer sfBuffer;
      public getAllFilteredEvents_call(long window, java.nio.ByteBuffer sfBuffer, org.apache.thrift.async.AsyncMethodCallback<java.nio.ByteBuffer> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.window = window;
        this.sfBuffer = sfBuffer;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAllFilteredEvents", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAllFilteredEvents_args args = new getAllFilteredEvents_args();
        args.setWindow(window);
        args.setSfBuffer(sfBuffer);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public java.nio.ByteBuffer getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAllFilteredEvents();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase, ? extends org.apache.thrift.TBase>> processMap) {
      processMap.put("initial", new initial());
      processMap.put("getReplayIntervals", new getReplayIntervals());
      processMap.put("getBF4EQJoin", new getBF4EQJoin());
      processMap.put("getHashTable4NEQJoin", new getHashTable4NEQJoin());
      processMap.put("windowFilter", new windowFilter());
      processMap.put("eqJoinFilter", new eqJoinFilter());
      processMap.put("neqJoinFilter", new neqJoinFilter());
      processMap.put("getAllFilteredEvents", new getAllFilteredEvents());
      return processMap;
    }

    public static class initial<I extends Iface> extends org.apache.thrift.ProcessFunction<I, initial_args, initial_result> {
      public initial() {
        super("initial");
      }

      @Override
      public initial_args getEmptyArgsInstance() {
        return new initial_args();
      }

      @Override
      public boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public initial_result getEmptyResultInstance() {
        return new initial_result();
      }

      @Override
      public initial_result getResult(I iface, initial_args args) throws org.apache.thrift.TException {
        initial_result result = getEmptyResultInstance();
        result.success = iface.initial(args.tableName, args.ipStrMap);
        return result;
      }
    }

    public static class getReplayIntervals<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getReplayIntervals_args, getReplayIntervals_result> {
      public getReplayIntervals() {
        super("getReplayIntervals");
      }

      @Override
      public getReplayIntervals_args getEmptyArgsInstance() {
        return new getReplayIntervals_args();
      }

      @Override
      public boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public getReplayIntervals_result getEmptyResultInstance() {
        return new getReplayIntervals_result();
      }

      @Override
      public getReplayIntervals_result getResult(I iface, getReplayIntervals_args args) throws org.apache.thrift.TException {
        getReplayIntervals_result result = getEmptyResultInstance();
        result.success = iface.getReplayIntervals(args.varName, args.window, args.headTailMarker);
        return result;
      }
    }

    public static class getBF4EQJoin<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getBF4EQJoin_args, getBF4EQJoin_result> {
      public getBF4EQJoin() {
        super("getBF4EQJoin");
      }

      @Override
      public getBF4EQJoin_args getEmptyArgsInstance() {
        return new getBF4EQJoin_args();
      }

      @Override
      public boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public getBF4EQJoin_result getEmptyResultInstance() {
        return new getBF4EQJoin_result();
      }

      @Override
      public getBF4EQJoin_result getResult(I iface, getBF4EQJoin_args args) throws org.apache.thrift.TException {
        getBF4EQJoin_result result = getEmptyResultInstance();
        result.success = iface.getBF4EQJoin(args.varName, args.window, args.dpStrMap, args.keyNumMap, args.sfBuffer);
        return result;
      }
    }

    public static class getHashTable4NEQJoin<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getHashTable4NEQJoin_args, getHashTable4NEQJoin_result> {
      public getHashTable4NEQJoin() {
        super("getHashTable4NEQJoin");
      }

      @Override
      public getHashTable4NEQJoin_args getEmptyArgsInstance() {
        return new getHashTable4NEQJoin_args();
      }

      @Override
      public boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public getHashTable4NEQJoin_result getEmptyResultInstance() {
        return new getHashTable4NEQJoin_result();
      }

      @Override
      public getHashTable4NEQJoin_result getResult(I iface, getHashTable4NEQJoin_args args) throws org.apache.thrift.TException {
        getHashTable4NEQJoin_result result = getEmptyResultInstance();
        result.success = iface.getHashTable4NEQJoin(args.varName, args.window, args.neqDPStr, args.sfBuffer);
        return result;
      }
    }

    public static class windowFilter<I extends Iface> extends org.apache.thrift.ProcessFunction<I, windowFilter_args, windowFilter_result> {
      public windowFilter() {
        super("windowFilter");
      }

      @Override
      public windowFilter_args getEmptyArgsInstance() {
        return new windowFilter_args();
      }

      @Override
      public boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public windowFilter_result getEmptyResultInstance() {
        return new windowFilter_result();
      }

      @Override
      public windowFilter_result getResult(I iface, windowFilter_args args) throws org.apache.thrift.TException {
        windowFilter_result result = getEmptyResultInstance();
        result.success = iface.windowFilter(args.varName, args.window, args.headTailMarker, args.sfBuffer);
        return result;
      }
    }

    public static class eqJoinFilter<I extends Iface> extends org.apache.thrift.ProcessFunction<I, eqJoinFilter_args, eqJoinFilter_result> {
      public eqJoinFilter() {
        super("eqJoinFilter");
      }

      @Override
      public eqJoinFilter_args getEmptyArgsInstance() {
        return new eqJoinFilter_args();
      }

      @Override
      public boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public eqJoinFilter_result getEmptyResultInstance() {
        return new eqJoinFilter_result();
      }

      @Override
      public eqJoinFilter_result getResult(I iface, eqJoinFilter_args args) throws org.apache.thrift.TException {
        eqJoinFilter_result result = getEmptyResultInstance();
        result.success = iface.eqJoinFilter(args.varName, args.window, args.headTailMarker, args.previousOrNext, args.dpStrMap, args.bfBufferMap);
        return result;
      }
    }

    public static class neqJoinFilter<I extends Iface> extends org.apache.thrift.ProcessFunction<I, neqJoinFilter_args, neqJoinFilter_result> {
      public neqJoinFilter() {
        super("neqJoinFilter");
      }

      @Override
      public neqJoinFilter_args getEmptyArgsInstance() {
        return new neqJoinFilter_args();
      }

      @Override
      public boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public neqJoinFilter_result getEmptyResultInstance() {
        return new neqJoinFilter_result();
      }

      @Override
      public neqJoinFilter_result getResult(I iface, neqJoinFilter_args args) throws org.apache.thrift.TException {
        neqJoinFilter_result result = getEmptyResultInstance();
        result.success = iface.neqJoinFilter(args.varName, args.window, args.headTailMarker, args.previousOrNext, args.dpStrMap, args.valueRange);
        return result;
      }
    }

    public static class getAllFilteredEvents<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAllFilteredEvents_args, getAllFilteredEvents_result> {
      public getAllFilteredEvents() {
        super("getAllFilteredEvents");
      }

      @Override
      public getAllFilteredEvents_args getEmptyArgsInstance() {
        return new getAllFilteredEvents_args();
      }

      @Override
      public boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public getAllFilteredEvents_result getEmptyResultInstance() {
        return new getAllFilteredEvents_result();
      }

      @Override
      public getAllFilteredEvents_result getResult(I iface, getAllFilteredEvents_args args) throws org.apache.thrift.TException {
        getAllFilteredEvents_result result = getEmptyResultInstance();
        result.success = iface.getAllFilteredEvents(args.window, args.sfBuffer);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?, ? extends org.apache.thrift.TBase>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?, ? extends org.apache.thrift.TBase>> processMap) {
      processMap.put("initial", new initial());
      processMap.put("getReplayIntervals", new getReplayIntervals());
      processMap.put("getBF4EQJoin", new getBF4EQJoin());
      processMap.put("getHashTable4NEQJoin", new getHashTable4NEQJoin());
      processMap.put("windowFilter", new windowFilter());
      processMap.put("eqJoinFilter", new eqJoinFilter());
      processMap.put("neqJoinFilter", new neqJoinFilter());
      processMap.put("getAllFilteredEvents", new getAllFilteredEvents());
      return processMap;
    }

    public static class initial<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, initial_args, java.util.Map<java.lang.String,java.lang.Integer>, initial_result> {
      public initial() {
        super("initial");
      }

      @Override
      public initial_result getEmptyResultInstance() {
        return new initial_result();
      }

      @Override
      public initial_args getEmptyArgsInstance() {
        return new initial_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.lang.Integer>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.lang.Integer>>() { 
          @Override
          public void onComplete(java.util.Map<java.lang.String,java.lang.Integer> o) {
            initial_result result = new initial_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            initial_result result = new initial_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      public boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, initial_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.lang.Integer>> resultHandler) throws org.apache.thrift.TException {
        iface.initial(args.tableName, args.ipStrMap,resultHandler);
      }
    }

    public static class getReplayIntervals<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getReplayIntervals_args, java.nio.ByteBuffer, getReplayIntervals_result> {
      public getReplayIntervals() {
        super("getReplayIntervals");
      }

      @Override
      public getReplayIntervals_result getEmptyResultInstance() {
        return new getReplayIntervals_result();
      }

      @Override
      public getReplayIntervals_args getEmptyArgsInstance() {
        return new getReplayIntervals_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<java.nio.ByteBuffer> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.nio.ByteBuffer>() { 
          @Override
          public void onComplete(java.nio.ByteBuffer o) {
            getReplayIntervals_result result = new getReplayIntervals_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getReplayIntervals_result result = new getReplayIntervals_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      public boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, getReplayIntervals_args args, org.apache.thrift.async.AsyncMethodCallback<java.nio.ByteBuffer> resultHandler) throws org.apache.thrift.TException {
        iface.getReplayIntervals(args.varName, args.window, args.headTailMarker,resultHandler);
      }
    }

    public static class getBF4EQJoin<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getBF4EQJoin_args, java.util.Map<java.lang.String,java.nio.ByteBuffer>, getBF4EQJoin_result> {
      public getBF4EQJoin() {
        super("getBF4EQJoin");
      }

      @Override
      public getBF4EQJoin_result getEmptyResultInstance() {
        return new getBF4EQJoin_result();
      }

      @Override
      public getBF4EQJoin_args getEmptyArgsInstance() {
        return new getBF4EQJoin_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.nio.ByteBuffer>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.nio.ByteBuffer>>() { 
          @Override
          public void onComplete(java.util.Map<java.lang.String,java.nio.ByteBuffer> o) {
            getBF4EQJoin_result result = new getBF4EQJoin_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getBF4EQJoin_result result = new getBF4EQJoin_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      public boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, getBF4EQJoin_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.nio.ByteBuffer>> resultHandler) throws org.apache.thrift.TException {
        iface.getBF4EQJoin(args.varName, args.window, args.dpStrMap, args.keyNumMap, args.sfBuffer,resultHandler);
      }
    }

    public static class getHashTable4NEQJoin<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getHashTable4NEQJoin_args, java.util.Map<java.lang.String,MinMaxPair>, getHashTable4NEQJoin_result> {
      public getHashTable4NEQJoin() {
        super("getHashTable4NEQJoin");
      }

      @Override
      public getHashTable4NEQJoin_result getEmptyResultInstance() {
        return new getHashTable4NEQJoin_result();
      }

      @Override
      public getHashTable4NEQJoin_args getEmptyArgsInstance() {
        return new getHashTable4NEQJoin_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,MinMaxPair>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,MinMaxPair>>() { 
          @Override
          public void onComplete(java.util.Map<java.lang.String,MinMaxPair> o) {
            getHashTable4NEQJoin_result result = new getHashTable4NEQJoin_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getHashTable4NEQJoin_result result = new getHashTable4NEQJoin_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      public boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, getHashTable4NEQJoin_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,MinMaxPair>> resultHandler) throws org.apache.thrift.TException {
        iface.getHashTable4NEQJoin(args.varName, args.window, args.neqDPStr, args.sfBuffer,resultHandler);
      }
    }

    public static class windowFilter<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, windowFilter_args, java.nio.ByteBuffer, windowFilter_result> {
      public windowFilter() {
        super("windowFilter");
      }

      @Override
      public windowFilter_result getEmptyResultInstance() {
        return new windowFilter_result();
      }

      @Override
      public windowFilter_args getEmptyArgsInstance() {
        return new windowFilter_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<java.nio.ByteBuffer> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.nio.ByteBuffer>() { 
          @Override
          public void onComplete(java.nio.ByteBuffer o) {
            windowFilter_result result = new windowFilter_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            windowFilter_result result = new windowFilter_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      public boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, windowFilter_args args, org.apache.thrift.async.AsyncMethodCallback<java.nio.ByteBuffer> resultHandler) throws org.apache.thrift.TException {
        iface.windowFilter(args.varName, args.window, args.headTailMarker, args.sfBuffer,resultHandler);
      }
    }

    public static class eqJoinFilter<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, eqJoinFilter_args, java.nio.ByteBuffer, eqJoinFilter_result> {
      public eqJoinFilter() {
        super("eqJoinFilter");
      }

      @Override
      public eqJoinFilter_result getEmptyResultInstance() {
        return new eqJoinFilter_result();
      }

      @Override
      public eqJoinFilter_args getEmptyArgsInstance() {
        return new eqJoinFilter_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<java.nio.ByteBuffer> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.nio.ByteBuffer>() { 
          @Override
          public void onComplete(java.nio.ByteBuffer o) {
            eqJoinFilter_result result = new eqJoinFilter_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            eqJoinFilter_result result = new eqJoinFilter_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      public boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, eqJoinFilter_args args, org.apache.thrift.async.AsyncMethodCallback<java.nio.ByteBuffer> resultHandler) throws org.apache.thrift.TException {
        iface.eqJoinFilter(args.varName, args.window, args.headTailMarker, args.previousOrNext, args.dpStrMap, args.bfBufferMap,resultHandler);
      }
    }

    public static class neqJoinFilter<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, neqJoinFilter_args, java.nio.ByteBuffer, neqJoinFilter_result> {
      public neqJoinFilter() {
        super("neqJoinFilter");
      }

      @Override
      public neqJoinFilter_result getEmptyResultInstance() {
        return new neqJoinFilter_result();
      }

      @Override
      public neqJoinFilter_args getEmptyArgsInstance() {
        return new neqJoinFilter_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<java.nio.ByteBuffer> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.nio.ByteBuffer>() { 
          @Override
          public void onComplete(java.nio.ByteBuffer o) {
            neqJoinFilter_result result = new neqJoinFilter_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            neqJoinFilter_result result = new neqJoinFilter_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      public boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, neqJoinFilter_args args, org.apache.thrift.async.AsyncMethodCallback<java.nio.ByteBuffer> resultHandler) throws org.apache.thrift.TException {
        iface.neqJoinFilter(args.varName, args.window, args.headTailMarker, args.previousOrNext, args.dpStrMap, args.valueRange,resultHandler);
      }
    }

    public static class getAllFilteredEvents<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAllFilteredEvents_args, java.nio.ByteBuffer, getAllFilteredEvents_result> {
      public getAllFilteredEvents() {
        super("getAllFilteredEvents");
      }

      @Override
      public getAllFilteredEvents_result getEmptyResultInstance() {
        return new getAllFilteredEvents_result();
      }

      @Override
      public getAllFilteredEvents_args getEmptyArgsInstance() {
        return new getAllFilteredEvents_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<java.nio.ByteBuffer> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.nio.ByteBuffer>() { 
          @Override
          public void onComplete(java.nio.ByteBuffer o) {
            getAllFilteredEvents_result result = new getAllFilteredEvents_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getAllFilteredEvents_result result = new getAllFilteredEvents_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      public boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, getAllFilteredEvents_args args, org.apache.thrift.async.AsyncMethodCallback<java.nio.ByteBuffer> resultHandler) throws org.apache.thrift.TException {
        iface.getAllFilteredEvents(args.window, args.sfBuffer,resultHandler);
      }
    }

  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class initial_args implements org.apache.thrift.TBase<initial_args, initial_args._Fields>, java.io.Serializable, Cloneable, Comparable<initial_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("initial_args");

    private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tableName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField IP_STR_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("ipStrMap", org.apache.thrift.protocol.TType.MAP, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new initial_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new initial_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String tableName; // required
    public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.util.List<java.lang.String>> ipStrMap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TABLE_NAME((short)1, "tableName"),
      IP_STR_MAP((short)2, "ipStrMap");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TABLE_NAME
            return TABLE_NAME;
          case 2: // IP_STR_MAP
            return IP_STR_MAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("tableName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.IP_STR_MAP, new org.apache.thrift.meta_data.FieldMetaData("ipStrMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(initial_args.class, metaDataMap);
    }

    public initial_args() {
    }

    public initial_args(
      java.lang.String tableName,
      java.util.Map<java.lang.String,java.util.List<java.lang.String>> ipStrMap)
    {
      this();
      this.tableName = tableName;
      this.ipStrMap = ipStrMap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public initial_args(initial_args other) {
      if (other.isSetTableName()) {
        this.tableName = other.tableName;
      }
      if (other.isSetIpStrMap()) {
        java.util.Map<java.lang.String,java.util.List<java.lang.String>> __this__ipStrMap = new java.util.HashMap<java.lang.String,java.util.List<java.lang.String>>(other.ipStrMap.size());
        for (java.util.Map.Entry<java.lang.String, java.util.List<java.lang.String>> other_element : other.ipStrMap.entrySet()) {

          java.lang.String other_element_key = other_element.getKey();
          java.util.List<java.lang.String> other_element_value = other_element.getValue();

          java.lang.String __this__ipStrMap_copy_key = other_element_key;

          java.util.List<java.lang.String> __this__ipStrMap_copy_value = new java.util.ArrayList<java.lang.String>(other_element_value);

          __this__ipStrMap.put(__this__ipStrMap_copy_key, __this__ipStrMap_copy_value);
        }
        this.ipStrMap = __this__ipStrMap;
      }
    }

    @Override
    public initial_args deepCopy() {
      return new initial_args(this);
    }

    @Override
    public void clear() {
      this.tableName = null;
      this.ipStrMap = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getTableName() {
      return this.tableName;
    }

    public initial_args setTableName(@org.apache.thrift.annotation.Nullable java.lang.String tableName) {
      this.tableName = tableName;
      return this;
    }

    public void unsetTableName() {
      this.tableName = null;
    }

    /** Returns true if field tableName is set (has been assigned a value) and false otherwise */
    public boolean isSetTableName() {
      return this.tableName != null;
    }

    public void setTableNameIsSet(boolean value) {
      if (!value) {
        this.tableName = null;
      }
    }

    public int getIpStrMapSize() {
      return (this.ipStrMap == null) ? 0 : this.ipStrMap.size();
    }

    public void putToIpStrMap(java.lang.String key, java.util.List<java.lang.String> val) {
      if (this.ipStrMap == null) {
        this.ipStrMap = new java.util.HashMap<java.lang.String,java.util.List<java.lang.String>>();
      }
      this.ipStrMap.put(key, val);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Map<java.lang.String,java.util.List<java.lang.String>> getIpStrMap() {
      return this.ipStrMap;
    }

    public initial_args setIpStrMap(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.util.List<java.lang.String>> ipStrMap) {
      this.ipStrMap = ipStrMap;
      return this;
    }

    public void unsetIpStrMap() {
      this.ipStrMap = null;
    }

    /** Returns true if field ipStrMap is set (has been assigned a value) and false otherwise */
    public boolean isSetIpStrMap() {
      return this.ipStrMap != null;
    }

    public void setIpStrMapIsSet(boolean value) {
      if (!value) {
        this.ipStrMap = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case TABLE_NAME:
        if (value == null) {
          unsetTableName();
        } else {
          setTableName((java.lang.String)value);
        }
        break;

      case IP_STR_MAP:
        if (value == null) {
          unsetIpStrMap();
        } else {
          setIpStrMap((java.util.Map<java.lang.String,java.util.List<java.lang.String>>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case TABLE_NAME:
        return getTableName();

      case IP_STR_MAP:
        return getIpStrMap();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case TABLE_NAME:
        return isSetTableName();
      case IP_STR_MAP:
        return isSetIpStrMap();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof initial_args)
        return this.equals((initial_args)that);
      return false;
    }

    public boolean equals(initial_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_tableName = true && this.isSetTableName();
      boolean that_present_tableName = true && that.isSetTableName();
      if (this_present_tableName || that_present_tableName) {
        if (!(this_present_tableName && that_present_tableName))
          return false;
        if (!this.tableName.equals(that.tableName))
          return false;
      }

      boolean this_present_ipStrMap = true && this.isSetIpStrMap();
      boolean that_present_ipStrMap = true && that.isSetIpStrMap();
      if (this_present_ipStrMap || that_present_ipStrMap) {
        if (!(this_present_ipStrMap && that_present_ipStrMap))
          return false;
        if (!this.ipStrMap.equals(that.ipStrMap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetTableName()) ? 131071 : 524287);
      if (isSetTableName())
        hashCode = hashCode * 8191 + tableName.hashCode();

      hashCode = hashCode * 8191 + ((isSetIpStrMap()) ? 131071 : 524287);
      if (isSetIpStrMap())
        hashCode = hashCode * 8191 + ipStrMap.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(initial_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetTableName(), other.isSetTableName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTableName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableName, other.tableName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetIpStrMap(), other.isSetIpStrMap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIpStrMap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ipStrMap, other.ipStrMap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("initial_args(");
      boolean first = true;

      sb.append("tableName:");
      if (this.tableName == null) {
        sb.append("null");
      } else {
        sb.append(this.tableName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ipStrMap:");
      if (this.ipStrMap == null) {
        sb.append("null");
      } else {
        sb.append(this.ipStrMap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class initial_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public initial_argsStandardScheme getScheme() {
        return new initial_argsStandardScheme();
      }
    }

    private static class initial_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<initial_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, initial_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TABLE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.tableName = iprot.readString();
                struct.setTableNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // IP_STR_MAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                  struct.ipStrMap = new java.util.HashMap<java.lang.String,java.util.List<java.lang.String>>(2*_map0.size);
                  @org.apache.thrift.annotation.Nullable java.lang.String _key1;
                  @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> _val2;
                  for (int _i3 = 0; _i3 < _map0.size; ++_i3)
                  {
                    _key1 = iprot.readString();
                    {
                      org.apache.thrift.protocol.TList _list4 = iprot.readListBegin();
                      _val2 = new java.util.ArrayList<java.lang.String>(_list4.size);
                      @org.apache.thrift.annotation.Nullable java.lang.String _elem5;
                      for (int _i6 = 0; _i6 < _list4.size; ++_i6)
                      {
                        _elem5 = iprot.readString();
                        _val2.add(_elem5);
                      }
                      iprot.readListEnd();
                    }
                    struct.ipStrMap.put(_key1, _val2);
                  }
                  iprot.readMapEnd();
                }
                struct.setIpStrMapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, initial_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.tableName != null) {
          oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
          oprot.writeString(struct.tableName);
          oprot.writeFieldEnd();
        }
        if (struct.ipStrMap != null) {
          oprot.writeFieldBegin(IP_STR_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, struct.ipStrMap.size()));
            for (java.util.Map.Entry<java.lang.String, java.util.List<java.lang.String>> _iter7 : struct.ipStrMap.entrySet())
            {
              oprot.writeString(_iter7.getKey());
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, _iter7.getValue().size()));
                for (java.lang.String _iter8 : _iter7.getValue())
                {
                  oprot.writeString(_iter8);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class initial_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public initial_argsTupleScheme getScheme() {
        return new initial_argsTupleScheme();
      }
    }

    private static class initial_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<initial_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, initial_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetTableName()) {
          optionals.set(0);
        }
        if (struct.isSetIpStrMap()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetTableName()) {
          oprot.writeString(struct.tableName);
        }
        if (struct.isSetIpStrMap()) {
          {
            oprot.writeI32(struct.ipStrMap.size());
            for (java.util.Map.Entry<java.lang.String, java.util.List<java.lang.String>> _iter9 : struct.ipStrMap.entrySet())
            {
              oprot.writeString(_iter9.getKey());
              {
                oprot.writeI32(_iter9.getValue().size());
                for (java.lang.String _iter10 : _iter9.getValue())
                {
                  oprot.writeString(_iter10);
                }
              }
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, initial_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.tableName = iprot.readString();
          struct.setTableNameIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TMap _map11 = iprot.readMapBegin(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST); 
            struct.ipStrMap = new java.util.HashMap<java.lang.String,java.util.List<java.lang.String>>(2*_map11.size);
            @org.apache.thrift.annotation.Nullable java.lang.String _key12;
            @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> _val13;
            for (int _i14 = 0; _i14 < _map11.size; ++_i14)
            {
              _key12 = iprot.readString();
              {
                org.apache.thrift.protocol.TList _list15 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
                _val13 = new java.util.ArrayList<java.lang.String>(_list15.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem16;
                for (int _i17 = 0; _i17 < _list15.size; ++_i17)
                {
                  _elem16 = iprot.readString();
                  _val13.add(_elem16);
                }
              }
              struct.ipStrMap.put(_key12, _val13);
            }
          }
          struct.setIpStrMapIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class initial_result implements org.apache.thrift.TBase<initial_result, initial_result._Fields>, java.io.Serializable, Cloneable, Comparable<initial_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("initial_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new initial_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new initial_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.Integer> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(initial_result.class, metaDataMap);
    }

    public initial_result() {
    }

    public initial_result(
      java.util.Map<java.lang.String,java.lang.Integer> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public initial_result(initial_result other) {
      if (other.isSetSuccess()) {
        java.util.Map<java.lang.String,java.lang.Integer> __this__success = new java.util.HashMap<java.lang.String,java.lang.Integer>(other.success);
        this.success = __this__success;
      }
    }

    @Override
    public initial_result deepCopy() {
      return new initial_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(java.lang.String key, int val) {
      if (this.success == null) {
        this.success = new java.util.HashMap<java.lang.String,java.lang.Integer>();
      }
      this.success.put(key, val);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Map<java.lang.String,java.lang.Integer> getSuccess() {
      return this.success;
    }

    public initial_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.Integer> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.Map<java.lang.String,java.lang.Integer>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof initial_result)
        return this.equals((initial_result)that);
      return false;
    }

    public boolean equals(initial_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(initial_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("initial_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class initial_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public initial_resultStandardScheme getScheme() {
        return new initial_resultStandardScheme();
      }
    }

    private static class initial_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<initial_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, initial_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map18 = iprot.readMapBegin();
                  struct.success = new java.util.HashMap<java.lang.String,java.lang.Integer>(2*_map18.size);
                  @org.apache.thrift.annotation.Nullable java.lang.String _key19;
                  int _val20;
                  for (int _i21 = 0; _i21 < _map18.size; ++_i21)
                  {
                    _key19 = iprot.readString();
                    _val20 = iprot.readI32();
                    struct.success.put(_key19, _val20);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, initial_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I32, struct.success.size()));
            for (java.util.Map.Entry<java.lang.String, java.lang.Integer> _iter22 : struct.success.entrySet())
            {
              oprot.writeString(_iter22.getKey());
              oprot.writeI32(_iter22.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class initial_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public initial_resultTupleScheme getScheme() {
        return new initial_resultTupleScheme();
      }
    }

    private static class initial_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<initial_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, initial_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (java.util.Map.Entry<java.lang.String, java.lang.Integer> _iter23 : struct.success.entrySet())
            {
              oprot.writeString(_iter23.getKey());
              oprot.writeI32(_iter23.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, initial_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map24 = iprot.readMapBegin(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I32); 
            struct.success = new java.util.HashMap<java.lang.String,java.lang.Integer>(2*_map24.size);
            @org.apache.thrift.annotation.Nullable java.lang.String _key25;
            int _val26;
            for (int _i27 = 0; _i27 < _map24.size; ++_i27)
            {
              _key25 = iprot.readString();
              _val26 = iprot.readI32();
              struct.success.put(_key25, _val26);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class getReplayIntervals_args implements org.apache.thrift.TBase<getReplayIntervals_args, getReplayIntervals_args._Fields>, java.io.Serializable, Cloneable, Comparable<getReplayIntervals_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getReplayIntervals_args");

    private static final org.apache.thrift.protocol.TField VAR_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("varName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField WINDOW_FIELD_DESC = new org.apache.thrift.protocol.TField("window", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField HEAD_TAIL_MARKER_FIELD_DESC = new org.apache.thrift.protocol.TField("headTailMarker", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getReplayIntervals_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getReplayIntervals_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String varName; // required
    public long window; // required
    public int headTailMarker; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VAR_NAME((short)1, "varName"),
      WINDOW((short)2, "window"),
      HEAD_TAIL_MARKER((short)3, "headTailMarker");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VAR_NAME
            return VAR_NAME;
          case 2: // WINDOW
            return WINDOW;
          case 3: // HEAD_TAIL_MARKER
            return HEAD_TAIL_MARKER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __WINDOW_ISSET_ID = 0;
    private static final int __HEADTAILMARKER_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VAR_NAME, new org.apache.thrift.meta_data.FieldMetaData("varName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.WINDOW, new org.apache.thrift.meta_data.FieldMetaData("window", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.HEAD_TAIL_MARKER, new org.apache.thrift.meta_data.FieldMetaData("headTailMarker", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getReplayIntervals_args.class, metaDataMap);
    }

    public getReplayIntervals_args() {
    }

    public getReplayIntervals_args(
      java.lang.String varName,
      long window,
      int headTailMarker)
    {
      this();
      this.varName = varName;
      this.window = window;
      setWindowIsSet(true);
      this.headTailMarker = headTailMarker;
      setHeadTailMarkerIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getReplayIntervals_args(getReplayIntervals_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetVarName()) {
        this.varName = other.varName;
      }
      this.window = other.window;
      this.headTailMarker = other.headTailMarker;
    }

    @Override
    public getReplayIntervals_args deepCopy() {
      return new getReplayIntervals_args(this);
    }

    @Override
    public void clear() {
      this.varName = null;
      setWindowIsSet(false);
      this.window = 0;
      setHeadTailMarkerIsSet(false);
      this.headTailMarker = 0;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getVarName() {
      return this.varName;
    }

    public getReplayIntervals_args setVarName(@org.apache.thrift.annotation.Nullable java.lang.String varName) {
      this.varName = varName;
      return this;
    }

    public void unsetVarName() {
      this.varName = null;
    }

    /** Returns true if field varName is set (has been assigned a value) and false otherwise */
    public boolean isSetVarName() {
      return this.varName != null;
    }

    public void setVarNameIsSet(boolean value) {
      if (!value) {
        this.varName = null;
      }
    }

    public long getWindow() {
      return this.window;
    }

    public getReplayIntervals_args setWindow(long window) {
      this.window = window;
      setWindowIsSet(true);
      return this;
    }

    public void unsetWindow() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __WINDOW_ISSET_ID);
    }

    /** Returns true if field window is set (has been assigned a value) and false otherwise */
    public boolean isSetWindow() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __WINDOW_ISSET_ID);
    }

    public void setWindowIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __WINDOW_ISSET_ID, value);
    }

    public int getHeadTailMarker() {
      return this.headTailMarker;
    }

    public getReplayIntervals_args setHeadTailMarker(int headTailMarker) {
      this.headTailMarker = headTailMarker;
      setHeadTailMarkerIsSet(true);
      return this;
    }

    public void unsetHeadTailMarker() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HEADTAILMARKER_ISSET_ID);
    }

    /** Returns true if field headTailMarker is set (has been assigned a value) and false otherwise */
    public boolean isSetHeadTailMarker() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HEADTAILMARKER_ISSET_ID);
    }

    public void setHeadTailMarkerIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HEADTAILMARKER_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case VAR_NAME:
        if (value == null) {
          unsetVarName();
        } else {
          setVarName((java.lang.String)value);
        }
        break;

      case WINDOW:
        if (value == null) {
          unsetWindow();
        } else {
          setWindow((java.lang.Long)value);
        }
        break;

      case HEAD_TAIL_MARKER:
        if (value == null) {
          unsetHeadTailMarker();
        } else {
          setHeadTailMarker((java.lang.Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case VAR_NAME:
        return getVarName();

      case WINDOW:
        return getWindow();

      case HEAD_TAIL_MARKER:
        return getHeadTailMarker();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case VAR_NAME:
        return isSetVarName();
      case WINDOW:
        return isSetWindow();
      case HEAD_TAIL_MARKER:
        return isSetHeadTailMarker();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof getReplayIntervals_args)
        return this.equals((getReplayIntervals_args)that);
      return false;
    }

    public boolean equals(getReplayIntervals_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_varName = true && this.isSetVarName();
      boolean that_present_varName = true && that.isSetVarName();
      if (this_present_varName || that_present_varName) {
        if (!(this_present_varName && that_present_varName))
          return false;
        if (!this.varName.equals(that.varName))
          return false;
      }

      boolean this_present_window = true;
      boolean that_present_window = true;
      if (this_present_window || that_present_window) {
        if (!(this_present_window && that_present_window))
          return false;
        if (this.window != that.window)
          return false;
      }

      boolean this_present_headTailMarker = true;
      boolean that_present_headTailMarker = true;
      if (this_present_headTailMarker || that_present_headTailMarker) {
        if (!(this_present_headTailMarker && that_present_headTailMarker))
          return false;
        if (this.headTailMarker != that.headTailMarker)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetVarName()) ? 131071 : 524287);
      if (isSetVarName())
        hashCode = hashCode * 8191 + varName.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(window);

      hashCode = hashCode * 8191 + headTailMarker;

      return hashCode;
    }

    @Override
    public int compareTo(getReplayIntervals_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetVarName(), other.isSetVarName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVarName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.varName, other.varName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetWindow(), other.isSetWindow());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWindow()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.window, other.window);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetHeadTailMarker(), other.isSetHeadTailMarker());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHeadTailMarker()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.headTailMarker, other.headTailMarker);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getReplayIntervals_args(");
      boolean first = true;

      sb.append("varName:");
      if (this.varName == null) {
        sb.append("null");
      } else {
        sb.append(this.varName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("window:");
      sb.append(this.window);
      first = false;
      if (!first) sb.append(", ");
      sb.append("headTailMarker:");
      sb.append(this.headTailMarker);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getReplayIntervals_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getReplayIntervals_argsStandardScheme getScheme() {
        return new getReplayIntervals_argsStandardScheme();
      }
    }

    private static class getReplayIntervals_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getReplayIntervals_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, getReplayIntervals_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VAR_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.varName = iprot.readString();
                struct.setVarNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // WINDOW
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.window = iprot.readI64();
                struct.setWindowIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // HEAD_TAIL_MARKER
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.headTailMarker = iprot.readI32();
                struct.setHeadTailMarkerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, getReplayIntervals_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.varName != null) {
          oprot.writeFieldBegin(VAR_NAME_FIELD_DESC);
          oprot.writeString(struct.varName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(WINDOW_FIELD_DESC);
        oprot.writeI64(struct.window);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(HEAD_TAIL_MARKER_FIELD_DESC);
        oprot.writeI32(struct.headTailMarker);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getReplayIntervals_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getReplayIntervals_argsTupleScheme getScheme() {
        return new getReplayIntervals_argsTupleScheme();
      }
    }

    private static class getReplayIntervals_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getReplayIntervals_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getReplayIntervals_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetVarName()) {
          optionals.set(0);
        }
        if (struct.isSetWindow()) {
          optionals.set(1);
        }
        if (struct.isSetHeadTailMarker()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetVarName()) {
          oprot.writeString(struct.varName);
        }
        if (struct.isSetWindow()) {
          oprot.writeI64(struct.window);
        }
        if (struct.isSetHeadTailMarker()) {
          oprot.writeI32(struct.headTailMarker);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getReplayIntervals_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.varName = iprot.readString();
          struct.setVarNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.window = iprot.readI64();
          struct.setWindowIsSet(true);
        }
        if (incoming.get(2)) {
          struct.headTailMarker = iprot.readI32();
          struct.setHeadTailMarkerIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class getReplayIntervals_result implements org.apache.thrift.TBase<getReplayIntervals_result, getReplayIntervals_result._Fields>, java.io.Serializable, Cloneable, Comparable<getReplayIntervals_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getReplayIntervals_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getReplayIntervals_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getReplayIntervals_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getReplayIntervals_result.class, metaDataMap);
    }

    public getReplayIntervals_result() {
    }

    public getReplayIntervals_result(
      java.nio.ByteBuffer success)
    {
      this();
      this.success = org.apache.thrift.TBaseHelper.copyBinary(success);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getReplayIntervals_result(getReplayIntervals_result other) {
      if (other.isSetSuccess()) {
        this.success = org.apache.thrift.TBaseHelper.copyBinary(other.success);
      }
    }

    @Override
    public getReplayIntervals_result deepCopy() {
      return new getReplayIntervals_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public byte[] getSuccess() {
      setSuccess(org.apache.thrift.TBaseHelper.rightSize(success));
      return success == null ? null : success.array();
    }

    public java.nio.ByteBuffer bufferForSuccess() {
      return org.apache.thrift.TBaseHelper.copyBinary(success);
    }

    public getReplayIntervals_result setSuccess(byte[] success) {
      this.success = success == null ? (java.nio.ByteBuffer)null     : java.nio.ByteBuffer.wrap(success.clone());
      return this;
    }

    public getReplayIntervals_result setSuccess(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer success) {
      this.success = org.apache.thrift.TBaseHelper.copyBinary(success);
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          if (value instanceof byte[]) {
            setSuccess((byte[])value);
          } else {
            setSuccess((java.nio.ByteBuffer)value);
          }
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof getReplayIntervals_result)
        return this.equals((getReplayIntervals_result)that);
      return false;
    }

    public boolean equals(getReplayIntervals_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getReplayIntervals_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getReplayIntervals_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.success, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getReplayIntervals_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getReplayIntervals_resultStandardScheme getScheme() {
        return new getReplayIntervals_resultStandardScheme();
      }
    }

    private static class getReplayIntervals_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getReplayIntervals_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, getReplayIntervals_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readBinary();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, getReplayIntervals_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBinary(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getReplayIntervals_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getReplayIntervals_resultTupleScheme getScheme() {
        return new getReplayIntervals_resultTupleScheme();
      }
    }

    private static class getReplayIntervals_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getReplayIntervals_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getReplayIntervals_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBinary(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getReplayIntervals_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBinary();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class getBF4EQJoin_args implements org.apache.thrift.TBase<getBF4EQJoin_args, getBF4EQJoin_args._Fields>, java.io.Serializable, Cloneable, Comparable<getBF4EQJoin_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBF4EQJoin_args");

    private static final org.apache.thrift.protocol.TField VAR_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("varName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField WINDOW_FIELD_DESC = new org.apache.thrift.protocol.TField("window", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField DP_STR_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("dpStrMap", org.apache.thrift.protocol.TType.MAP, (short)3);
    private static final org.apache.thrift.protocol.TField KEY_NUM_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("keyNumMap", org.apache.thrift.protocol.TType.MAP, (short)4);
    private static final org.apache.thrift.protocol.TField SF_BUFFER_FIELD_DESC = new org.apache.thrift.protocol.TField("sfBuffer", org.apache.thrift.protocol.TType.STRING, (short)5);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getBF4EQJoin_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getBF4EQJoin_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String varName; // required
    public long window; // required
    public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.util.List<java.lang.String>> dpStrMap; // required
    public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.Integer> keyNumMap; // required
    public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer sfBuffer; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VAR_NAME((short)1, "varName"),
      WINDOW((short)2, "window"),
      DP_STR_MAP((short)3, "dpStrMap"),
      KEY_NUM_MAP((short)4, "keyNumMap"),
      SF_BUFFER((short)5, "sfBuffer");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VAR_NAME
            return VAR_NAME;
          case 2: // WINDOW
            return WINDOW;
          case 3: // DP_STR_MAP
            return DP_STR_MAP;
          case 4: // KEY_NUM_MAP
            return KEY_NUM_MAP;
          case 5: // SF_BUFFER
            return SF_BUFFER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __WINDOW_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VAR_NAME, new org.apache.thrift.meta_data.FieldMetaData("varName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.WINDOW, new org.apache.thrift.meta_data.FieldMetaData("window", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.DP_STR_MAP, new org.apache.thrift.meta_data.FieldMetaData("dpStrMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
      tmpMap.put(_Fields.KEY_NUM_MAP, new org.apache.thrift.meta_data.FieldMetaData("keyNumMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      tmpMap.put(_Fields.SF_BUFFER, new org.apache.thrift.meta_data.FieldMetaData("sfBuffer", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBF4EQJoin_args.class, metaDataMap);
    }

    public getBF4EQJoin_args() {
    }

    public getBF4EQJoin_args(
      java.lang.String varName,
      long window,
      java.util.Map<java.lang.String,java.util.List<java.lang.String>> dpStrMap,
      java.util.Map<java.lang.String,java.lang.Integer> keyNumMap,
      java.nio.ByteBuffer sfBuffer)
    {
      this();
      this.varName = varName;
      this.window = window;
      setWindowIsSet(true);
      this.dpStrMap = dpStrMap;
      this.keyNumMap = keyNumMap;
      this.sfBuffer = org.apache.thrift.TBaseHelper.copyBinary(sfBuffer);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBF4EQJoin_args(getBF4EQJoin_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetVarName()) {
        this.varName = other.varName;
      }
      this.window = other.window;
      if (other.isSetDpStrMap()) {
        java.util.Map<java.lang.String,java.util.List<java.lang.String>> __this__dpStrMap = new java.util.HashMap<java.lang.String,java.util.List<java.lang.String>>(other.dpStrMap.size());
        for (java.util.Map.Entry<java.lang.String, java.util.List<java.lang.String>> other_element : other.dpStrMap.entrySet()) {

          java.lang.String other_element_key = other_element.getKey();
          java.util.List<java.lang.String> other_element_value = other_element.getValue();

          java.lang.String __this__dpStrMap_copy_key = other_element_key;

          java.util.List<java.lang.String> __this__dpStrMap_copy_value = new java.util.ArrayList<java.lang.String>(other_element_value);

          __this__dpStrMap.put(__this__dpStrMap_copy_key, __this__dpStrMap_copy_value);
        }
        this.dpStrMap = __this__dpStrMap;
      }
      if (other.isSetKeyNumMap()) {
        java.util.Map<java.lang.String,java.lang.Integer> __this__keyNumMap = new java.util.HashMap<java.lang.String,java.lang.Integer>(other.keyNumMap);
        this.keyNumMap = __this__keyNumMap;
      }
      if (other.isSetSfBuffer()) {
        this.sfBuffer = org.apache.thrift.TBaseHelper.copyBinary(other.sfBuffer);
      }
    }

    @Override
    public getBF4EQJoin_args deepCopy() {
      return new getBF4EQJoin_args(this);
    }

    @Override
    public void clear() {
      this.varName = null;
      setWindowIsSet(false);
      this.window = 0;
      this.dpStrMap = null;
      this.keyNumMap = null;
      this.sfBuffer = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getVarName() {
      return this.varName;
    }

    public getBF4EQJoin_args setVarName(@org.apache.thrift.annotation.Nullable java.lang.String varName) {
      this.varName = varName;
      return this;
    }

    public void unsetVarName() {
      this.varName = null;
    }

    /** Returns true if field varName is set (has been assigned a value) and false otherwise */
    public boolean isSetVarName() {
      return this.varName != null;
    }

    public void setVarNameIsSet(boolean value) {
      if (!value) {
        this.varName = null;
      }
    }

    public long getWindow() {
      return this.window;
    }

    public getBF4EQJoin_args setWindow(long window) {
      this.window = window;
      setWindowIsSet(true);
      return this;
    }

    public void unsetWindow() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __WINDOW_ISSET_ID);
    }

    /** Returns true if field window is set (has been assigned a value) and false otherwise */
    public boolean isSetWindow() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __WINDOW_ISSET_ID);
    }

    public void setWindowIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __WINDOW_ISSET_ID, value);
    }

    public int getDpStrMapSize() {
      return (this.dpStrMap == null) ? 0 : this.dpStrMap.size();
    }

    public void putToDpStrMap(java.lang.String key, java.util.List<java.lang.String> val) {
      if (this.dpStrMap == null) {
        this.dpStrMap = new java.util.HashMap<java.lang.String,java.util.List<java.lang.String>>();
      }
      this.dpStrMap.put(key, val);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Map<java.lang.String,java.util.List<java.lang.String>> getDpStrMap() {
      return this.dpStrMap;
    }

    public getBF4EQJoin_args setDpStrMap(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.util.List<java.lang.String>> dpStrMap) {
      this.dpStrMap = dpStrMap;
      return this;
    }

    public void unsetDpStrMap() {
      this.dpStrMap = null;
    }

    /** Returns true if field dpStrMap is set (has been assigned a value) and false otherwise */
    public boolean isSetDpStrMap() {
      return this.dpStrMap != null;
    }

    public void setDpStrMapIsSet(boolean value) {
      if (!value) {
        this.dpStrMap = null;
      }
    }

    public int getKeyNumMapSize() {
      return (this.keyNumMap == null) ? 0 : this.keyNumMap.size();
    }

    public void putToKeyNumMap(java.lang.String key, int val) {
      if (this.keyNumMap == null) {
        this.keyNumMap = new java.util.HashMap<java.lang.String,java.lang.Integer>();
      }
      this.keyNumMap.put(key, val);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Map<java.lang.String,java.lang.Integer> getKeyNumMap() {
      return this.keyNumMap;
    }

    public getBF4EQJoin_args setKeyNumMap(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.Integer> keyNumMap) {
      this.keyNumMap = keyNumMap;
      return this;
    }

    public void unsetKeyNumMap() {
      this.keyNumMap = null;
    }

    /** Returns true if field keyNumMap is set (has been assigned a value) and false otherwise */
    public boolean isSetKeyNumMap() {
      return this.keyNumMap != null;
    }

    public void setKeyNumMapIsSet(boolean value) {
      if (!value) {
        this.keyNumMap = null;
      }
    }

    public byte[] getSfBuffer() {
      setSfBuffer(org.apache.thrift.TBaseHelper.rightSize(sfBuffer));
      return sfBuffer == null ? null : sfBuffer.array();
    }

    public java.nio.ByteBuffer bufferForSfBuffer() {
      return org.apache.thrift.TBaseHelper.copyBinary(sfBuffer);
    }

    public getBF4EQJoin_args setSfBuffer(byte[] sfBuffer) {
      this.sfBuffer = sfBuffer == null ? (java.nio.ByteBuffer)null     : java.nio.ByteBuffer.wrap(sfBuffer.clone());
      return this;
    }

    public getBF4EQJoin_args setSfBuffer(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer sfBuffer) {
      this.sfBuffer = org.apache.thrift.TBaseHelper.copyBinary(sfBuffer);
      return this;
    }

    public void unsetSfBuffer() {
      this.sfBuffer = null;
    }

    /** Returns true if field sfBuffer is set (has been assigned a value) and false otherwise */
    public boolean isSetSfBuffer() {
      return this.sfBuffer != null;
    }

    public void setSfBufferIsSet(boolean value) {
      if (!value) {
        this.sfBuffer = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case VAR_NAME:
        if (value == null) {
          unsetVarName();
        } else {
          setVarName((java.lang.String)value);
        }
        break;

      case WINDOW:
        if (value == null) {
          unsetWindow();
        } else {
          setWindow((java.lang.Long)value);
        }
        break;

      case DP_STR_MAP:
        if (value == null) {
          unsetDpStrMap();
        } else {
          setDpStrMap((java.util.Map<java.lang.String,java.util.List<java.lang.String>>)value);
        }
        break;

      case KEY_NUM_MAP:
        if (value == null) {
          unsetKeyNumMap();
        } else {
          setKeyNumMap((java.util.Map<java.lang.String,java.lang.Integer>)value);
        }
        break;

      case SF_BUFFER:
        if (value == null) {
          unsetSfBuffer();
        } else {
          if (value instanceof byte[]) {
            setSfBuffer((byte[])value);
          } else {
            setSfBuffer((java.nio.ByteBuffer)value);
          }
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case VAR_NAME:
        return getVarName();

      case WINDOW:
        return getWindow();

      case DP_STR_MAP:
        return getDpStrMap();

      case KEY_NUM_MAP:
        return getKeyNumMap();

      case SF_BUFFER:
        return getSfBuffer();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case VAR_NAME:
        return isSetVarName();
      case WINDOW:
        return isSetWindow();
      case DP_STR_MAP:
        return isSetDpStrMap();
      case KEY_NUM_MAP:
        return isSetKeyNumMap();
      case SF_BUFFER:
        return isSetSfBuffer();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof getBF4EQJoin_args)
        return this.equals((getBF4EQJoin_args)that);
      return false;
    }

    public boolean equals(getBF4EQJoin_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_varName = true && this.isSetVarName();
      boolean that_present_varName = true && that.isSetVarName();
      if (this_present_varName || that_present_varName) {
        if (!(this_present_varName && that_present_varName))
          return false;
        if (!this.varName.equals(that.varName))
          return false;
      }

      boolean this_present_window = true;
      boolean that_present_window = true;
      if (this_present_window || that_present_window) {
        if (!(this_present_window && that_present_window))
          return false;
        if (this.window != that.window)
          return false;
      }

      boolean this_present_dpStrMap = true && this.isSetDpStrMap();
      boolean that_present_dpStrMap = true && that.isSetDpStrMap();
      if (this_present_dpStrMap || that_present_dpStrMap) {
        if (!(this_present_dpStrMap && that_present_dpStrMap))
          return false;
        if (!this.dpStrMap.equals(that.dpStrMap))
          return false;
      }

      boolean this_present_keyNumMap = true && this.isSetKeyNumMap();
      boolean that_present_keyNumMap = true && that.isSetKeyNumMap();
      if (this_present_keyNumMap || that_present_keyNumMap) {
        if (!(this_present_keyNumMap && that_present_keyNumMap))
          return false;
        if (!this.keyNumMap.equals(that.keyNumMap))
          return false;
      }

      boolean this_present_sfBuffer = true && this.isSetSfBuffer();
      boolean that_present_sfBuffer = true && that.isSetSfBuffer();
      if (this_present_sfBuffer || that_present_sfBuffer) {
        if (!(this_present_sfBuffer && that_present_sfBuffer))
          return false;
        if (!this.sfBuffer.equals(that.sfBuffer))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetVarName()) ? 131071 : 524287);
      if (isSetVarName())
        hashCode = hashCode * 8191 + varName.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(window);

      hashCode = hashCode * 8191 + ((isSetDpStrMap()) ? 131071 : 524287);
      if (isSetDpStrMap())
        hashCode = hashCode * 8191 + dpStrMap.hashCode();

      hashCode = hashCode * 8191 + ((isSetKeyNumMap()) ? 131071 : 524287);
      if (isSetKeyNumMap())
        hashCode = hashCode * 8191 + keyNumMap.hashCode();

      hashCode = hashCode * 8191 + ((isSetSfBuffer()) ? 131071 : 524287);
      if (isSetSfBuffer())
        hashCode = hashCode * 8191 + sfBuffer.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getBF4EQJoin_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetVarName(), other.isSetVarName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVarName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.varName, other.varName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetWindow(), other.isSetWindow());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWindow()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.window, other.window);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetDpStrMap(), other.isSetDpStrMap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDpStrMap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dpStrMap, other.dpStrMap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetKeyNumMap(), other.isSetKeyNumMap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKeyNumMap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keyNumMap, other.keyNumMap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetSfBuffer(), other.isSetSfBuffer());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSfBuffer()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sfBuffer, other.sfBuffer);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getBF4EQJoin_args(");
      boolean first = true;

      sb.append("varName:");
      if (this.varName == null) {
        sb.append("null");
      } else {
        sb.append(this.varName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("window:");
      sb.append(this.window);
      first = false;
      if (!first) sb.append(", ");
      sb.append("dpStrMap:");
      if (this.dpStrMap == null) {
        sb.append("null");
      } else {
        sb.append(this.dpStrMap);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("keyNumMap:");
      if (this.keyNumMap == null) {
        sb.append("null");
      } else {
        sb.append(this.keyNumMap);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sfBuffer:");
      if (this.sfBuffer == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.sfBuffer, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBF4EQJoin_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getBF4EQJoin_argsStandardScheme getScheme() {
        return new getBF4EQJoin_argsStandardScheme();
      }
    }

    private static class getBF4EQJoin_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getBF4EQJoin_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, getBF4EQJoin_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VAR_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.varName = iprot.readString();
                struct.setVarNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // WINDOW
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.window = iprot.readI64();
                struct.setWindowIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // DP_STR_MAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map28 = iprot.readMapBegin();
                  struct.dpStrMap = new java.util.HashMap<java.lang.String,java.util.List<java.lang.String>>(2*_map28.size);
                  @org.apache.thrift.annotation.Nullable java.lang.String _key29;
                  @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> _val30;
                  for (int _i31 = 0; _i31 < _map28.size; ++_i31)
                  {
                    _key29 = iprot.readString();
                    {
                      org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                      _val30 = new java.util.ArrayList<java.lang.String>(_list32.size);
                      @org.apache.thrift.annotation.Nullable java.lang.String _elem33;
                      for (int _i34 = 0; _i34 < _list32.size; ++_i34)
                      {
                        _elem33 = iprot.readString();
                        _val30.add(_elem33);
                      }
                      iprot.readListEnd();
                    }
                    struct.dpStrMap.put(_key29, _val30);
                  }
                  iprot.readMapEnd();
                }
                struct.setDpStrMapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // KEY_NUM_MAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map35 = iprot.readMapBegin();
                  struct.keyNumMap = new java.util.HashMap<java.lang.String,java.lang.Integer>(2*_map35.size);
                  @org.apache.thrift.annotation.Nullable java.lang.String _key36;
                  int _val37;
                  for (int _i38 = 0; _i38 < _map35.size; ++_i38)
                  {
                    _key36 = iprot.readString();
                    _val37 = iprot.readI32();
                    struct.keyNumMap.put(_key36, _val37);
                  }
                  iprot.readMapEnd();
                }
                struct.setKeyNumMapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // SF_BUFFER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sfBuffer = iprot.readBinary();
                struct.setSfBufferIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, getBF4EQJoin_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.varName != null) {
          oprot.writeFieldBegin(VAR_NAME_FIELD_DESC);
          oprot.writeString(struct.varName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(WINDOW_FIELD_DESC);
        oprot.writeI64(struct.window);
        oprot.writeFieldEnd();
        if (struct.dpStrMap != null) {
          oprot.writeFieldBegin(DP_STR_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, struct.dpStrMap.size()));
            for (java.util.Map.Entry<java.lang.String, java.util.List<java.lang.String>> _iter39 : struct.dpStrMap.entrySet())
            {
              oprot.writeString(_iter39.getKey());
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, _iter39.getValue().size()));
                for (java.lang.String _iter40 : _iter39.getValue())
                {
                  oprot.writeString(_iter40);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.keyNumMap != null) {
          oprot.writeFieldBegin(KEY_NUM_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I32, struct.keyNumMap.size()));
            for (java.util.Map.Entry<java.lang.String, java.lang.Integer> _iter41 : struct.keyNumMap.entrySet())
            {
              oprot.writeString(_iter41.getKey());
              oprot.writeI32(_iter41.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.sfBuffer != null) {
          oprot.writeFieldBegin(SF_BUFFER_FIELD_DESC);
          oprot.writeBinary(struct.sfBuffer);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBF4EQJoin_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getBF4EQJoin_argsTupleScheme getScheme() {
        return new getBF4EQJoin_argsTupleScheme();
      }
    }

    private static class getBF4EQJoin_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getBF4EQJoin_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBF4EQJoin_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetVarName()) {
          optionals.set(0);
        }
        if (struct.isSetWindow()) {
          optionals.set(1);
        }
        if (struct.isSetDpStrMap()) {
          optionals.set(2);
        }
        if (struct.isSetKeyNumMap()) {
          optionals.set(3);
        }
        if (struct.isSetSfBuffer()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetVarName()) {
          oprot.writeString(struct.varName);
        }
        if (struct.isSetWindow()) {
          oprot.writeI64(struct.window);
        }
        if (struct.isSetDpStrMap()) {
          {
            oprot.writeI32(struct.dpStrMap.size());
            for (java.util.Map.Entry<java.lang.String, java.util.List<java.lang.String>> _iter42 : struct.dpStrMap.entrySet())
            {
              oprot.writeString(_iter42.getKey());
              {
                oprot.writeI32(_iter42.getValue().size());
                for (java.lang.String _iter43 : _iter42.getValue())
                {
                  oprot.writeString(_iter43);
                }
              }
            }
          }
        }
        if (struct.isSetKeyNumMap()) {
          {
            oprot.writeI32(struct.keyNumMap.size());
            for (java.util.Map.Entry<java.lang.String, java.lang.Integer> _iter44 : struct.keyNumMap.entrySet())
            {
              oprot.writeString(_iter44.getKey());
              oprot.writeI32(_iter44.getValue());
            }
          }
        }
        if (struct.isSetSfBuffer()) {
          oprot.writeBinary(struct.sfBuffer);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBF4EQJoin_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.varName = iprot.readString();
          struct.setVarNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.window = iprot.readI64();
          struct.setWindowIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TMap _map45 = iprot.readMapBegin(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST); 
            struct.dpStrMap = new java.util.HashMap<java.lang.String,java.util.List<java.lang.String>>(2*_map45.size);
            @org.apache.thrift.annotation.Nullable java.lang.String _key46;
            @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> _val47;
            for (int _i48 = 0; _i48 < _map45.size; ++_i48)
            {
              _key46 = iprot.readString();
              {
                org.apache.thrift.protocol.TList _list49 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
                _val47 = new java.util.ArrayList<java.lang.String>(_list49.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem50;
                for (int _i51 = 0; _i51 < _list49.size; ++_i51)
                {
                  _elem50 = iprot.readString();
                  _val47.add(_elem50);
                }
              }
              struct.dpStrMap.put(_key46, _val47);
            }
          }
          struct.setDpStrMapIsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TMap _map52 = iprot.readMapBegin(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I32); 
            struct.keyNumMap = new java.util.HashMap<java.lang.String,java.lang.Integer>(2*_map52.size);
            @org.apache.thrift.annotation.Nullable java.lang.String _key53;
            int _val54;
            for (int _i55 = 0; _i55 < _map52.size; ++_i55)
            {
              _key53 = iprot.readString();
              _val54 = iprot.readI32();
              struct.keyNumMap.put(_key53, _val54);
            }
          }
          struct.setKeyNumMapIsSet(true);
        }
        if (incoming.get(4)) {
          struct.sfBuffer = iprot.readBinary();
          struct.setSfBufferIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class getBF4EQJoin_result implements org.apache.thrift.TBase<getBF4EQJoin_result, getBF4EQJoin_result._Fields>, java.io.Serializable, Cloneable, Comparable<getBF4EQJoin_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBF4EQJoin_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getBF4EQJoin_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getBF4EQJoin_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.nio.ByteBuffer> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING              , true))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBF4EQJoin_result.class, metaDataMap);
    }

    public getBF4EQJoin_result() {
    }

    public getBF4EQJoin_result(
      java.util.Map<java.lang.String,java.nio.ByteBuffer> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBF4EQJoin_result(getBF4EQJoin_result other) {
      if (other.isSetSuccess()) {
        java.util.Map<java.lang.String,java.nio.ByteBuffer> __this__success = new java.util.HashMap<java.lang.String,java.nio.ByteBuffer>(other.success);
        this.success = __this__success;
      }
    }

    @Override
    public getBF4EQJoin_result deepCopy() {
      return new getBF4EQJoin_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(java.lang.String key, java.nio.ByteBuffer val) {
      if (this.success == null) {
        this.success = new java.util.HashMap<java.lang.String,java.nio.ByteBuffer>();
      }
      this.success.put(key, val);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Map<java.lang.String,java.nio.ByteBuffer> getSuccess() {
      return this.success;
    }

    public getBF4EQJoin_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.nio.ByteBuffer> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.Map<java.lang.String,java.nio.ByteBuffer>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof getBF4EQJoin_result)
        return this.equals((getBF4EQJoin_result)that);
      return false;
    }

    public boolean equals(getBF4EQJoin_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getBF4EQJoin_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getBF4EQJoin_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBF4EQJoin_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getBF4EQJoin_resultStandardScheme getScheme() {
        return new getBF4EQJoin_resultStandardScheme();
      }
    }

    private static class getBF4EQJoin_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getBF4EQJoin_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, getBF4EQJoin_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map56 = iprot.readMapBegin();
                  struct.success = new java.util.HashMap<java.lang.String,java.nio.ByteBuffer>(2*_map56.size);
                  @org.apache.thrift.annotation.Nullable java.lang.String _key57;
                  @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _val58;
                  for (int _i59 = 0; _i59 < _map56.size; ++_i59)
                  {
                    _key57 = iprot.readString();
                    _val58 = iprot.readBinary();
                    struct.success.put(_key57, _val58);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, getBF4EQJoin_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (java.util.Map.Entry<java.lang.String, java.nio.ByteBuffer> _iter60 : struct.success.entrySet())
            {
              oprot.writeString(_iter60.getKey());
              oprot.writeBinary(_iter60.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBF4EQJoin_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getBF4EQJoin_resultTupleScheme getScheme() {
        return new getBF4EQJoin_resultTupleScheme();
      }
    }

    private static class getBF4EQJoin_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getBF4EQJoin_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBF4EQJoin_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (java.util.Map.Entry<java.lang.String, java.nio.ByteBuffer> _iter61 : struct.success.entrySet())
            {
              oprot.writeString(_iter61.getKey());
              oprot.writeBinary(_iter61.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBF4EQJoin_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map62 = iprot.readMapBegin(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING); 
            struct.success = new java.util.HashMap<java.lang.String,java.nio.ByteBuffer>(2*_map62.size);
            @org.apache.thrift.annotation.Nullable java.lang.String _key63;
            @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _val64;
            for (int _i65 = 0; _i65 < _map62.size; ++_i65)
            {
              _key63 = iprot.readString();
              _val64 = iprot.readBinary();
              struct.success.put(_key63, _val64);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class getHashTable4NEQJoin_args implements org.apache.thrift.TBase<getHashTable4NEQJoin_args, getHashTable4NEQJoin_args._Fields>, java.io.Serializable, Cloneable, Comparable<getHashTable4NEQJoin_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getHashTable4NEQJoin_args");

    private static final org.apache.thrift.protocol.TField VAR_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("varName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField WINDOW_FIELD_DESC = new org.apache.thrift.protocol.TField("window", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField NEQ_DPSTR_FIELD_DESC = new org.apache.thrift.protocol.TField("neqDPStr", org.apache.thrift.protocol.TType.LIST, (short)3);
    private static final org.apache.thrift.protocol.TField SF_BUFFER_FIELD_DESC = new org.apache.thrift.protocol.TField("sfBuffer", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getHashTable4NEQJoin_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getHashTable4NEQJoin_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String varName; // required
    public long window; // required
    public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> neqDPStr; // required
    public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer sfBuffer; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VAR_NAME((short)1, "varName"),
      WINDOW((short)2, "window"),
      NEQ_DPSTR((short)3, "neqDPStr"),
      SF_BUFFER((short)4, "sfBuffer");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VAR_NAME
            return VAR_NAME;
          case 2: // WINDOW
            return WINDOW;
          case 3: // NEQ_DPSTR
            return NEQ_DPSTR;
          case 4: // SF_BUFFER
            return SF_BUFFER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __WINDOW_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VAR_NAME, new org.apache.thrift.meta_data.FieldMetaData("varName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.WINDOW, new org.apache.thrift.meta_data.FieldMetaData("window", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.NEQ_DPSTR, new org.apache.thrift.meta_data.FieldMetaData("neqDPStr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.SF_BUFFER, new org.apache.thrift.meta_data.FieldMetaData("sfBuffer", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getHashTable4NEQJoin_args.class, metaDataMap);
    }

    public getHashTable4NEQJoin_args() {
    }

    public getHashTable4NEQJoin_args(
      java.lang.String varName,
      long window,
      java.util.List<java.lang.String> neqDPStr,
      java.nio.ByteBuffer sfBuffer)
    {
      this();
      this.varName = varName;
      this.window = window;
      setWindowIsSet(true);
      this.neqDPStr = neqDPStr;
      this.sfBuffer = org.apache.thrift.TBaseHelper.copyBinary(sfBuffer);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getHashTable4NEQJoin_args(getHashTable4NEQJoin_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetVarName()) {
        this.varName = other.varName;
      }
      this.window = other.window;
      if (other.isSetNeqDPStr()) {
        java.util.List<java.lang.String> __this__neqDPStr = new java.util.ArrayList<java.lang.String>(other.neqDPStr);
        this.neqDPStr = __this__neqDPStr;
      }
      if (other.isSetSfBuffer()) {
        this.sfBuffer = org.apache.thrift.TBaseHelper.copyBinary(other.sfBuffer);
      }
    }

    @Override
    public getHashTable4NEQJoin_args deepCopy() {
      return new getHashTable4NEQJoin_args(this);
    }

    @Override
    public void clear() {
      this.varName = null;
      setWindowIsSet(false);
      this.window = 0;
      this.neqDPStr = null;
      this.sfBuffer = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getVarName() {
      return this.varName;
    }

    public getHashTable4NEQJoin_args setVarName(@org.apache.thrift.annotation.Nullable java.lang.String varName) {
      this.varName = varName;
      return this;
    }

    public void unsetVarName() {
      this.varName = null;
    }

    /** Returns true if field varName is set (has been assigned a value) and false otherwise */
    public boolean isSetVarName() {
      return this.varName != null;
    }

    public void setVarNameIsSet(boolean value) {
      if (!value) {
        this.varName = null;
      }
    }

    public long getWindow() {
      return this.window;
    }

    public getHashTable4NEQJoin_args setWindow(long window) {
      this.window = window;
      setWindowIsSet(true);
      return this;
    }

    public void unsetWindow() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __WINDOW_ISSET_ID);
    }

    /** Returns true if field window is set (has been assigned a value) and false otherwise */
    public boolean isSetWindow() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __WINDOW_ISSET_ID);
    }

    public void setWindowIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __WINDOW_ISSET_ID, value);
    }

    public int getNeqDPStrSize() {
      return (this.neqDPStr == null) ? 0 : this.neqDPStr.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<java.lang.String> getNeqDPStrIterator() {
      return (this.neqDPStr == null) ? null : this.neqDPStr.iterator();
    }

    public void addToNeqDPStr(java.lang.String elem) {
      if (this.neqDPStr == null) {
        this.neqDPStr = new java.util.ArrayList<java.lang.String>();
      }
      this.neqDPStr.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<java.lang.String> getNeqDPStr() {
      return this.neqDPStr;
    }

    public getHashTable4NEQJoin_args setNeqDPStr(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> neqDPStr) {
      this.neqDPStr = neqDPStr;
      return this;
    }

    public void unsetNeqDPStr() {
      this.neqDPStr = null;
    }

    /** Returns true if field neqDPStr is set (has been assigned a value) and false otherwise */
    public boolean isSetNeqDPStr() {
      return this.neqDPStr != null;
    }

    public void setNeqDPStrIsSet(boolean value) {
      if (!value) {
        this.neqDPStr = null;
      }
    }

    public byte[] getSfBuffer() {
      setSfBuffer(org.apache.thrift.TBaseHelper.rightSize(sfBuffer));
      return sfBuffer == null ? null : sfBuffer.array();
    }

    public java.nio.ByteBuffer bufferForSfBuffer() {
      return org.apache.thrift.TBaseHelper.copyBinary(sfBuffer);
    }

    public getHashTable4NEQJoin_args setSfBuffer(byte[] sfBuffer) {
      this.sfBuffer = sfBuffer == null ? (java.nio.ByteBuffer)null     : java.nio.ByteBuffer.wrap(sfBuffer.clone());
      return this;
    }

    public getHashTable4NEQJoin_args setSfBuffer(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer sfBuffer) {
      this.sfBuffer = org.apache.thrift.TBaseHelper.copyBinary(sfBuffer);
      return this;
    }

    public void unsetSfBuffer() {
      this.sfBuffer = null;
    }

    /** Returns true if field sfBuffer is set (has been assigned a value) and false otherwise */
    public boolean isSetSfBuffer() {
      return this.sfBuffer != null;
    }

    public void setSfBufferIsSet(boolean value) {
      if (!value) {
        this.sfBuffer = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case VAR_NAME:
        if (value == null) {
          unsetVarName();
        } else {
          setVarName((java.lang.String)value);
        }
        break;

      case WINDOW:
        if (value == null) {
          unsetWindow();
        } else {
          setWindow((java.lang.Long)value);
        }
        break;

      case NEQ_DPSTR:
        if (value == null) {
          unsetNeqDPStr();
        } else {
          setNeqDPStr((java.util.List<java.lang.String>)value);
        }
        break;

      case SF_BUFFER:
        if (value == null) {
          unsetSfBuffer();
        } else {
          if (value instanceof byte[]) {
            setSfBuffer((byte[])value);
          } else {
            setSfBuffer((java.nio.ByteBuffer)value);
          }
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case VAR_NAME:
        return getVarName();

      case WINDOW:
        return getWindow();

      case NEQ_DPSTR:
        return getNeqDPStr();

      case SF_BUFFER:
        return getSfBuffer();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case VAR_NAME:
        return isSetVarName();
      case WINDOW:
        return isSetWindow();
      case NEQ_DPSTR:
        return isSetNeqDPStr();
      case SF_BUFFER:
        return isSetSfBuffer();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof getHashTable4NEQJoin_args)
        return this.equals((getHashTable4NEQJoin_args)that);
      return false;
    }

    public boolean equals(getHashTable4NEQJoin_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_varName = true && this.isSetVarName();
      boolean that_present_varName = true && that.isSetVarName();
      if (this_present_varName || that_present_varName) {
        if (!(this_present_varName && that_present_varName))
          return false;
        if (!this.varName.equals(that.varName))
          return false;
      }

      boolean this_present_window = true;
      boolean that_present_window = true;
      if (this_present_window || that_present_window) {
        if (!(this_present_window && that_present_window))
          return false;
        if (this.window != that.window)
          return false;
      }

      boolean this_present_neqDPStr = true && this.isSetNeqDPStr();
      boolean that_present_neqDPStr = true && that.isSetNeqDPStr();
      if (this_present_neqDPStr || that_present_neqDPStr) {
        if (!(this_present_neqDPStr && that_present_neqDPStr))
          return false;
        if (!this.neqDPStr.equals(that.neqDPStr))
          return false;
      }

      boolean this_present_sfBuffer = true && this.isSetSfBuffer();
      boolean that_present_sfBuffer = true && that.isSetSfBuffer();
      if (this_present_sfBuffer || that_present_sfBuffer) {
        if (!(this_present_sfBuffer && that_present_sfBuffer))
          return false;
        if (!this.sfBuffer.equals(that.sfBuffer))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetVarName()) ? 131071 : 524287);
      if (isSetVarName())
        hashCode = hashCode * 8191 + varName.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(window);

      hashCode = hashCode * 8191 + ((isSetNeqDPStr()) ? 131071 : 524287);
      if (isSetNeqDPStr())
        hashCode = hashCode * 8191 + neqDPStr.hashCode();

      hashCode = hashCode * 8191 + ((isSetSfBuffer()) ? 131071 : 524287);
      if (isSetSfBuffer())
        hashCode = hashCode * 8191 + sfBuffer.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getHashTable4NEQJoin_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetVarName(), other.isSetVarName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVarName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.varName, other.varName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetWindow(), other.isSetWindow());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWindow()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.window, other.window);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetNeqDPStr(), other.isSetNeqDPStr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNeqDPStr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.neqDPStr, other.neqDPStr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetSfBuffer(), other.isSetSfBuffer());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSfBuffer()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sfBuffer, other.sfBuffer);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getHashTable4NEQJoin_args(");
      boolean first = true;

      sb.append("varName:");
      if (this.varName == null) {
        sb.append("null");
      } else {
        sb.append(this.varName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("window:");
      sb.append(this.window);
      first = false;
      if (!first) sb.append(", ");
      sb.append("neqDPStr:");
      if (this.neqDPStr == null) {
        sb.append("null");
      } else {
        sb.append(this.neqDPStr);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sfBuffer:");
      if (this.sfBuffer == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.sfBuffer, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getHashTable4NEQJoin_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getHashTable4NEQJoin_argsStandardScheme getScheme() {
        return new getHashTable4NEQJoin_argsStandardScheme();
      }
    }

    private static class getHashTable4NEQJoin_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getHashTable4NEQJoin_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, getHashTable4NEQJoin_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VAR_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.varName = iprot.readString();
                struct.setVarNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // WINDOW
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.window = iprot.readI64();
                struct.setWindowIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // NEQ_DPSTR
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list66 = iprot.readListBegin();
                  struct.neqDPStr = new java.util.ArrayList<java.lang.String>(_list66.size);
                  @org.apache.thrift.annotation.Nullable java.lang.String _elem67;
                  for (int _i68 = 0; _i68 < _list66.size; ++_i68)
                  {
                    _elem67 = iprot.readString();
                    struct.neqDPStr.add(_elem67);
                  }
                  iprot.readListEnd();
                }
                struct.setNeqDPStrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // SF_BUFFER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sfBuffer = iprot.readBinary();
                struct.setSfBufferIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, getHashTable4NEQJoin_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.varName != null) {
          oprot.writeFieldBegin(VAR_NAME_FIELD_DESC);
          oprot.writeString(struct.varName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(WINDOW_FIELD_DESC);
        oprot.writeI64(struct.window);
        oprot.writeFieldEnd();
        if (struct.neqDPStr != null) {
          oprot.writeFieldBegin(NEQ_DPSTR_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.neqDPStr.size()));
            for (java.lang.String _iter69 : struct.neqDPStr)
            {
              oprot.writeString(_iter69);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.sfBuffer != null) {
          oprot.writeFieldBegin(SF_BUFFER_FIELD_DESC);
          oprot.writeBinary(struct.sfBuffer);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getHashTable4NEQJoin_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getHashTable4NEQJoin_argsTupleScheme getScheme() {
        return new getHashTable4NEQJoin_argsTupleScheme();
      }
    }

    private static class getHashTable4NEQJoin_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getHashTable4NEQJoin_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getHashTable4NEQJoin_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetVarName()) {
          optionals.set(0);
        }
        if (struct.isSetWindow()) {
          optionals.set(1);
        }
        if (struct.isSetNeqDPStr()) {
          optionals.set(2);
        }
        if (struct.isSetSfBuffer()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetVarName()) {
          oprot.writeString(struct.varName);
        }
        if (struct.isSetWindow()) {
          oprot.writeI64(struct.window);
        }
        if (struct.isSetNeqDPStr()) {
          {
            oprot.writeI32(struct.neqDPStr.size());
            for (java.lang.String _iter70 : struct.neqDPStr)
            {
              oprot.writeString(_iter70);
            }
          }
        }
        if (struct.isSetSfBuffer()) {
          oprot.writeBinary(struct.sfBuffer);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getHashTable4NEQJoin_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.varName = iprot.readString();
          struct.setVarNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.window = iprot.readI64();
          struct.setWindowIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list71 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
            struct.neqDPStr = new java.util.ArrayList<java.lang.String>(_list71.size);
            @org.apache.thrift.annotation.Nullable java.lang.String _elem72;
            for (int _i73 = 0; _i73 < _list71.size; ++_i73)
            {
              _elem72 = iprot.readString();
              struct.neqDPStr.add(_elem72);
            }
          }
          struct.setNeqDPStrIsSet(true);
        }
        if (incoming.get(3)) {
          struct.sfBuffer = iprot.readBinary();
          struct.setSfBufferIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class getHashTable4NEQJoin_result implements org.apache.thrift.TBase<getHashTable4NEQJoin_result, getHashTable4NEQJoin_result._Fields>, java.io.Serializable, Cloneable, Comparable<getHashTable4NEQJoin_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getHashTable4NEQJoin_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getHashTable4NEQJoin_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getHashTable4NEQJoin_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,MinMaxPair> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MinMaxPair.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getHashTable4NEQJoin_result.class, metaDataMap);
    }

    public getHashTable4NEQJoin_result() {
    }

    public getHashTable4NEQJoin_result(
      java.util.Map<java.lang.String,MinMaxPair> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getHashTable4NEQJoin_result(getHashTable4NEQJoin_result other) {
      if (other.isSetSuccess()) {
        java.util.Map<java.lang.String,MinMaxPair> __this__success = new java.util.HashMap<java.lang.String,MinMaxPair>(other.success.size());
        for (java.util.Map.Entry<java.lang.String, MinMaxPair> other_element : other.success.entrySet()) {

          java.lang.String other_element_key = other_element.getKey();
          MinMaxPair other_element_value = other_element.getValue();

          java.lang.String __this__success_copy_key = other_element_key;

          MinMaxPair __this__success_copy_value = new MinMaxPair(other_element_value);

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
    }

    @Override
    public getHashTable4NEQJoin_result deepCopy() {
      return new getHashTable4NEQJoin_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(java.lang.String key, MinMaxPair val) {
      if (this.success == null) {
        this.success = new java.util.HashMap<java.lang.String,MinMaxPair>();
      }
      this.success.put(key, val);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Map<java.lang.String,MinMaxPair> getSuccess() {
      return this.success;
    }

    public getHashTable4NEQJoin_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,MinMaxPair> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.Map<java.lang.String,MinMaxPair>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof getHashTable4NEQJoin_result)
        return this.equals((getHashTable4NEQJoin_result)that);
      return false;
    }

    public boolean equals(getHashTable4NEQJoin_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getHashTable4NEQJoin_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getHashTable4NEQJoin_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getHashTable4NEQJoin_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getHashTable4NEQJoin_resultStandardScheme getScheme() {
        return new getHashTable4NEQJoin_resultStandardScheme();
      }
    }

    private static class getHashTable4NEQJoin_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getHashTable4NEQJoin_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, getHashTable4NEQJoin_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map74 = iprot.readMapBegin();
                  struct.success = new java.util.HashMap<java.lang.String,MinMaxPair>(2*_map74.size);
                  @org.apache.thrift.annotation.Nullable java.lang.String _key75;
                  @org.apache.thrift.annotation.Nullable MinMaxPair _val76;
                  for (int _i77 = 0; _i77 < _map74.size; ++_i77)
                  {
                    _key75 = iprot.readString();
                    _val76 = new MinMaxPair();
                    _val76.read(iprot);
                    struct.success.put(_key75, _val76);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, getHashTable4NEQJoin_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (java.util.Map.Entry<java.lang.String, MinMaxPair> _iter78 : struct.success.entrySet())
            {
              oprot.writeString(_iter78.getKey());
              _iter78.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getHashTable4NEQJoin_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getHashTable4NEQJoin_resultTupleScheme getScheme() {
        return new getHashTable4NEQJoin_resultTupleScheme();
      }
    }

    private static class getHashTable4NEQJoin_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getHashTable4NEQJoin_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getHashTable4NEQJoin_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (java.util.Map.Entry<java.lang.String, MinMaxPair> _iter79 : struct.success.entrySet())
            {
              oprot.writeString(_iter79.getKey());
              _iter79.getValue().write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getHashTable4NEQJoin_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map80 = iprot.readMapBegin(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT); 
            struct.success = new java.util.HashMap<java.lang.String,MinMaxPair>(2*_map80.size);
            @org.apache.thrift.annotation.Nullable java.lang.String _key81;
            @org.apache.thrift.annotation.Nullable MinMaxPair _val82;
            for (int _i83 = 0; _i83 < _map80.size; ++_i83)
            {
              _key81 = iprot.readString();
              _val82 = new MinMaxPair();
              _val82.read(iprot);
              struct.success.put(_key81, _val82);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class windowFilter_args implements org.apache.thrift.TBase<windowFilter_args, windowFilter_args._Fields>, java.io.Serializable, Cloneable, Comparable<windowFilter_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("windowFilter_args");

    private static final org.apache.thrift.protocol.TField VAR_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("varName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField WINDOW_FIELD_DESC = new org.apache.thrift.protocol.TField("window", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField HEAD_TAIL_MARKER_FIELD_DESC = new org.apache.thrift.protocol.TField("headTailMarker", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField SF_BUFFER_FIELD_DESC = new org.apache.thrift.protocol.TField("sfBuffer", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new windowFilter_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new windowFilter_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String varName; // required
    public long window; // required
    public int headTailMarker; // required
    public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer sfBuffer; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VAR_NAME((short)1, "varName"),
      WINDOW((short)2, "window"),
      HEAD_TAIL_MARKER((short)3, "headTailMarker"),
      SF_BUFFER((short)4, "sfBuffer");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VAR_NAME
            return VAR_NAME;
          case 2: // WINDOW
            return WINDOW;
          case 3: // HEAD_TAIL_MARKER
            return HEAD_TAIL_MARKER;
          case 4: // SF_BUFFER
            return SF_BUFFER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __WINDOW_ISSET_ID = 0;
    private static final int __HEADTAILMARKER_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VAR_NAME, new org.apache.thrift.meta_data.FieldMetaData("varName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.WINDOW, new org.apache.thrift.meta_data.FieldMetaData("window", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.HEAD_TAIL_MARKER, new org.apache.thrift.meta_data.FieldMetaData("headTailMarker", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.SF_BUFFER, new org.apache.thrift.meta_data.FieldMetaData("sfBuffer", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(windowFilter_args.class, metaDataMap);
    }

    public windowFilter_args() {
    }

    public windowFilter_args(
      java.lang.String varName,
      long window,
      int headTailMarker,
      java.nio.ByteBuffer sfBuffer)
    {
      this();
      this.varName = varName;
      this.window = window;
      setWindowIsSet(true);
      this.headTailMarker = headTailMarker;
      setHeadTailMarkerIsSet(true);
      this.sfBuffer = org.apache.thrift.TBaseHelper.copyBinary(sfBuffer);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public windowFilter_args(windowFilter_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetVarName()) {
        this.varName = other.varName;
      }
      this.window = other.window;
      this.headTailMarker = other.headTailMarker;
      if (other.isSetSfBuffer()) {
        this.sfBuffer = org.apache.thrift.TBaseHelper.copyBinary(other.sfBuffer);
      }
    }

    @Override
    public windowFilter_args deepCopy() {
      return new windowFilter_args(this);
    }

    @Override
    public void clear() {
      this.varName = null;
      setWindowIsSet(false);
      this.window = 0;
      setHeadTailMarkerIsSet(false);
      this.headTailMarker = 0;
      this.sfBuffer = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getVarName() {
      return this.varName;
    }

    public windowFilter_args setVarName(@org.apache.thrift.annotation.Nullable java.lang.String varName) {
      this.varName = varName;
      return this;
    }

    public void unsetVarName() {
      this.varName = null;
    }

    /** Returns true if field varName is set (has been assigned a value) and false otherwise */
    public boolean isSetVarName() {
      return this.varName != null;
    }

    public void setVarNameIsSet(boolean value) {
      if (!value) {
        this.varName = null;
      }
    }

    public long getWindow() {
      return this.window;
    }

    public windowFilter_args setWindow(long window) {
      this.window = window;
      setWindowIsSet(true);
      return this;
    }

    public void unsetWindow() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __WINDOW_ISSET_ID);
    }

    /** Returns true if field window is set (has been assigned a value) and false otherwise */
    public boolean isSetWindow() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __WINDOW_ISSET_ID);
    }

    public void setWindowIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __WINDOW_ISSET_ID, value);
    }

    public int getHeadTailMarker() {
      return this.headTailMarker;
    }

    public windowFilter_args setHeadTailMarker(int headTailMarker) {
      this.headTailMarker = headTailMarker;
      setHeadTailMarkerIsSet(true);
      return this;
    }

    public void unsetHeadTailMarker() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HEADTAILMARKER_ISSET_ID);
    }

    /** Returns true if field headTailMarker is set (has been assigned a value) and false otherwise */
    public boolean isSetHeadTailMarker() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HEADTAILMARKER_ISSET_ID);
    }

    public void setHeadTailMarkerIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HEADTAILMARKER_ISSET_ID, value);
    }

    public byte[] getSfBuffer() {
      setSfBuffer(org.apache.thrift.TBaseHelper.rightSize(sfBuffer));
      return sfBuffer == null ? null : sfBuffer.array();
    }

    public java.nio.ByteBuffer bufferForSfBuffer() {
      return org.apache.thrift.TBaseHelper.copyBinary(sfBuffer);
    }

    public windowFilter_args setSfBuffer(byte[] sfBuffer) {
      this.sfBuffer = sfBuffer == null ? (java.nio.ByteBuffer)null     : java.nio.ByteBuffer.wrap(sfBuffer.clone());
      return this;
    }

    public windowFilter_args setSfBuffer(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer sfBuffer) {
      this.sfBuffer = org.apache.thrift.TBaseHelper.copyBinary(sfBuffer);
      return this;
    }

    public void unsetSfBuffer() {
      this.sfBuffer = null;
    }

    /** Returns true if field sfBuffer is set (has been assigned a value) and false otherwise */
    public boolean isSetSfBuffer() {
      return this.sfBuffer != null;
    }

    public void setSfBufferIsSet(boolean value) {
      if (!value) {
        this.sfBuffer = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case VAR_NAME:
        if (value == null) {
          unsetVarName();
        } else {
          setVarName((java.lang.String)value);
        }
        break;

      case WINDOW:
        if (value == null) {
          unsetWindow();
        } else {
          setWindow((java.lang.Long)value);
        }
        break;

      case HEAD_TAIL_MARKER:
        if (value == null) {
          unsetHeadTailMarker();
        } else {
          setHeadTailMarker((java.lang.Integer)value);
        }
        break;

      case SF_BUFFER:
        if (value == null) {
          unsetSfBuffer();
        } else {
          if (value instanceof byte[]) {
            setSfBuffer((byte[])value);
          } else {
            setSfBuffer((java.nio.ByteBuffer)value);
          }
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case VAR_NAME:
        return getVarName();

      case WINDOW:
        return getWindow();

      case HEAD_TAIL_MARKER:
        return getHeadTailMarker();

      case SF_BUFFER:
        return getSfBuffer();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case VAR_NAME:
        return isSetVarName();
      case WINDOW:
        return isSetWindow();
      case HEAD_TAIL_MARKER:
        return isSetHeadTailMarker();
      case SF_BUFFER:
        return isSetSfBuffer();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof windowFilter_args)
        return this.equals((windowFilter_args)that);
      return false;
    }

    public boolean equals(windowFilter_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_varName = true && this.isSetVarName();
      boolean that_present_varName = true && that.isSetVarName();
      if (this_present_varName || that_present_varName) {
        if (!(this_present_varName && that_present_varName))
          return false;
        if (!this.varName.equals(that.varName))
          return false;
      }

      boolean this_present_window = true;
      boolean that_present_window = true;
      if (this_present_window || that_present_window) {
        if (!(this_present_window && that_present_window))
          return false;
        if (this.window != that.window)
          return false;
      }

      boolean this_present_headTailMarker = true;
      boolean that_present_headTailMarker = true;
      if (this_present_headTailMarker || that_present_headTailMarker) {
        if (!(this_present_headTailMarker && that_present_headTailMarker))
          return false;
        if (this.headTailMarker != that.headTailMarker)
          return false;
      }

      boolean this_present_sfBuffer = true && this.isSetSfBuffer();
      boolean that_present_sfBuffer = true && that.isSetSfBuffer();
      if (this_present_sfBuffer || that_present_sfBuffer) {
        if (!(this_present_sfBuffer && that_present_sfBuffer))
          return false;
        if (!this.sfBuffer.equals(that.sfBuffer))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetVarName()) ? 131071 : 524287);
      if (isSetVarName())
        hashCode = hashCode * 8191 + varName.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(window);

      hashCode = hashCode * 8191 + headTailMarker;

      hashCode = hashCode * 8191 + ((isSetSfBuffer()) ? 131071 : 524287);
      if (isSetSfBuffer())
        hashCode = hashCode * 8191 + sfBuffer.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(windowFilter_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetVarName(), other.isSetVarName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVarName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.varName, other.varName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetWindow(), other.isSetWindow());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWindow()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.window, other.window);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetHeadTailMarker(), other.isSetHeadTailMarker());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHeadTailMarker()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.headTailMarker, other.headTailMarker);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetSfBuffer(), other.isSetSfBuffer());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSfBuffer()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sfBuffer, other.sfBuffer);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("windowFilter_args(");
      boolean first = true;

      sb.append("varName:");
      if (this.varName == null) {
        sb.append("null");
      } else {
        sb.append(this.varName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("window:");
      sb.append(this.window);
      first = false;
      if (!first) sb.append(", ");
      sb.append("headTailMarker:");
      sb.append(this.headTailMarker);
      first = false;
      if (!first) sb.append(", ");
      sb.append("sfBuffer:");
      if (this.sfBuffer == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.sfBuffer, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class windowFilter_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public windowFilter_argsStandardScheme getScheme() {
        return new windowFilter_argsStandardScheme();
      }
    }

    private static class windowFilter_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<windowFilter_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, windowFilter_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VAR_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.varName = iprot.readString();
                struct.setVarNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // WINDOW
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.window = iprot.readI64();
                struct.setWindowIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // HEAD_TAIL_MARKER
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.headTailMarker = iprot.readI32();
                struct.setHeadTailMarkerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // SF_BUFFER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sfBuffer = iprot.readBinary();
                struct.setSfBufferIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, windowFilter_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.varName != null) {
          oprot.writeFieldBegin(VAR_NAME_FIELD_DESC);
          oprot.writeString(struct.varName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(WINDOW_FIELD_DESC);
        oprot.writeI64(struct.window);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(HEAD_TAIL_MARKER_FIELD_DESC);
        oprot.writeI32(struct.headTailMarker);
        oprot.writeFieldEnd();
        if (struct.sfBuffer != null) {
          oprot.writeFieldBegin(SF_BUFFER_FIELD_DESC);
          oprot.writeBinary(struct.sfBuffer);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class windowFilter_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public windowFilter_argsTupleScheme getScheme() {
        return new windowFilter_argsTupleScheme();
      }
    }

    private static class windowFilter_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<windowFilter_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, windowFilter_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetVarName()) {
          optionals.set(0);
        }
        if (struct.isSetWindow()) {
          optionals.set(1);
        }
        if (struct.isSetHeadTailMarker()) {
          optionals.set(2);
        }
        if (struct.isSetSfBuffer()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetVarName()) {
          oprot.writeString(struct.varName);
        }
        if (struct.isSetWindow()) {
          oprot.writeI64(struct.window);
        }
        if (struct.isSetHeadTailMarker()) {
          oprot.writeI32(struct.headTailMarker);
        }
        if (struct.isSetSfBuffer()) {
          oprot.writeBinary(struct.sfBuffer);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, windowFilter_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.varName = iprot.readString();
          struct.setVarNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.window = iprot.readI64();
          struct.setWindowIsSet(true);
        }
        if (incoming.get(2)) {
          struct.headTailMarker = iprot.readI32();
          struct.setHeadTailMarkerIsSet(true);
        }
        if (incoming.get(3)) {
          struct.sfBuffer = iprot.readBinary();
          struct.setSfBufferIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class windowFilter_result implements org.apache.thrift.TBase<windowFilter_result, windowFilter_result._Fields>, java.io.Serializable, Cloneable, Comparable<windowFilter_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("windowFilter_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new windowFilter_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new windowFilter_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(windowFilter_result.class, metaDataMap);
    }

    public windowFilter_result() {
    }

    public windowFilter_result(
      java.nio.ByteBuffer success)
    {
      this();
      this.success = org.apache.thrift.TBaseHelper.copyBinary(success);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public windowFilter_result(windowFilter_result other) {
      if (other.isSetSuccess()) {
        this.success = org.apache.thrift.TBaseHelper.copyBinary(other.success);
      }
    }

    @Override
    public windowFilter_result deepCopy() {
      return new windowFilter_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public byte[] getSuccess() {
      setSuccess(org.apache.thrift.TBaseHelper.rightSize(success));
      return success == null ? null : success.array();
    }

    public java.nio.ByteBuffer bufferForSuccess() {
      return org.apache.thrift.TBaseHelper.copyBinary(success);
    }

    public windowFilter_result setSuccess(byte[] success) {
      this.success = success == null ? (java.nio.ByteBuffer)null     : java.nio.ByteBuffer.wrap(success.clone());
      return this;
    }

    public windowFilter_result setSuccess(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer success) {
      this.success = org.apache.thrift.TBaseHelper.copyBinary(success);
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          if (value instanceof byte[]) {
            setSuccess((byte[])value);
          } else {
            setSuccess((java.nio.ByteBuffer)value);
          }
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof windowFilter_result)
        return this.equals((windowFilter_result)that);
      return false;
    }

    public boolean equals(windowFilter_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(windowFilter_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("windowFilter_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.success, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class windowFilter_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public windowFilter_resultStandardScheme getScheme() {
        return new windowFilter_resultStandardScheme();
      }
    }

    private static class windowFilter_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<windowFilter_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, windowFilter_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readBinary();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, windowFilter_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBinary(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class windowFilter_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public windowFilter_resultTupleScheme getScheme() {
        return new windowFilter_resultTupleScheme();
      }
    }

    private static class windowFilter_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<windowFilter_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, windowFilter_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBinary(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, windowFilter_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBinary();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class eqJoinFilter_args implements org.apache.thrift.TBase<eqJoinFilter_args, eqJoinFilter_args._Fields>, java.io.Serializable, Cloneable, Comparable<eqJoinFilter_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("eqJoinFilter_args");

    private static final org.apache.thrift.protocol.TField VAR_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("varName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField WINDOW_FIELD_DESC = new org.apache.thrift.protocol.TField("window", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField HEAD_TAIL_MARKER_FIELD_DESC = new org.apache.thrift.protocol.TField("headTailMarker", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField PREVIOUS_OR_NEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("previousOrNext", org.apache.thrift.protocol.TType.MAP, (short)4);
    private static final org.apache.thrift.protocol.TField DP_STR_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("dpStrMap", org.apache.thrift.protocol.TType.MAP, (short)5);
    private static final org.apache.thrift.protocol.TField BF_BUFFER_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("bfBufferMap", org.apache.thrift.protocol.TType.MAP, (short)6);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new eqJoinFilter_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new eqJoinFilter_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String varName; // required
    public long window; // required
    public int headTailMarker; // required
    public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.Boolean> previousOrNext; // required
    public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.util.List<java.lang.String>> dpStrMap; // required
    public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.nio.ByteBuffer> bfBufferMap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VAR_NAME((short)1, "varName"),
      WINDOW((short)2, "window"),
      HEAD_TAIL_MARKER((short)3, "headTailMarker"),
      PREVIOUS_OR_NEXT((short)4, "previousOrNext"),
      DP_STR_MAP((short)5, "dpStrMap"),
      BF_BUFFER_MAP((short)6, "bfBufferMap");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VAR_NAME
            return VAR_NAME;
          case 2: // WINDOW
            return WINDOW;
          case 3: // HEAD_TAIL_MARKER
            return HEAD_TAIL_MARKER;
          case 4: // PREVIOUS_OR_NEXT
            return PREVIOUS_OR_NEXT;
          case 5: // DP_STR_MAP
            return DP_STR_MAP;
          case 6: // BF_BUFFER_MAP
            return BF_BUFFER_MAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __WINDOW_ISSET_ID = 0;
    private static final int __HEADTAILMARKER_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VAR_NAME, new org.apache.thrift.meta_data.FieldMetaData("varName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.WINDOW, new org.apache.thrift.meta_data.FieldMetaData("window", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.HEAD_TAIL_MARKER, new org.apache.thrift.meta_data.FieldMetaData("headTailMarker", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PREVIOUS_OR_NEXT, new org.apache.thrift.meta_data.FieldMetaData("previousOrNext", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL))));
      tmpMap.put(_Fields.DP_STR_MAP, new org.apache.thrift.meta_data.FieldMetaData("dpStrMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
      tmpMap.put(_Fields.BF_BUFFER_MAP, new org.apache.thrift.meta_data.FieldMetaData("bfBufferMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING              , true))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(eqJoinFilter_args.class, metaDataMap);
    }

    public eqJoinFilter_args() {
    }

    public eqJoinFilter_args(
      java.lang.String varName,
      long window,
      int headTailMarker,
      java.util.Map<java.lang.String,java.lang.Boolean> previousOrNext,
      java.util.Map<java.lang.String,java.util.List<java.lang.String>> dpStrMap,
      java.util.Map<java.lang.String,java.nio.ByteBuffer> bfBufferMap)
    {
      this();
      this.varName = varName;
      this.window = window;
      setWindowIsSet(true);
      this.headTailMarker = headTailMarker;
      setHeadTailMarkerIsSet(true);
      this.previousOrNext = previousOrNext;
      this.dpStrMap = dpStrMap;
      this.bfBufferMap = bfBufferMap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public eqJoinFilter_args(eqJoinFilter_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetVarName()) {
        this.varName = other.varName;
      }
      this.window = other.window;
      this.headTailMarker = other.headTailMarker;
      if (other.isSetPreviousOrNext()) {
        java.util.Map<java.lang.String,java.lang.Boolean> __this__previousOrNext = new java.util.HashMap<java.lang.String,java.lang.Boolean>(other.previousOrNext);
        this.previousOrNext = __this__previousOrNext;
      }
      if (other.isSetDpStrMap()) {
        java.util.Map<java.lang.String,java.util.List<java.lang.String>> __this__dpStrMap = new java.util.HashMap<java.lang.String,java.util.List<java.lang.String>>(other.dpStrMap.size());
        for (java.util.Map.Entry<java.lang.String, java.util.List<java.lang.String>> other_element : other.dpStrMap.entrySet()) {

          java.lang.String other_element_key = other_element.getKey();
          java.util.List<java.lang.String> other_element_value = other_element.getValue();

          java.lang.String __this__dpStrMap_copy_key = other_element_key;

          java.util.List<java.lang.String> __this__dpStrMap_copy_value = new java.util.ArrayList<java.lang.String>(other_element_value);

          __this__dpStrMap.put(__this__dpStrMap_copy_key, __this__dpStrMap_copy_value);
        }
        this.dpStrMap = __this__dpStrMap;
      }
      if (other.isSetBfBufferMap()) {
        java.util.Map<java.lang.String,java.nio.ByteBuffer> __this__bfBufferMap = new java.util.HashMap<java.lang.String,java.nio.ByteBuffer>(other.bfBufferMap);
        this.bfBufferMap = __this__bfBufferMap;
      }
    }

    @Override
    public eqJoinFilter_args deepCopy() {
      return new eqJoinFilter_args(this);
    }

    @Override
    public void clear() {
      this.varName = null;
      setWindowIsSet(false);
      this.window = 0;
      setHeadTailMarkerIsSet(false);
      this.headTailMarker = 0;
      this.previousOrNext = null;
      this.dpStrMap = null;
      this.bfBufferMap = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getVarName() {
      return this.varName;
    }

    public eqJoinFilter_args setVarName(@org.apache.thrift.annotation.Nullable java.lang.String varName) {
      this.varName = varName;
      return this;
    }

    public void unsetVarName() {
      this.varName = null;
    }

    /** Returns true if field varName is set (has been assigned a value) and false otherwise */
    public boolean isSetVarName() {
      return this.varName != null;
    }

    public void setVarNameIsSet(boolean value) {
      if (!value) {
        this.varName = null;
      }
    }

    public long getWindow() {
      return this.window;
    }

    public eqJoinFilter_args setWindow(long window) {
      this.window = window;
      setWindowIsSet(true);
      return this;
    }

    public void unsetWindow() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __WINDOW_ISSET_ID);
    }

    /** Returns true if field window is set (has been assigned a value) and false otherwise */
    public boolean isSetWindow() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __WINDOW_ISSET_ID);
    }

    public void setWindowIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __WINDOW_ISSET_ID, value);
    }

    public int getHeadTailMarker() {
      return this.headTailMarker;
    }

    public eqJoinFilter_args setHeadTailMarker(int headTailMarker) {
      this.headTailMarker = headTailMarker;
      setHeadTailMarkerIsSet(true);
      return this;
    }

    public void unsetHeadTailMarker() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HEADTAILMARKER_ISSET_ID);
    }

    /** Returns true if field headTailMarker is set (has been assigned a value) and false otherwise */
    public boolean isSetHeadTailMarker() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HEADTAILMARKER_ISSET_ID);
    }

    public void setHeadTailMarkerIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HEADTAILMARKER_ISSET_ID, value);
    }

    public int getPreviousOrNextSize() {
      return (this.previousOrNext == null) ? 0 : this.previousOrNext.size();
    }

    public void putToPreviousOrNext(java.lang.String key, boolean val) {
      if (this.previousOrNext == null) {
        this.previousOrNext = new java.util.HashMap<java.lang.String,java.lang.Boolean>();
      }
      this.previousOrNext.put(key, val);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Map<java.lang.String,java.lang.Boolean> getPreviousOrNext() {
      return this.previousOrNext;
    }

    public eqJoinFilter_args setPreviousOrNext(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.Boolean> previousOrNext) {
      this.previousOrNext = previousOrNext;
      return this;
    }

    public void unsetPreviousOrNext() {
      this.previousOrNext = null;
    }

    /** Returns true if field previousOrNext is set (has been assigned a value) and false otherwise */
    public boolean isSetPreviousOrNext() {
      return this.previousOrNext != null;
    }

    public void setPreviousOrNextIsSet(boolean value) {
      if (!value) {
        this.previousOrNext = null;
      }
    }

    public int getDpStrMapSize() {
      return (this.dpStrMap == null) ? 0 : this.dpStrMap.size();
    }

    public void putToDpStrMap(java.lang.String key, java.util.List<java.lang.String> val) {
      if (this.dpStrMap == null) {
        this.dpStrMap = new java.util.HashMap<java.lang.String,java.util.List<java.lang.String>>();
      }
      this.dpStrMap.put(key, val);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Map<java.lang.String,java.util.List<java.lang.String>> getDpStrMap() {
      return this.dpStrMap;
    }

    public eqJoinFilter_args setDpStrMap(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.util.List<java.lang.String>> dpStrMap) {
      this.dpStrMap = dpStrMap;
      return this;
    }

    public void unsetDpStrMap() {
      this.dpStrMap = null;
    }

    /** Returns true if field dpStrMap is set (has been assigned a value) and false otherwise */
    public boolean isSetDpStrMap() {
      return this.dpStrMap != null;
    }

    public void setDpStrMapIsSet(boolean value) {
      if (!value) {
        this.dpStrMap = null;
      }
    }

    public int getBfBufferMapSize() {
      return (this.bfBufferMap == null) ? 0 : this.bfBufferMap.size();
    }

    public void putToBfBufferMap(java.lang.String key, java.nio.ByteBuffer val) {
      if (this.bfBufferMap == null) {
        this.bfBufferMap = new java.util.HashMap<java.lang.String,java.nio.ByteBuffer>();
      }
      this.bfBufferMap.put(key, val);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Map<java.lang.String,java.nio.ByteBuffer> getBfBufferMap() {
      return this.bfBufferMap;
    }

    public eqJoinFilter_args setBfBufferMap(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.nio.ByteBuffer> bfBufferMap) {
      this.bfBufferMap = bfBufferMap;
      return this;
    }

    public void unsetBfBufferMap() {
      this.bfBufferMap = null;
    }

    /** Returns true if field bfBufferMap is set (has been assigned a value) and false otherwise */
    public boolean isSetBfBufferMap() {
      return this.bfBufferMap != null;
    }

    public void setBfBufferMapIsSet(boolean value) {
      if (!value) {
        this.bfBufferMap = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case VAR_NAME:
        if (value == null) {
          unsetVarName();
        } else {
          setVarName((java.lang.String)value);
        }
        break;

      case WINDOW:
        if (value == null) {
          unsetWindow();
        } else {
          setWindow((java.lang.Long)value);
        }
        break;

      case HEAD_TAIL_MARKER:
        if (value == null) {
          unsetHeadTailMarker();
        } else {
          setHeadTailMarker((java.lang.Integer)value);
        }
        break;

      case PREVIOUS_OR_NEXT:
        if (value == null) {
          unsetPreviousOrNext();
        } else {
          setPreviousOrNext((java.util.Map<java.lang.String,java.lang.Boolean>)value);
        }
        break;

      case DP_STR_MAP:
        if (value == null) {
          unsetDpStrMap();
        } else {
          setDpStrMap((java.util.Map<java.lang.String,java.util.List<java.lang.String>>)value);
        }
        break;

      case BF_BUFFER_MAP:
        if (value == null) {
          unsetBfBufferMap();
        } else {
          setBfBufferMap((java.util.Map<java.lang.String,java.nio.ByteBuffer>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case VAR_NAME:
        return getVarName();

      case WINDOW:
        return getWindow();

      case HEAD_TAIL_MARKER:
        return getHeadTailMarker();

      case PREVIOUS_OR_NEXT:
        return getPreviousOrNext();

      case DP_STR_MAP:
        return getDpStrMap();

      case BF_BUFFER_MAP:
        return getBfBufferMap();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case VAR_NAME:
        return isSetVarName();
      case WINDOW:
        return isSetWindow();
      case HEAD_TAIL_MARKER:
        return isSetHeadTailMarker();
      case PREVIOUS_OR_NEXT:
        return isSetPreviousOrNext();
      case DP_STR_MAP:
        return isSetDpStrMap();
      case BF_BUFFER_MAP:
        return isSetBfBufferMap();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof eqJoinFilter_args)
        return this.equals((eqJoinFilter_args)that);
      return false;
    }

    public boolean equals(eqJoinFilter_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_varName = true && this.isSetVarName();
      boolean that_present_varName = true && that.isSetVarName();
      if (this_present_varName || that_present_varName) {
        if (!(this_present_varName && that_present_varName))
          return false;
        if (!this.varName.equals(that.varName))
          return false;
      }

      boolean this_present_window = true;
      boolean that_present_window = true;
      if (this_present_window || that_present_window) {
        if (!(this_present_window && that_present_window))
          return false;
        if (this.window != that.window)
          return false;
      }

      boolean this_present_headTailMarker = true;
      boolean that_present_headTailMarker = true;
      if (this_present_headTailMarker || that_present_headTailMarker) {
        if (!(this_present_headTailMarker && that_present_headTailMarker))
          return false;
        if (this.headTailMarker != that.headTailMarker)
          return false;
      }

      boolean this_present_previousOrNext = true && this.isSetPreviousOrNext();
      boolean that_present_previousOrNext = true && that.isSetPreviousOrNext();
      if (this_present_previousOrNext || that_present_previousOrNext) {
        if (!(this_present_previousOrNext && that_present_previousOrNext))
          return false;
        if (!this.previousOrNext.equals(that.previousOrNext))
          return false;
      }

      boolean this_present_dpStrMap = true && this.isSetDpStrMap();
      boolean that_present_dpStrMap = true && that.isSetDpStrMap();
      if (this_present_dpStrMap || that_present_dpStrMap) {
        if (!(this_present_dpStrMap && that_present_dpStrMap))
          return false;
        if (!this.dpStrMap.equals(that.dpStrMap))
          return false;
      }

      boolean this_present_bfBufferMap = true && this.isSetBfBufferMap();
      boolean that_present_bfBufferMap = true && that.isSetBfBufferMap();
      if (this_present_bfBufferMap || that_present_bfBufferMap) {
        if (!(this_present_bfBufferMap && that_present_bfBufferMap))
          return false;
        if (!this.bfBufferMap.equals(that.bfBufferMap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetVarName()) ? 131071 : 524287);
      if (isSetVarName())
        hashCode = hashCode * 8191 + varName.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(window);

      hashCode = hashCode * 8191 + headTailMarker;

      hashCode = hashCode * 8191 + ((isSetPreviousOrNext()) ? 131071 : 524287);
      if (isSetPreviousOrNext())
        hashCode = hashCode * 8191 + previousOrNext.hashCode();

      hashCode = hashCode * 8191 + ((isSetDpStrMap()) ? 131071 : 524287);
      if (isSetDpStrMap())
        hashCode = hashCode * 8191 + dpStrMap.hashCode();

      hashCode = hashCode * 8191 + ((isSetBfBufferMap()) ? 131071 : 524287);
      if (isSetBfBufferMap())
        hashCode = hashCode * 8191 + bfBufferMap.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(eqJoinFilter_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetVarName(), other.isSetVarName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVarName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.varName, other.varName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetWindow(), other.isSetWindow());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWindow()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.window, other.window);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetHeadTailMarker(), other.isSetHeadTailMarker());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHeadTailMarker()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.headTailMarker, other.headTailMarker);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetPreviousOrNext(), other.isSetPreviousOrNext());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPreviousOrNext()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.previousOrNext, other.previousOrNext);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetDpStrMap(), other.isSetDpStrMap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDpStrMap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dpStrMap, other.dpStrMap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetBfBufferMap(), other.isSetBfBufferMap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBfBufferMap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bfBufferMap, other.bfBufferMap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("eqJoinFilter_args(");
      boolean first = true;

      sb.append("varName:");
      if (this.varName == null) {
        sb.append("null");
      } else {
        sb.append(this.varName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("window:");
      sb.append(this.window);
      first = false;
      if (!first) sb.append(", ");
      sb.append("headTailMarker:");
      sb.append(this.headTailMarker);
      first = false;
      if (!first) sb.append(", ");
      sb.append("previousOrNext:");
      if (this.previousOrNext == null) {
        sb.append("null");
      } else {
        sb.append(this.previousOrNext);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dpStrMap:");
      if (this.dpStrMap == null) {
        sb.append("null");
      } else {
        sb.append(this.dpStrMap);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bfBufferMap:");
      if (this.bfBufferMap == null) {
        sb.append("null");
      } else {
        sb.append(this.bfBufferMap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class eqJoinFilter_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public eqJoinFilter_argsStandardScheme getScheme() {
        return new eqJoinFilter_argsStandardScheme();
      }
    }

    private static class eqJoinFilter_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<eqJoinFilter_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, eqJoinFilter_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VAR_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.varName = iprot.readString();
                struct.setVarNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // WINDOW
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.window = iprot.readI64();
                struct.setWindowIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // HEAD_TAIL_MARKER
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.headTailMarker = iprot.readI32();
                struct.setHeadTailMarkerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PREVIOUS_OR_NEXT
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map84 = iprot.readMapBegin();
                  struct.previousOrNext = new java.util.HashMap<java.lang.String,java.lang.Boolean>(2*_map84.size);
                  @org.apache.thrift.annotation.Nullable java.lang.String _key85;
                  boolean _val86;
                  for (int _i87 = 0; _i87 < _map84.size; ++_i87)
                  {
                    _key85 = iprot.readString();
                    _val86 = iprot.readBool();
                    struct.previousOrNext.put(_key85, _val86);
                  }
                  iprot.readMapEnd();
                }
                struct.setPreviousOrNextIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // DP_STR_MAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map88 = iprot.readMapBegin();
                  struct.dpStrMap = new java.util.HashMap<java.lang.String,java.util.List<java.lang.String>>(2*_map88.size);
                  @org.apache.thrift.annotation.Nullable java.lang.String _key89;
                  @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> _val90;
                  for (int _i91 = 0; _i91 < _map88.size; ++_i91)
                  {
                    _key89 = iprot.readString();
                    {
                      org.apache.thrift.protocol.TList _list92 = iprot.readListBegin();
                      _val90 = new java.util.ArrayList<java.lang.String>(_list92.size);
                      @org.apache.thrift.annotation.Nullable java.lang.String _elem93;
                      for (int _i94 = 0; _i94 < _list92.size; ++_i94)
                      {
                        _elem93 = iprot.readString();
                        _val90.add(_elem93);
                      }
                      iprot.readListEnd();
                    }
                    struct.dpStrMap.put(_key89, _val90);
                  }
                  iprot.readMapEnd();
                }
                struct.setDpStrMapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // BF_BUFFER_MAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map95 = iprot.readMapBegin();
                  struct.bfBufferMap = new java.util.HashMap<java.lang.String,java.nio.ByteBuffer>(2*_map95.size);
                  @org.apache.thrift.annotation.Nullable java.lang.String _key96;
                  @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _val97;
                  for (int _i98 = 0; _i98 < _map95.size; ++_i98)
                  {
                    _key96 = iprot.readString();
                    _val97 = iprot.readBinary();
                    struct.bfBufferMap.put(_key96, _val97);
                  }
                  iprot.readMapEnd();
                }
                struct.setBfBufferMapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, eqJoinFilter_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.varName != null) {
          oprot.writeFieldBegin(VAR_NAME_FIELD_DESC);
          oprot.writeString(struct.varName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(WINDOW_FIELD_DESC);
        oprot.writeI64(struct.window);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(HEAD_TAIL_MARKER_FIELD_DESC);
        oprot.writeI32(struct.headTailMarker);
        oprot.writeFieldEnd();
        if (struct.previousOrNext != null) {
          oprot.writeFieldBegin(PREVIOUS_OR_NEXT_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.BOOL, struct.previousOrNext.size()));
            for (java.util.Map.Entry<java.lang.String, java.lang.Boolean> _iter99 : struct.previousOrNext.entrySet())
            {
              oprot.writeString(_iter99.getKey());
              oprot.writeBool(_iter99.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.dpStrMap != null) {
          oprot.writeFieldBegin(DP_STR_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, struct.dpStrMap.size()));
            for (java.util.Map.Entry<java.lang.String, java.util.List<java.lang.String>> _iter100 : struct.dpStrMap.entrySet())
            {
              oprot.writeString(_iter100.getKey());
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, _iter100.getValue().size()));
                for (java.lang.String _iter101 : _iter100.getValue())
                {
                  oprot.writeString(_iter101);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.bfBufferMap != null) {
          oprot.writeFieldBegin(BF_BUFFER_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.bfBufferMap.size()));
            for (java.util.Map.Entry<java.lang.String, java.nio.ByteBuffer> _iter102 : struct.bfBufferMap.entrySet())
            {
              oprot.writeString(_iter102.getKey());
              oprot.writeBinary(_iter102.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class eqJoinFilter_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public eqJoinFilter_argsTupleScheme getScheme() {
        return new eqJoinFilter_argsTupleScheme();
      }
    }

    private static class eqJoinFilter_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<eqJoinFilter_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, eqJoinFilter_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetVarName()) {
          optionals.set(0);
        }
        if (struct.isSetWindow()) {
          optionals.set(1);
        }
        if (struct.isSetHeadTailMarker()) {
          optionals.set(2);
        }
        if (struct.isSetPreviousOrNext()) {
          optionals.set(3);
        }
        if (struct.isSetDpStrMap()) {
          optionals.set(4);
        }
        if (struct.isSetBfBufferMap()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetVarName()) {
          oprot.writeString(struct.varName);
        }
        if (struct.isSetWindow()) {
          oprot.writeI64(struct.window);
        }
        if (struct.isSetHeadTailMarker()) {
          oprot.writeI32(struct.headTailMarker);
        }
        if (struct.isSetPreviousOrNext()) {
          {
            oprot.writeI32(struct.previousOrNext.size());
            for (java.util.Map.Entry<java.lang.String, java.lang.Boolean> _iter103 : struct.previousOrNext.entrySet())
            {
              oprot.writeString(_iter103.getKey());
              oprot.writeBool(_iter103.getValue());
            }
          }
        }
        if (struct.isSetDpStrMap()) {
          {
            oprot.writeI32(struct.dpStrMap.size());
            for (java.util.Map.Entry<java.lang.String, java.util.List<java.lang.String>> _iter104 : struct.dpStrMap.entrySet())
            {
              oprot.writeString(_iter104.getKey());
              {
                oprot.writeI32(_iter104.getValue().size());
                for (java.lang.String _iter105 : _iter104.getValue())
                {
                  oprot.writeString(_iter105);
                }
              }
            }
          }
        }
        if (struct.isSetBfBufferMap()) {
          {
            oprot.writeI32(struct.bfBufferMap.size());
            for (java.util.Map.Entry<java.lang.String, java.nio.ByteBuffer> _iter106 : struct.bfBufferMap.entrySet())
            {
              oprot.writeString(_iter106.getKey());
              oprot.writeBinary(_iter106.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, eqJoinFilter_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.varName = iprot.readString();
          struct.setVarNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.window = iprot.readI64();
          struct.setWindowIsSet(true);
        }
        if (incoming.get(2)) {
          struct.headTailMarker = iprot.readI32();
          struct.setHeadTailMarkerIsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TMap _map107 = iprot.readMapBegin(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.BOOL); 
            struct.previousOrNext = new java.util.HashMap<java.lang.String,java.lang.Boolean>(2*_map107.size);
            @org.apache.thrift.annotation.Nullable java.lang.String _key108;
            boolean _val109;
            for (int _i110 = 0; _i110 < _map107.size; ++_i110)
            {
              _key108 = iprot.readString();
              _val109 = iprot.readBool();
              struct.previousOrNext.put(_key108, _val109);
            }
          }
          struct.setPreviousOrNextIsSet(true);
        }
        if (incoming.get(4)) {
          {
            org.apache.thrift.protocol.TMap _map111 = iprot.readMapBegin(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST); 
            struct.dpStrMap = new java.util.HashMap<java.lang.String,java.util.List<java.lang.String>>(2*_map111.size);
            @org.apache.thrift.annotation.Nullable java.lang.String _key112;
            @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> _val113;
            for (int _i114 = 0; _i114 < _map111.size; ++_i114)
            {
              _key112 = iprot.readString();
              {
                org.apache.thrift.protocol.TList _list115 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
                _val113 = new java.util.ArrayList<java.lang.String>(_list115.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem116;
                for (int _i117 = 0; _i117 < _list115.size; ++_i117)
                {
                  _elem116 = iprot.readString();
                  _val113.add(_elem116);
                }
              }
              struct.dpStrMap.put(_key112, _val113);
            }
          }
          struct.setDpStrMapIsSet(true);
        }
        if (incoming.get(5)) {
          {
            org.apache.thrift.protocol.TMap _map118 = iprot.readMapBegin(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING); 
            struct.bfBufferMap = new java.util.HashMap<java.lang.String,java.nio.ByteBuffer>(2*_map118.size);
            @org.apache.thrift.annotation.Nullable java.lang.String _key119;
            @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _val120;
            for (int _i121 = 0; _i121 < _map118.size; ++_i121)
            {
              _key119 = iprot.readString();
              _val120 = iprot.readBinary();
              struct.bfBufferMap.put(_key119, _val120);
            }
          }
          struct.setBfBufferMapIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class eqJoinFilter_result implements org.apache.thrift.TBase<eqJoinFilter_result, eqJoinFilter_result._Fields>, java.io.Serializable, Cloneable, Comparable<eqJoinFilter_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("eqJoinFilter_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new eqJoinFilter_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new eqJoinFilter_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(eqJoinFilter_result.class, metaDataMap);
    }

    public eqJoinFilter_result() {
    }

    public eqJoinFilter_result(
      java.nio.ByteBuffer success)
    {
      this();
      this.success = org.apache.thrift.TBaseHelper.copyBinary(success);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public eqJoinFilter_result(eqJoinFilter_result other) {
      if (other.isSetSuccess()) {
        this.success = org.apache.thrift.TBaseHelper.copyBinary(other.success);
      }
    }

    @Override
    public eqJoinFilter_result deepCopy() {
      return new eqJoinFilter_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public byte[] getSuccess() {
      setSuccess(org.apache.thrift.TBaseHelper.rightSize(success));
      return success == null ? null : success.array();
    }

    public java.nio.ByteBuffer bufferForSuccess() {
      return org.apache.thrift.TBaseHelper.copyBinary(success);
    }

    public eqJoinFilter_result setSuccess(byte[] success) {
      this.success = success == null ? (java.nio.ByteBuffer)null     : java.nio.ByteBuffer.wrap(success.clone());
      return this;
    }

    public eqJoinFilter_result setSuccess(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer success) {
      this.success = org.apache.thrift.TBaseHelper.copyBinary(success);
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          if (value instanceof byte[]) {
            setSuccess((byte[])value);
          } else {
            setSuccess((java.nio.ByteBuffer)value);
          }
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof eqJoinFilter_result)
        return this.equals((eqJoinFilter_result)that);
      return false;
    }

    public boolean equals(eqJoinFilter_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(eqJoinFilter_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("eqJoinFilter_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.success, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class eqJoinFilter_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public eqJoinFilter_resultStandardScheme getScheme() {
        return new eqJoinFilter_resultStandardScheme();
      }
    }

    private static class eqJoinFilter_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<eqJoinFilter_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, eqJoinFilter_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readBinary();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, eqJoinFilter_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBinary(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class eqJoinFilter_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public eqJoinFilter_resultTupleScheme getScheme() {
        return new eqJoinFilter_resultTupleScheme();
      }
    }

    private static class eqJoinFilter_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<eqJoinFilter_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, eqJoinFilter_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBinary(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, eqJoinFilter_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBinary();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class neqJoinFilter_args implements org.apache.thrift.TBase<neqJoinFilter_args, neqJoinFilter_args._Fields>, java.io.Serializable, Cloneable, Comparable<neqJoinFilter_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("neqJoinFilter_args");

    private static final org.apache.thrift.protocol.TField VAR_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("varName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField WINDOW_FIELD_DESC = new org.apache.thrift.protocol.TField("window", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField HEAD_TAIL_MARKER_FIELD_DESC = new org.apache.thrift.protocol.TField("headTailMarker", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField PREVIOUS_OR_NEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("previousOrNext", org.apache.thrift.protocol.TType.MAP, (short)4);
    private static final org.apache.thrift.protocol.TField DP_STR_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("dpStrMap", org.apache.thrift.protocol.TType.MAP, (short)5);
    private static final org.apache.thrift.protocol.TField VALUE_RANGE_FIELD_DESC = new org.apache.thrift.protocol.TField("valueRange", org.apache.thrift.protocol.TType.MAP, (short)6);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new neqJoinFilter_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new neqJoinFilter_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String varName; // required
    public long window; // required
    public int headTailMarker; // required
    public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.Boolean> previousOrNext; // required
    public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.util.List<java.lang.String>> dpStrMap; // required
    public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,MinMaxPair> valueRange; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VAR_NAME((short)1, "varName"),
      WINDOW((short)2, "window"),
      HEAD_TAIL_MARKER((short)3, "headTailMarker"),
      PREVIOUS_OR_NEXT((short)4, "previousOrNext"),
      DP_STR_MAP((short)5, "dpStrMap"),
      VALUE_RANGE((short)6, "valueRange");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VAR_NAME
            return VAR_NAME;
          case 2: // WINDOW
            return WINDOW;
          case 3: // HEAD_TAIL_MARKER
            return HEAD_TAIL_MARKER;
          case 4: // PREVIOUS_OR_NEXT
            return PREVIOUS_OR_NEXT;
          case 5: // DP_STR_MAP
            return DP_STR_MAP;
          case 6: // VALUE_RANGE
            return VALUE_RANGE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __WINDOW_ISSET_ID = 0;
    private static final int __HEADTAILMARKER_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VAR_NAME, new org.apache.thrift.meta_data.FieldMetaData("varName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.WINDOW, new org.apache.thrift.meta_data.FieldMetaData("window", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.HEAD_TAIL_MARKER, new org.apache.thrift.meta_data.FieldMetaData("headTailMarker", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PREVIOUS_OR_NEXT, new org.apache.thrift.meta_data.FieldMetaData("previousOrNext", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL))));
      tmpMap.put(_Fields.DP_STR_MAP, new org.apache.thrift.meta_data.FieldMetaData("dpStrMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
      tmpMap.put(_Fields.VALUE_RANGE, new org.apache.thrift.meta_data.FieldMetaData("valueRange", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MinMaxPair.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(neqJoinFilter_args.class, metaDataMap);
    }

    public neqJoinFilter_args() {
    }

    public neqJoinFilter_args(
      java.lang.String varName,
      long window,
      int headTailMarker,
      java.util.Map<java.lang.String,java.lang.Boolean> previousOrNext,
      java.util.Map<java.lang.String,java.util.List<java.lang.String>> dpStrMap,
      java.util.Map<java.lang.String,MinMaxPair> valueRange)
    {
      this();
      this.varName = varName;
      this.window = window;
      setWindowIsSet(true);
      this.headTailMarker = headTailMarker;
      setHeadTailMarkerIsSet(true);
      this.previousOrNext = previousOrNext;
      this.dpStrMap = dpStrMap;
      this.valueRange = valueRange;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public neqJoinFilter_args(neqJoinFilter_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetVarName()) {
        this.varName = other.varName;
      }
      this.window = other.window;
      this.headTailMarker = other.headTailMarker;
      if (other.isSetPreviousOrNext()) {
        java.util.Map<java.lang.String,java.lang.Boolean> __this__previousOrNext = new java.util.HashMap<java.lang.String,java.lang.Boolean>(other.previousOrNext);
        this.previousOrNext = __this__previousOrNext;
      }
      if (other.isSetDpStrMap()) {
        java.util.Map<java.lang.String,java.util.List<java.lang.String>> __this__dpStrMap = new java.util.HashMap<java.lang.String,java.util.List<java.lang.String>>(other.dpStrMap.size());
        for (java.util.Map.Entry<java.lang.String, java.util.List<java.lang.String>> other_element : other.dpStrMap.entrySet()) {

          java.lang.String other_element_key = other_element.getKey();
          java.util.List<java.lang.String> other_element_value = other_element.getValue();

          java.lang.String __this__dpStrMap_copy_key = other_element_key;

          java.util.List<java.lang.String> __this__dpStrMap_copy_value = new java.util.ArrayList<java.lang.String>(other_element_value);

          __this__dpStrMap.put(__this__dpStrMap_copy_key, __this__dpStrMap_copy_value);
        }
        this.dpStrMap = __this__dpStrMap;
      }
      if (other.isSetValueRange()) {
        java.util.Map<java.lang.String,MinMaxPair> __this__valueRange = new java.util.HashMap<java.lang.String,MinMaxPair>(other.valueRange.size());
        for (java.util.Map.Entry<java.lang.String, MinMaxPair> other_element : other.valueRange.entrySet()) {

          java.lang.String other_element_key = other_element.getKey();
          MinMaxPair other_element_value = other_element.getValue();

          java.lang.String __this__valueRange_copy_key = other_element_key;

          MinMaxPair __this__valueRange_copy_value = new MinMaxPair(other_element_value);

          __this__valueRange.put(__this__valueRange_copy_key, __this__valueRange_copy_value);
        }
        this.valueRange = __this__valueRange;
      }
    }

    @Override
    public neqJoinFilter_args deepCopy() {
      return new neqJoinFilter_args(this);
    }

    @Override
    public void clear() {
      this.varName = null;
      setWindowIsSet(false);
      this.window = 0;
      setHeadTailMarkerIsSet(false);
      this.headTailMarker = 0;
      this.previousOrNext = null;
      this.dpStrMap = null;
      this.valueRange = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getVarName() {
      return this.varName;
    }

    public neqJoinFilter_args setVarName(@org.apache.thrift.annotation.Nullable java.lang.String varName) {
      this.varName = varName;
      return this;
    }

    public void unsetVarName() {
      this.varName = null;
    }

    /** Returns true if field varName is set (has been assigned a value) and false otherwise */
    public boolean isSetVarName() {
      return this.varName != null;
    }

    public void setVarNameIsSet(boolean value) {
      if (!value) {
        this.varName = null;
      }
    }

    public long getWindow() {
      return this.window;
    }

    public neqJoinFilter_args setWindow(long window) {
      this.window = window;
      setWindowIsSet(true);
      return this;
    }

    public void unsetWindow() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __WINDOW_ISSET_ID);
    }

    /** Returns true if field window is set (has been assigned a value) and false otherwise */
    public boolean isSetWindow() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __WINDOW_ISSET_ID);
    }

    public void setWindowIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __WINDOW_ISSET_ID, value);
    }

    public int getHeadTailMarker() {
      return this.headTailMarker;
    }

    public neqJoinFilter_args setHeadTailMarker(int headTailMarker) {
      this.headTailMarker = headTailMarker;
      setHeadTailMarkerIsSet(true);
      return this;
    }

    public void unsetHeadTailMarker() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HEADTAILMARKER_ISSET_ID);
    }

    /** Returns true if field headTailMarker is set (has been assigned a value) and false otherwise */
    public boolean isSetHeadTailMarker() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HEADTAILMARKER_ISSET_ID);
    }

    public void setHeadTailMarkerIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HEADTAILMARKER_ISSET_ID, value);
    }

    public int getPreviousOrNextSize() {
      return (this.previousOrNext == null) ? 0 : this.previousOrNext.size();
    }

    public void putToPreviousOrNext(java.lang.String key, boolean val) {
      if (this.previousOrNext == null) {
        this.previousOrNext = new java.util.HashMap<java.lang.String,java.lang.Boolean>();
      }
      this.previousOrNext.put(key, val);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Map<java.lang.String,java.lang.Boolean> getPreviousOrNext() {
      return this.previousOrNext;
    }

    public neqJoinFilter_args setPreviousOrNext(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.Boolean> previousOrNext) {
      this.previousOrNext = previousOrNext;
      return this;
    }

    public void unsetPreviousOrNext() {
      this.previousOrNext = null;
    }

    /** Returns true if field previousOrNext is set (has been assigned a value) and false otherwise */
    public boolean isSetPreviousOrNext() {
      return this.previousOrNext != null;
    }

    public void setPreviousOrNextIsSet(boolean value) {
      if (!value) {
        this.previousOrNext = null;
      }
    }

    public int getDpStrMapSize() {
      return (this.dpStrMap == null) ? 0 : this.dpStrMap.size();
    }

    public void putToDpStrMap(java.lang.String key, java.util.List<java.lang.String> val) {
      if (this.dpStrMap == null) {
        this.dpStrMap = new java.util.HashMap<java.lang.String,java.util.List<java.lang.String>>();
      }
      this.dpStrMap.put(key, val);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Map<java.lang.String,java.util.List<java.lang.String>> getDpStrMap() {
      return this.dpStrMap;
    }

    public neqJoinFilter_args setDpStrMap(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.util.List<java.lang.String>> dpStrMap) {
      this.dpStrMap = dpStrMap;
      return this;
    }

    public void unsetDpStrMap() {
      this.dpStrMap = null;
    }

    /** Returns true if field dpStrMap is set (has been assigned a value) and false otherwise */
    public boolean isSetDpStrMap() {
      return this.dpStrMap != null;
    }

    public void setDpStrMapIsSet(boolean value) {
      if (!value) {
        this.dpStrMap = null;
      }
    }

    public int getValueRangeSize() {
      return (this.valueRange == null) ? 0 : this.valueRange.size();
    }

    public void putToValueRange(java.lang.String key, MinMaxPair val) {
      if (this.valueRange == null) {
        this.valueRange = new java.util.HashMap<java.lang.String,MinMaxPair>();
      }
      this.valueRange.put(key, val);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Map<java.lang.String,MinMaxPair> getValueRange() {
      return this.valueRange;
    }

    public neqJoinFilter_args setValueRange(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,MinMaxPair> valueRange) {
      this.valueRange = valueRange;
      return this;
    }

    public void unsetValueRange() {
      this.valueRange = null;
    }

    /** Returns true if field valueRange is set (has been assigned a value) and false otherwise */
    public boolean isSetValueRange() {
      return this.valueRange != null;
    }

    public void setValueRangeIsSet(boolean value) {
      if (!value) {
        this.valueRange = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case VAR_NAME:
        if (value == null) {
          unsetVarName();
        } else {
          setVarName((java.lang.String)value);
        }
        break;

      case WINDOW:
        if (value == null) {
          unsetWindow();
        } else {
          setWindow((java.lang.Long)value);
        }
        break;

      case HEAD_TAIL_MARKER:
        if (value == null) {
          unsetHeadTailMarker();
        } else {
          setHeadTailMarker((java.lang.Integer)value);
        }
        break;

      case PREVIOUS_OR_NEXT:
        if (value == null) {
          unsetPreviousOrNext();
        } else {
          setPreviousOrNext((java.util.Map<java.lang.String,java.lang.Boolean>)value);
        }
        break;

      case DP_STR_MAP:
        if (value == null) {
          unsetDpStrMap();
        } else {
          setDpStrMap((java.util.Map<java.lang.String,java.util.List<java.lang.String>>)value);
        }
        break;

      case VALUE_RANGE:
        if (value == null) {
          unsetValueRange();
        } else {
          setValueRange((java.util.Map<java.lang.String,MinMaxPair>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case VAR_NAME:
        return getVarName();

      case WINDOW:
        return getWindow();

      case HEAD_TAIL_MARKER:
        return getHeadTailMarker();

      case PREVIOUS_OR_NEXT:
        return getPreviousOrNext();

      case DP_STR_MAP:
        return getDpStrMap();

      case VALUE_RANGE:
        return getValueRange();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case VAR_NAME:
        return isSetVarName();
      case WINDOW:
        return isSetWindow();
      case HEAD_TAIL_MARKER:
        return isSetHeadTailMarker();
      case PREVIOUS_OR_NEXT:
        return isSetPreviousOrNext();
      case DP_STR_MAP:
        return isSetDpStrMap();
      case VALUE_RANGE:
        return isSetValueRange();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof neqJoinFilter_args)
        return this.equals((neqJoinFilter_args)that);
      return false;
    }

    public boolean equals(neqJoinFilter_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_varName = true && this.isSetVarName();
      boolean that_present_varName = true && that.isSetVarName();
      if (this_present_varName || that_present_varName) {
        if (!(this_present_varName && that_present_varName))
          return false;
        if (!this.varName.equals(that.varName))
          return false;
      }

      boolean this_present_window = true;
      boolean that_present_window = true;
      if (this_present_window || that_present_window) {
        if (!(this_present_window && that_present_window))
          return false;
        if (this.window != that.window)
          return false;
      }

      boolean this_present_headTailMarker = true;
      boolean that_present_headTailMarker = true;
      if (this_present_headTailMarker || that_present_headTailMarker) {
        if (!(this_present_headTailMarker && that_present_headTailMarker))
          return false;
        if (this.headTailMarker != that.headTailMarker)
          return false;
      }

      boolean this_present_previousOrNext = true && this.isSetPreviousOrNext();
      boolean that_present_previousOrNext = true && that.isSetPreviousOrNext();
      if (this_present_previousOrNext || that_present_previousOrNext) {
        if (!(this_present_previousOrNext && that_present_previousOrNext))
          return false;
        if (!this.previousOrNext.equals(that.previousOrNext))
          return false;
      }

      boolean this_present_dpStrMap = true && this.isSetDpStrMap();
      boolean that_present_dpStrMap = true && that.isSetDpStrMap();
      if (this_present_dpStrMap || that_present_dpStrMap) {
        if (!(this_present_dpStrMap && that_present_dpStrMap))
          return false;
        if (!this.dpStrMap.equals(that.dpStrMap))
          return false;
      }

      boolean this_present_valueRange = true && this.isSetValueRange();
      boolean that_present_valueRange = true && that.isSetValueRange();
      if (this_present_valueRange || that_present_valueRange) {
        if (!(this_present_valueRange && that_present_valueRange))
          return false;
        if (!this.valueRange.equals(that.valueRange))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetVarName()) ? 131071 : 524287);
      if (isSetVarName())
        hashCode = hashCode * 8191 + varName.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(window);

      hashCode = hashCode * 8191 + headTailMarker;

      hashCode = hashCode * 8191 + ((isSetPreviousOrNext()) ? 131071 : 524287);
      if (isSetPreviousOrNext())
        hashCode = hashCode * 8191 + previousOrNext.hashCode();

      hashCode = hashCode * 8191 + ((isSetDpStrMap()) ? 131071 : 524287);
      if (isSetDpStrMap())
        hashCode = hashCode * 8191 + dpStrMap.hashCode();

      hashCode = hashCode * 8191 + ((isSetValueRange()) ? 131071 : 524287);
      if (isSetValueRange())
        hashCode = hashCode * 8191 + valueRange.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(neqJoinFilter_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetVarName(), other.isSetVarName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVarName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.varName, other.varName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetWindow(), other.isSetWindow());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWindow()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.window, other.window);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetHeadTailMarker(), other.isSetHeadTailMarker());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHeadTailMarker()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.headTailMarker, other.headTailMarker);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetPreviousOrNext(), other.isSetPreviousOrNext());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPreviousOrNext()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.previousOrNext, other.previousOrNext);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetDpStrMap(), other.isSetDpStrMap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDpStrMap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dpStrMap, other.dpStrMap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetValueRange(), other.isSetValueRange());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetValueRange()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.valueRange, other.valueRange);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("neqJoinFilter_args(");
      boolean first = true;

      sb.append("varName:");
      if (this.varName == null) {
        sb.append("null");
      } else {
        sb.append(this.varName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("window:");
      sb.append(this.window);
      first = false;
      if (!first) sb.append(", ");
      sb.append("headTailMarker:");
      sb.append(this.headTailMarker);
      first = false;
      if (!first) sb.append(", ");
      sb.append("previousOrNext:");
      if (this.previousOrNext == null) {
        sb.append("null");
      } else {
        sb.append(this.previousOrNext);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dpStrMap:");
      if (this.dpStrMap == null) {
        sb.append("null");
      } else {
        sb.append(this.dpStrMap);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("valueRange:");
      if (this.valueRange == null) {
        sb.append("null");
      } else {
        sb.append(this.valueRange);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class neqJoinFilter_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public neqJoinFilter_argsStandardScheme getScheme() {
        return new neqJoinFilter_argsStandardScheme();
      }
    }

    private static class neqJoinFilter_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<neqJoinFilter_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, neqJoinFilter_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VAR_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.varName = iprot.readString();
                struct.setVarNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // WINDOW
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.window = iprot.readI64();
                struct.setWindowIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // HEAD_TAIL_MARKER
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.headTailMarker = iprot.readI32();
                struct.setHeadTailMarkerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PREVIOUS_OR_NEXT
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map122 = iprot.readMapBegin();
                  struct.previousOrNext = new java.util.HashMap<java.lang.String,java.lang.Boolean>(2*_map122.size);
                  @org.apache.thrift.annotation.Nullable java.lang.String _key123;
                  boolean _val124;
                  for (int _i125 = 0; _i125 < _map122.size; ++_i125)
                  {
                    _key123 = iprot.readString();
                    _val124 = iprot.readBool();
                    struct.previousOrNext.put(_key123, _val124);
                  }
                  iprot.readMapEnd();
                }
                struct.setPreviousOrNextIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // DP_STR_MAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map126 = iprot.readMapBegin();
                  struct.dpStrMap = new java.util.HashMap<java.lang.String,java.util.List<java.lang.String>>(2*_map126.size);
                  @org.apache.thrift.annotation.Nullable java.lang.String _key127;
                  @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> _val128;
                  for (int _i129 = 0; _i129 < _map126.size; ++_i129)
                  {
                    _key127 = iprot.readString();
                    {
                      org.apache.thrift.protocol.TList _list130 = iprot.readListBegin();
                      _val128 = new java.util.ArrayList<java.lang.String>(_list130.size);
                      @org.apache.thrift.annotation.Nullable java.lang.String _elem131;
                      for (int _i132 = 0; _i132 < _list130.size; ++_i132)
                      {
                        _elem131 = iprot.readString();
                        _val128.add(_elem131);
                      }
                      iprot.readListEnd();
                    }
                    struct.dpStrMap.put(_key127, _val128);
                  }
                  iprot.readMapEnd();
                }
                struct.setDpStrMapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // VALUE_RANGE
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map133 = iprot.readMapBegin();
                  struct.valueRange = new java.util.HashMap<java.lang.String,MinMaxPair>(2*_map133.size);
                  @org.apache.thrift.annotation.Nullable java.lang.String _key134;
                  @org.apache.thrift.annotation.Nullable MinMaxPair _val135;
                  for (int _i136 = 0; _i136 < _map133.size; ++_i136)
                  {
                    _key134 = iprot.readString();
                    _val135 = new MinMaxPair();
                    _val135.read(iprot);
                    struct.valueRange.put(_key134, _val135);
                  }
                  iprot.readMapEnd();
                }
                struct.setValueRangeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, neqJoinFilter_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.varName != null) {
          oprot.writeFieldBegin(VAR_NAME_FIELD_DESC);
          oprot.writeString(struct.varName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(WINDOW_FIELD_DESC);
        oprot.writeI64(struct.window);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(HEAD_TAIL_MARKER_FIELD_DESC);
        oprot.writeI32(struct.headTailMarker);
        oprot.writeFieldEnd();
        if (struct.previousOrNext != null) {
          oprot.writeFieldBegin(PREVIOUS_OR_NEXT_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.BOOL, struct.previousOrNext.size()));
            for (java.util.Map.Entry<java.lang.String, java.lang.Boolean> _iter137 : struct.previousOrNext.entrySet())
            {
              oprot.writeString(_iter137.getKey());
              oprot.writeBool(_iter137.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.dpStrMap != null) {
          oprot.writeFieldBegin(DP_STR_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, struct.dpStrMap.size()));
            for (java.util.Map.Entry<java.lang.String, java.util.List<java.lang.String>> _iter138 : struct.dpStrMap.entrySet())
            {
              oprot.writeString(_iter138.getKey());
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, _iter138.getValue().size()));
                for (java.lang.String _iter139 : _iter138.getValue())
                {
                  oprot.writeString(_iter139);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.valueRange != null) {
          oprot.writeFieldBegin(VALUE_RANGE_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.valueRange.size()));
            for (java.util.Map.Entry<java.lang.String, MinMaxPair> _iter140 : struct.valueRange.entrySet())
            {
              oprot.writeString(_iter140.getKey());
              _iter140.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class neqJoinFilter_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public neqJoinFilter_argsTupleScheme getScheme() {
        return new neqJoinFilter_argsTupleScheme();
      }
    }

    private static class neqJoinFilter_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<neqJoinFilter_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, neqJoinFilter_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetVarName()) {
          optionals.set(0);
        }
        if (struct.isSetWindow()) {
          optionals.set(1);
        }
        if (struct.isSetHeadTailMarker()) {
          optionals.set(2);
        }
        if (struct.isSetPreviousOrNext()) {
          optionals.set(3);
        }
        if (struct.isSetDpStrMap()) {
          optionals.set(4);
        }
        if (struct.isSetValueRange()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetVarName()) {
          oprot.writeString(struct.varName);
        }
        if (struct.isSetWindow()) {
          oprot.writeI64(struct.window);
        }
        if (struct.isSetHeadTailMarker()) {
          oprot.writeI32(struct.headTailMarker);
        }
        if (struct.isSetPreviousOrNext()) {
          {
            oprot.writeI32(struct.previousOrNext.size());
            for (java.util.Map.Entry<java.lang.String, java.lang.Boolean> _iter141 : struct.previousOrNext.entrySet())
            {
              oprot.writeString(_iter141.getKey());
              oprot.writeBool(_iter141.getValue());
            }
          }
        }
        if (struct.isSetDpStrMap()) {
          {
            oprot.writeI32(struct.dpStrMap.size());
            for (java.util.Map.Entry<java.lang.String, java.util.List<java.lang.String>> _iter142 : struct.dpStrMap.entrySet())
            {
              oprot.writeString(_iter142.getKey());
              {
                oprot.writeI32(_iter142.getValue().size());
                for (java.lang.String _iter143 : _iter142.getValue())
                {
                  oprot.writeString(_iter143);
                }
              }
            }
          }
        }
        if (struct.isSetValueRange()) {
          {
            oprot.writeI32(struct.valueRange.size());
            for (java.util.Map.Entry<java.lang.String, MinMaxPair> _iter144 : struct.valueRange.entrySet())
            {
              oprot.writeString(_iter144.getKey());
              _iter144.getValue().write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, neqJoinFilter_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.varName = iprot.readString();
          struct.setVarNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.window = iprot.readI64();
          struct.setWindowIsSet(true);
        }
        if (incoming.get(2)) {
          struct.headTailMarker = iprot.readI32();
          struct.setHeadTailMarkerIsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TMap _map145 = iprot.readMapBegin(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.BOOL); 
            struct.previousOrNext = new java.util.HashMap<java.lang.String,java.lang.Boolean>(2*_map145.size);
            @org.apache.thrift.annotation.Nullable java.lang.String _key146;
            boolean _val147;
            for (int _i148 = 0; _i148 < _map145.size; ++_i148)
            {
              _key146 = iprot.readString();
              _val147 = iprot.readBool();
              struct.previousOrNext.put(_key146, _val147);
            }
          }
          struct.setPreviousOrNextIsSet(true);
        }
        if (incoming.get(4)) {
          {
            org.apache.thrift.protocol.TMap _map149 = iprot.readMapBegin(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST); 
            struct.dpStrMap = new java.util.HashMap<java.lang.String,java.util.List<java.lang.String>>(2*_map149.size);
            @org.apache.thrift.annotation.Nullable java.lang.String _key150;
            @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> _val151;
            for (int _i152 = 0; _i152 < _map149.size; ++_i152)
            {
              _key150 = iprot.readString();
              {
                org.apache.thrift.protocol.TList _list153 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
                _val151 = new java.util.ArrayList<java.lang.String>(_list153.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem154;
                for (int _i155 = 0; _i155 < _list153.size; ++_i155)
                {
                  _elem154 = iprot.readString();
                  _val151.add(_elem154);
                }
              }
              struct.dpStrMap.put(_key150, _val151);
            }
          }
          struct.setDpStrMapIsSet(true);
        }
        if (incoming.get(5)) {
          {
            org.apache.thrift.protocol.TMap _map156 = iprot.readMapBegin(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT); 
            struct.valueRange = new java.util.HashMap<java.lang.String,MinMaxPair>(2*_map156.size);
            @org.apache.thrift.annotation.Nullable java.lang.String _key157;
            @org.apache.thrift.annotation.Nullable MinMaxPair _val158;
            for (int _i159 = 0; _i159 < _map156.size; ++_i159)
            {
              _key157 = iprot.readString();
              _val158 = new MinMaxPair();
              _val158.read(iprot);
              struct.valueRange.put(_key157, _val158);
            }
          }
          struct.setValueRangeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class neqJoinFilter_result implements org.apache.thrift.TBase<neqJoinFilter_result, neqJoinFilter_result._Fields>, java.io.Serializable, Cloneable, Comparable<neqJoinFilter_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("neqJoinFilter_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new neqJoinFilter_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new neqJoinFilter_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(neqJoinFilter_result.class, metaDataMap);
    }

    public neqJoinFilter_result() {
    }

    public neqJoinFilter_result(
      java.nio.ByteBuffer success)
    {
      this();
      this.success = org.apache.thrift.TBaseHelper.copyBinary(success);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public neqJoinFilter_result(neqJoinFilter_result other) {
      if (other.isSetSuccess()) {
        this.success = org.apache.thrift.TBaseHelper.copyBinary(other.success);
      }
    }

    @Override
    public neqJoinFilter_result deepCopy() {
      return new neqJoinFilter_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public byte[] getSuccess() {
      setSuccess(org.apache.thrift.TBaseHelper.rightSize(success));
      return success == null ? null : success.array();
    }

    public java.nio.ByteBuffer bufferForSuccess() {
      return org.apache.thrift.TBaseHelper.copyBinary(success);
    }

    public neqJoinFilter_result setSuccess(byte[] success) {
      this.success = success == null ? (java.nio.ByteBuffer)null     : java.nio.ByteBuffer.wrap(success.clone());
      return this;
    }

    public neqJoinFilter_result setSuccess(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer success) {
      this.success = org.apache.thrift.TBaseHelper.copyBinary(success);
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          if (value instanceof byte[]) {
            setSuccess((byte[])value);
          } else {
            setSuccess((java.nio.ByteBuffer)value);
          }
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof neqJoinFilter_result)
        return this.equals((neqJoinFilter_result)that);
      return false;
    }

    public boolean equals(neqJoinFilter_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(neqJoinFilter_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("neqJoinFilter_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.success, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class neqJoinFilter_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public neqJoinFilter_resultStandardScheme getScheme() {
        return new neqJoinFilter_resultStandardScheme();
      }
    }

    private static class neqJoinFilter_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<neqJoinFilter_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, neqJoinFilter_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readBinary();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, neqJoinFilter_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBinary(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class neqJoinFilter_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public neqJoinFilter_resultTupleScheme getScheme() {
        return new neqJoinFilter_resultTupleScheme();
      }
    }

    private static class neqJoinFilter_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<neqJoinFilter_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, neqJoinFilter_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBinary(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, neqJoinFilter_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBinary();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class getAllFilteredEvents_args implements org.apache.thrift.TBase<getAllFilteredEvents_args, getAllFilteredEvents_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAllFilteredEvents_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllFilteredEvents_args");

    private static final org.apache.thrift.protocol.TField WINDOW_FIELD_DESC = new org.apache.thrift.protocol.TField("window", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField SF_BUFFER_FIELD_DESC = new org.apache.thrift.protocol.TField("sfBuffer", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getAllFilteredEvents_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getAllFilteredEvents_argsTupleSchemeFactory();

    public long window; // required
    public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer sfBuffer; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      WINDOW((short)1, "window"),
      SF_BUFFER((short)2, "sfBuffer");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // WINDOW
            return WINDOW;
          case 2: // SF_BUFFER
            return SF_BUFFER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __WINDOW_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.WINDOW, new org.apache.thrift.meta_data.FieldMetaData("window", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.SF_BUFFER, new org.apache.thrift.meta_data.FieldMetaData("sfBuffer", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllFilteredEvents_args.class, metaDataMap);
    }

    public getAllFilteredEvents_args() {
    }

    public getAllFilteredEvents_args(
      long window,
      java.nio.ByteBuffer sfBuffer)
    {
      this();
      this.window = window;
      setWindowIsSet(true);
      this.sfBuffer = org.apache.thrift.TBaseHelper.copyBinary(sfBuffer);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllFilteredEvents_args(getAllFilteredEvents_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.window = other.window;
      if (other.isSetSfBuffer()) {
        this.sfBuffer = org.apache.thrift.TBaseHelper.copyBinary(other.sfBuffer);
      }
    }

    @Override
    public getAllFilteredEvents_args deepCopy() {
      return new getAllFilteredEvents_args(this);
    }

    @Override
    public void clear() {
      setWindowIsSet(false);
      this.window = 0;
      this.sfBuffer = null;
    }

    public long getWindow() {
      return this.window;
    }

    public getAllFilteredEvents_args setWindow(long window) {
      this.window = window;
      setWindowIsSet(true);
      return this;
    }

    public void unsetWindow() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __WINDOW_ISSET_ID);
    }

    /** Returns true if field window is set (has been assigned a value) and false otherwise */
    public boolean isSetWindow() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __WINDOW_ISSET_ID);
    }

    public void setWindowIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __WINDOW_ISSET_ID, value);
    }

    public byte[] getSfBuffer() {
      setSfBuffer(org.apache.thrift.TBaseHelper.rightSize(sfBuffer));
      return sfBuffer == null ? null : sfBuffer.array();
    }

    public java.nio.ByteBuffer bufferForSfBuffer() {
      return org.apache.thrift.TBaseHelper.copyBinary(sfBuffer);
    }

    public getAllFilteredEvents_args setSfBuffer(byte[] sfBuffer) {
      this.sfBuffer = sfBuffer == null ? (java.nio.ByteBuffer)null     : java.nio.ByteBuffer.wrap(sfBuffer.clone());
      return this;
    }

    public getAllFilteredEvents_args setSfBuffer(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer sfBuffer) {
      this.sfBuffer = org.apache.thrift.TBaseHelper.copyBinary(sfBuffer);
      return this;
    }

    public void unsetSfBuffer() {
      this.sfBuffer = null;
    }

    /** Returns true if field sfBuffer is set (has been assigned a value) and false otherwise */
    public boolean isSetSfBuffer() {
      return this.sfBuffer != null;
    }

    public void setSfBufferIsSet(boolean value) {
      if (!value) {
        this.sfBuffer = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case WINDOW:
        if (value == null) {
          unsetWindow();
        } else {
          setWindow((java.lang.Long)value);
        }
        break;

      case SF_BUFFER:
        if (value == null) {
          unsetSfBuffer();
        } else {
          if (value instanceof byte[]) {
            setSfBuffer((byte[])value);
          } else {
            setSfBuffer((java.nio.ByteBuffer)value);
          }
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case WINDOW:
        return getWindow();

      case SF_BUFFER:
        return getSfBuffer();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case WINDOW:
        return isSetWindow();
      case SF_BUFFER:
        return isSetSfBuffer();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof getAllFilteredEvents_args)
        return this.equals((getAllFilteredEvents_args)that);
      return false;
    }

    public boolean equals(getAllFilteredEvents_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_window = true;
      boolean that_present_window = true;
      if (this_present_window || that_present_window) {
        if (!(this_present_window && that_present_window))
          return false;
        if (this.window != that.window)
          return false;
      }

      boolean this_present_sfBuffer = true && this.isSetSfBuffer();
      boolean that_present_sfBuffer = true && that.isSetSfBuffer();
      if (this_present_sfBuffer || that_present_sfBuffer) {
        if (!(this_present_sfBuffer && that_present_sfBuffer))
          return false;
        if (!this.sfBuffer.equals(that.sfBuffer))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(window);

      hashCode = hashCode * 8191 + ((isSetSfBuffer()) ? 131071 : 524287);
      if (isSetSfBuffer())
        hashCode = hashCode * 8191 + sfBuffer.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getAllFilteredEvents_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetWindow(), other.isSetWindow());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWindow()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.window, other.window);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetSfBuffer(), other.isSetSfBuffer());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSfBuffer()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sfBuffer, other.sfBuffer);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getAllFilteredEvents_args(");
      boolean first = true;

      sb.append("window:");
      sb.append(this.window);
      first = false;
      if (!first) sb.append(", ");
      sb.append("sfBuffer:");
      if (this.sfBuffer == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.sfBuffer, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllFilteredEvents_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getAllFilteredEvents_argsStandardScheme getScheme() {
        return new getAllFilteredEvents_argsStandardScheme();
      }
    }

    private static class getAllFilteredEvents_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getAllFilteredEvents_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllFilteredEvents_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // WINDOW
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.window = iprot.readI64();
                struct.setWindowIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SF_BUFFER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sfBuffer = iprot.readBinary();
                struct.setSfBufferIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllFilteredEvents_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(WINDOW_FIELD_DESC);
        oprot.writeI64(struct.window);
        oprot.writeFieldEnd();
        if (struct.sfBuffer != null) {
          oprot.writeFieldBegin(SF_BUFFER_FIELD_DESC);
          oprot.writeBinary(struct.sfBuffer);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllFilteredEvents_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getAllFilteredEvents_argsTupleScheme getScheme() {
        return new getAllFilteredEvents_argsTupleScheme();
      }
    }

    private static class getAllFilteredEvents_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getAllFilteredEvents_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllFilteredEvents_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetWindow()) {
          optionals.set(0);
        }
        if (struct.isSetSfBuffer()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetWindow()) {
          oprot.writeI64(struct.window);
        }
        if (struct.isSetSfBuffer()) {
          oprot.writeBinary(struct.sfBuffer);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllFilteredEvents_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.window = iprot.readI64();
          struct.setWindowIsSet(true);
        }
        if (incoming.get(1)) {
          struct.sfBuffer = iprot.readBinary();
          struct.setSfBufferIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class getAllFilteredEvents_result implements org.apache.thrift.TBase<getAllFilteredEvents_result, getAllFilteredEvents_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAllFilteredEvents_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllFilteredEvents_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getAllFilteredEvents_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getAllFilteredEvents_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllFilteredEvents_result.class, metaDataMap);
    }

    public getAllFilteredEvents_result() {
    }

    public getAllFilteredEvents_result(
      java.nio.ByteBuffer success)
    {
      this();
      this.success = org.apache.thrift.TBaseHelper.copyBinary(success);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllFilteredEvents_result(getAllFilteredEvents_result other) {
      if (other.isSetSuccess()) {
        this.success = org.apache.thrift.TBaseHelper.copyBinary(other.success);
      }
    }

    @Override
    public getAllFilteredEvents_result deepCopy() {
      return new getAllFilteredEvents_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public byte[] getSuccess() {
      setSuccess(org.apache.thrift.TBaseHelper.rightSize(success));
      return success == null ? null : success.array();
    }

    public java.nio.ByteBuffer bufferForSuccess() {
      return org.apache.thrift.TBaseHelper.copyBinary(success);
    }

    public getAllFilteredEvents_result setSuccess(byte[] success) {
      this.success = success == null ? (java.nio.ByteBuffer)null     : java.nio.ByteBuffer.wrap(success.clone());
      return this;
    }

    public getAllFilteredEvents_result setSuccess(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer success) {
      this.success = org.apache.thrift.TBaseHelper.copyBinary(success);
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          if (value instanceof byte[]) {
            setSuccess((byte[])value);
          } else {
            setSuccess((java.nio.ByteBuffer)value);
          }
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof getAllFilteredEvents_result)
        return this.equals((getAllFilteredEvents_result)that);
      return false;
    }

    public boolean equals(getAllFilteredEvents_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getAllFilteredEvents_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getAllFilteredEvents_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.success, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllFilteredEvents_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getAllFilteredEvents_resultStandardScheme getScheme() {
        return new getAllFilteredEvents_resultStandardScheme();
      }
    }

    private static class getAllFilteredEvents_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getAllFilteredEvents_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllFilteredEvents_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readBinary();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllFilteredEvents_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBinary(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllFilteredEvents_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getAllFilteredEvents_resultTupleScheme getScheme() {
        return new getAllFilteredEvents_resultTupleScheme();
      }
    }

    private static class getAllFilteredEvents_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getAllFilteredEvents_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllFilteredEvents_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBinary(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllFilteredEvents_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBinary();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
